Grunt: The JavaScript Task Runner (v0.4.5)

Usage
 grunt [options] [task [task ...]]

Options
             --help, -h  Display this help text.                               
                 --base  Specify an alternate base path. By default, all file  
                         paths are relative to the Gruntfile.                  
                         (grunt.file.setBase) *                                
             --no-color  Disable colored output.                               
            --gruntfile  Specify an alternate Gruntfile. By default, grunt     
                         looks in the current or parent directories for the    
                         nearest Gruntfile.js or Gruntfile.coffee file.        
            --debug, -d  Enable debugging mode for tasks that support it.      
                --stack  Print a stack trace when exiting with a warning or    
                         fatal error.                                          
            --force, -f  A way to force your way past warnings. Want a         
                         suggestion? Don't use this option, fix your code.     
                --tasks  Additional directory paths to scan for task and       
                         "extra" files. (grunt.loadTasks) *                    
                  --npm  Npm-installed grunt plugins to scan for task and      
                         "extra" files. (grunt.loadNpmTasks) *                 
             --no-write  Disable writing files (dry run).                      
          --verbose, -v  Verbose mode. A lot more information output.          
          --version, -V  Print the grunt version. Combine with --verbose for   
                         more info.                                            
           --completion  Output shell auto-completion rules. See the grunt-cli 
                         documentation for more information.                   

Options marked with * have methods exposed via the grunt API and should instead
be specified inside the Gruntfile wherever possible.

Available tasks
                  bower  Install Bower packages. *                             
              bowercopy  Copy only the needed files from bower components over 
                         to their specified file locations *                   
                  clean  Clean files and folders. *                            
              requirejs  Build a RequireJS project. *                          
                   sass  Compile Sass to CSS *                                 
                 uglify  Minify files with UglifyJS. *                         
                  watch  Run predefined tasks whenever watched files change.   
           jasmine_node  Runs jasmine-node. *                                  
                  karma  run karma. *                                          
                  madge  Check for circular dependencies in modules. *         
        _generate_inits  Creates initialization scripts for the app *          
 _generate_modules_list  Returns the list of modules available in the app *    
         requirejs-lazy  Custom task.                                          
                  build  Prepares project runtime artefacts.                   
                    cdc  Circular dependencies check.                          
            clean-build  Main clean/build development task.                    
            development  Main development task including watching changes and  
                         livereloading.                                        
                default  Alias for "development" task.                         
               optimize  Optimizes scripts into the one minified bundle file.  
                release  Tasks used in case of Breeze release. Generates at    
                         once all optimizes bundles.                           
                   test  Runs unit tests in the headless browser.              
               test-all  Runs all pre-commit tests (unit/integrity/backand     
                         ones) at once.                                        
            test-chrome  Runs unit tests in the Chrome browser.                
           test-backend  Runs backend gnostic unit tests.                      
    test-backend-chrome  Runs backend gnostic unit tests in the Chrome browser.
          test-coverage  Runs unit tests coverage (Karma coverage).            
         test-integrity  Runs integrity tests.                                 
             test-debug  Starts Chrome browser prepared for debugging.         
     test-backend-debug  Debugs backend gnostic unit tests in the Chrome       
                         browser.                                              

Tasks run in the order specified. Arguments may be passed to tasks that accept
them by using colons, like "lint:files". Tasks marked with * are "multi tasks"
and will iterate over all sub-targets if no argument is specified.

The list of available tasks may change based on tasks directories or grunt
plugins specified in the Gruntfile or via command-line options.

For more information, see http://gruntjs.com/
