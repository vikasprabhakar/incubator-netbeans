/* The following code was generated by JFlex 1.4.3 on 18/09/17 17:24 */

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.php.editor.parser;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.*;
import org.netbeans.modules.php.editor.*;
import org.netbeans.modules.php.editor.parser.astnodes.*;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING", "EI_EXPOSE_REP2", "UUF_UNUSED_FIELD"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 18/09/17 17:24 from the specification file
 * <tt>/home/junichi11/NetBeansProjects/incubator-netbeans/php/php.editor/tools/ASTPHP5Scanner.flex</tt>
 */
public class ASTPHP5Scanner implements Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ST_DOCBLOCK = 28;
  public static final int ST_END_HEREDOC = 12;
  public static final int ST_DOUBLE_QUOTES = 4;
  public static final int ST_LOOKING_FOR_VARNAME = 22;
  public static final int ST_LOOKING_FOR_PROPERTY = 20;
  public static final int ST_IN_SHORT_ECHO = 32;
  public static final int ST_END_NOWDOC = 18;
  public static final int ST_COMMENT = 26;
  public static final int ST_ONE_LINE_COMMENT = 30;
  public static final int ST_HALTED_COMPILER = 34;
  public static final int ST_START_NOWDOC = 16;
  public static final int ST_VAR_OFFSET = 24;
  public static final int ST_IN_SCRIPTING = 2;
  public static final int ST_HEREDOC = 8;
  public static final int YYINITIAL = 0;
  public static final int ST_NOWDOC = 14;
  public static final int ST_START_HEREDOC = 10;
  public static final int ST_BACKQUOTE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15,
    16, 16, 17, 17
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\17\1\16\2\0\1\20\22\0\1\17\1\62\1\22\1\103"+
    "\1\21\1\66\1\67\1\102\1\55\1\56\1\64\1\4\1\73\1\51"+
    "\1\2\1\65\1\5\1\11\10\1\1\53\1\25\1\63\1\26\1\52"+
    "\1\72\1\77\1\7\1\10\1\35\1\31\1\3\1\32\1\47\1\44"+
    "\1\27\1\57\1\46\1\42\1\43\1\34\1\36\1\50\1\61\1\40"+
    "\1\37\1\30\1\33\1\54\1\45\1\6\1\41\1\13\1\74\1\15"+
    "\1\75\1\71\1\60\1\23\1\7\1\10\1\35\1\31\1\3\1\32"+
    "\1\47\1\44\1\27\1\57\1\46\1\42\1\43\1\34\1\36\1\50"+
    "\1\61\1\40\1\101\1\30\1\33\1\54\1\45\1\6\1\41\1\13"+
    "\1\24\1\70\1\100\1\76\53\13\1\13\12\13\1\13\4\13\1\13"+
    "\5\13\27\13\1\13\37\13\1\13\10\13\u01c2\12\4\0\14\12\16\0"+
    "\5\12\7\0\1\12\1\0\1\12\201\0\5\12\1\0\2\12\2\0"+
    "\4\12\10\0\1\12\1\0\3\12\1\0\1\12\1\0\24\12\1\0"+
    "\123\12\1\0\213\12\10\0\236\12\11\0\46\12\2\0\1\12\7\0"+
    "\47\12\110\0\33\12\5\0\3\12\55\0\53\12\25\0\12\14\4\0"+
    "\2\12\1\0\143\12\1\0\1\12\17\0\2\12\7\0\2\12\12\14"+
    "\3\12\2\0\1\12\20\0\1\12\1\0\36\12\35\0\131\12\13\0"+
    "\1\12\16\0\12\14\41\12\11\0\2\12\4\0\1\12\5\0\26\12"+
    "\4\0\1\12\11\0\1\12\3\0\1\12\27\0\31\12\107\0\1\12"+
    "\1\0\13\12\127\0\66\12\3\0\1\12\22\0\1\12\7\0\12\12"+
    "\4\0\12\14\1\0\7\12\1\0\7\12\5\0\10\12\2\0\2\12"+
    "\2\0\26\12\1\0\7\12\1\0\1\12\3\0\4\12\3\0\1\12"+
    "\20\0\1\12\15\0\2\12\1\0\3\12\4\0\12\14\2\12\23\0"+
    "\6\12\4\0\2\12\2\0\26\12\1\0\7\12\1\0\2\12\1\0"+
    "\2\12\1\0\2\12\37\0\4\12\1\0\1\12\7\0\12\14\2\0"+
    "\3\12\20\0\11\12\1\0\3\12\1\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\22\0\1\12\17\0\2\12\4\0"+
    "\12\14\25\0\10\12\2\0\2\12\2\0\26\12\1\0\7\12\1\0"+
    "\2\12\1\0\5\12\3\0\1\12\36\0\2\12\1\0\3\12\4\0"+
    "\12\14\1\0\1\12\21\0\1\12\1\0\6\12\3\0\3\12\1\0"+
    "\4\12\3\0\2\12\1\0\1\12\1\0\2\12\3\0\2\12\3\0"+
    "\3\12\3\0\14\12\26\0\1\12\25\0\12\14\25\0\10\12\1\0"+
    "\3\12\1\0\27\12\1\0\12\12\1\0\5\12\3\0\1\12\32\0"+
    "\2\12\6\0\2\12\4\0\12\14\25\0\10\12\1\0\3\12\1\0"+
    "\27\12\1\0\12\12\1\0\5\12\3\0\1\12\40\0\1\12\1\0"+
    "\2\12\4\0\12\14\1\0\2\12\22\0\10\12\1\0\3\12\1\0"+
    "\51\12\2\0\1\12\20\0\1\12\21\0\2\12\4\0\12\14\12\0"+
    "\6\12\5\0\22\12\3\0\30\12\1\0\11\12\1\0\1\12\2\0"+
    "\7\12\72\0\60\12\1\0\2\12\14\0\7\12\11\0\12\14\47\0"+
    "\2\12\1\0\1\12\2\0\2\12\1\0\1\12\2\0\1\12\6\0"+
    "\4\12\1\0\7\12\1\0\3\12\1\0\1\12\1\0\1\12\2\0"+
    "\2\12\1\0\4\12\1\0\2\12\11\0\1\12\2\0\5\12\1\0"+
    "\1\12\11\0\12\14\2\0\4\12\40\0\1\12\37\0\12\14\26\0"+
    "\10\12\1\0\44\12\33\0\5\12\163\0\53\12\24\0\1\12\12\14"+
    "\6\0\6\12\4\0\4\12\3\0\1\12\3\0\2\12\7\0\3\12"+
    "\4\0\15\12\14\0\1\12\1\0\12\14\6\0\46\12\1\0\1\12"+
    "\5\0\1\12\2\0\53\12\1\0\u014d\12\1\0\4\12\2\0\7\12"+
    "\1\0\1\12\1\0\4\12\2\0\51\12\1\0\4\12\2\0\41\12"+
    "\1\0\4\12\2\0\7\12\1\0\1\12\1\0\4\12\2\0\17\12"+
    "\1\0\71\12\1\0\4\12\2\0\103\12\45\0\20\12\20\0\125\12"+
    "\14\0\u026c\12\2\0\21\12\1\0\32\12\5\0\113\12\25\0\15\12"+
    "\1\0\4\12\16\0\22\12\16\0\22\12\16\0\15\12\1\0\3\12"+
    "\17\0\64\12\43\0\1\12\4\0\1\12\3\0\12\14\46\0\12\14"+
    "\6\0\130\12\10\0\51\12\1\0\1\12\5\0\106\12\12\0\35\12"+
    "\51\0\12\14\36\12\2\0\5\12\13\0\54\12\25\0\7\12\10\0"+
    "\12\14\46\0\27\12\11\0\65\12\53\0\12\14\6\0\12\14\15\0"+
    "\1\12\135\0\57\12\21\0\7\12\4\0\12\14\51\0\36\12\15\0"+
    "\2\12\12\14\54\12\32\0\44\12\34\0\12\14\3\0\3\12\12\14"+
    "\44\12\153\0\4\12\1\0\4\12\3\0\2\12\11\0\300\12\100\0"+
    "\u0116\12\2\0\6\12\2\0\46\12\2\0\6\12\2\0\10\12\1\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\0\37\12\2\0\65\12\1\0"+
    "\7\12\1\0\1\12\3\0\3\12\1\0\7\12\3\0\4\12\2\0"+
    "\6\12\4\0\15\12\5\0\3\12\1\0\7\12\164\0\1\12\15\0"+
    "\1\12\20\0\15\12\145\0\1\12\4\0\1\12\2\0\12\12\1\0"+
    "\1\12\3\0\5\12\6\0\1\12\1\0\1\12\1\0\1\12\1\0"+
    "\4\12\1\0\13\12\2\0\4\12\5\0\5\12\4\0\1\12\64\0"+
    "\2\12\u0a7b\0\57\12\1\0\57\12\1\0\205\12\6\0\4\12\3\0"+
    "\2\12\14\0\46\12\1\0\1\12\5\0\1\12\2\0\70\12\7\0"+
    "\1\12\20\0\27\12\11\0\7\12\1\0\7\12\1\0\7\12\1\0"+
    "\7\12\1\0\7\12\1\0\7\12\1\0\7\12\1\0\7\12\120\0"+
    "\1\12\u01d5\0\2\12\52\0\5\12\5\0\2\12\4\0\126\12\6\0"+
    "\3\12\1\0\132\12\1\0\4\12\5\0\51\12\3\0\136\12\21\0"+
    "\33\12\65\0\20\12\u0200\0\u19b6\12\112\0\u51cd\12\63\0\u048d\12\103\0"+
    "\56\12\2\0\u010d\12\3\0\20\12\12\14\2\12\24\0\57\12\20\0"+
    "\31\12\10\0\106\12\61\0\11\12\2\0\147\12\2\0\4\12\1\0"+
    "\4\12\14\0\13\12\115\0\12\12\1\0\3\12\1\0\4\12\1\0"+
    "\27\12\35\0\64\12\16\0\62\12\34\0\12\14\30\0\6\12\3\0"+
    "\1\12\4\0\12\14\34\12\12\0\27\12\31\0\35\12\7\0\57\12"+
    "\34\0\1\12\12\14\46\0\51\12\27\0\3\12\1\0\10\12\4\0"+
    "\12\14\6\0\27\12\3\0\1\12\5\0\60\12\1\0\1\12\3\0"+
    "\2\12\2\0\5\12\2\0\1\12\1\0\1\12\30\0\3\12\2\0"+
    "\13\12\7\0\3\12\14\0\6\12\2\0\6\12\2\0\6\12\11\0"+
    "\7\12\1\0\7\12\221\0\43\12\15\0\12\14\6\0\u2ba4\12\14\0"+
    "\27\12\4\0\61\12\u2104\0\u016e\12\2\0\152\12\46\0\7\12\14\0"+
    "\5\12\5\0\1\12\1\0\12\12\1\0\15\12\1\0\5\12\1\0"+
    "\1\12\1\0\2\12\1\0\2\12\1\0\154\12\41\0\u016b\12\22\0"+
    "\100\12\2\0\66\12\50\0\14\12\164\0\5\12\1\0\207\12\23\0"+
    "\12\14\7\0\32\12\6\0\32\12\13\0\131\12\3\0\6\12\2\0"+
    "\6\12\2\0\6\12\2\0\3\12\43\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\22\0\2\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\4\5\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\17\5\1\17\1\20\1\21\1\5\1\22\1\23"+
    "\1\5\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\2\1\43\1\44\2\2\1\45\1\2\1\46\2\2"+
    "\1\47\1\2\1\50\1\2\2\50\2\51\3\52\1\53"+
    "\1\2\1\54\1\2\2\54\3\55\1\56\1\2\1\57"+
    "\1\60\1\57\1\61\1\62\1\63\1\4\1\6\1\63"+
    "\1\64\1\65\1\66\1\67\1\16\1\17\1\20\1\21"+
    "\1\22\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\70\1\71\1\72\1\73\2\2\3\74"+
    "\2\73\1\75\1\1\1\0\1\76\1\77\1\1\1\100"+
    "\2\0\1\101\6\5\1\102\1\103\2\0\3\5\1\104"+
    "\2\5\2\0\1\105\3\0\1\106\1\0\1\107\1\110"+
    "\1\111\7\5\1\112\12\5\1\113\12\5\1\114\1\115"+
    "\1\116\1\117\1\120\1\121\1\5\12\0\1\5\1\122"+
    "\1\123\1\122\1\124\1\0\1\125\1\126\1\127\1\130"+
    "\1\131\1\132\1\133\1\134\1\135\1\136\1\137\1\140"+
    "\1\141\4\0\2\105\2\142\1\143\1\144\1\142\3\0"+
    "\1\105\3\145\3\0\1\146\1\0\2\147\1\0\1\53"+
    "\3\0\1\150\1\0\1\54\2\151\1\0\1\56\1\0"+
    "\1\152\1\153\2\0\1\154\2\0\1\155\1\156\1\157"+
    "\2\0\1\100\1\0\1\160\7\5\2\100\1\161\1\5"+
    "\1\162\2\5\1\0\1\163\6\5\1\164\3\5\1\165"+
    "\2\5\1\166\1\5\1\167\1\170\23\5\1\171\1\172"+
    "\12\0\10\5\1\173\1\174\1\175\2\0\1\176\1\0"+
    "\1\177\1\0\2\132\2\140\1\0\1\200\1\44\1\200"+
    "\1\46\1\200\1\201\1\0\1\202\1\0\1\146\1\150"+
    "\2\153\1\203\2\0\6\5\1\204\1\205\1\5\1\206"+
    "\23\5\1\207\12\5\1\210\1\5\1\211\5\5\12\0"+
    "\11\5\5\0\1\212\3\0\1\44\1\46\1\201\2\0"+
    "\1\5\1\213\5\5\1\214\1\5\1\215\1\216\4\5"+
    "\1\217\1\5\1\220\1\221\3\5\1\222\2\5\1\223"+
    "\1\5\1\224\2\5\1\225\1\226\1\227\4\5\1\230"+
    "\1\231\2\5\1\232\2\5\5\0\1\233\6\0\11\5"+
    "\2\234\5\0\3\235\2\236\1\0\2\5\1\237\2\5"+
    "\1\240\7\5\1\241\7\5\1\242\1\243\1\244\1\5"+
    "\1\0\1\245\1\246\2\5\4\0\1\247\5\0\1\250"+
    "\11\5\6\0\1\251\6\5\1\252\3\5\1\253\1\254"+
    "\1\255\1\5\1\256\3\5\1\257\1\0\1\260\1\5"+
    "\1\261\3\0\1\262\1\0\1\5\1\263\7\5\2\264"+
    "\4\0\3\5\1\265\1\266\5\5\1\267\1\5\1\270"+
    "\1\271\1\5\1\0\1\5\1\272\1\273\1\5\1\274"+
    "\3\5\1\275\2\5\5\0\2\5\1\276\1\277\1\5"+
    "\1\300\2\5\1\301\1\5\1\0\1\302\1\303\2\5"+
    "\1\304\2\5\5\0\1\305\1\306\1\5\1\307\1\310"+
    "\1\5\1\311\2\5\1\312\1\5\10\0\5\5\7\0"+
    "\1\313\1\314\1\315\2\5\1\0\1\316\2\0\1\317"+
    "\1\5\5\0\1\5\1\320\3\0\1\5\7\0\1\321"+
    "\7\0\1\77\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[786];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u0550\0\u07f8"+
    "\0\u083c\0\u0880\0\u0550\0\u0550\0\u0550\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0ae4\0\u0b28\0\u0b6c"+
    "\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c"+
    "\0\u0dd0\0\u0e14\0\u0550\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68"+
    "\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u0550\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u1100\0\u0550\0\u1144\0\u1188\0\u11cc"+
    "\0\u0550\0\u1210\0\u1254\0\u1298\0\u12dc\0\u0550\0\u1320\0\u1364"+
    "\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u0550\0\u14fc\0\u1540"+
    "\0\u1584\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u0550\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u0550\0\u182c\0\u1870\0\u0550\0\u18b4"+
    "\0\u18f8\0\u0550\0\u0550\0\u193c\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u0550\0\u1ad4\0\u0550"+
    "\0\u1b18\0\u0550\0\u0484\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c"+
    "\0\u1cb0\0\u1cf4\0\u0550\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48"+
    "\0\u1e8c\0\u0550\0\u0550\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0"+
    "\0\u07b4\0\u2024\0\u2068\0\u20ac\0\u1100\0\u20f0\0\u0880\0\u2134"+
    "\0\u2178\0\u0550\0\u21bc\0\u2200\0\u0550\0\u07b4\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u07b4\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684"+
    "\0\u07b4\0\u26c8\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860"+
    "\0\u28a4\0\u28e8\0\u292c\0\u0550\0\u0550\0\u0550\0\u0550\0\u2970"+
    "\0\u0550\0\u29b4\0\u29f8\0\u2a3c\0\u0e14\0\u2a80\0\u2ac4\0\u2b08"+
    "\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u0550"+
    "\0\u2d28\0\u2d6c\0\u0550\0\u2db0\0\u0550\0\u2df4\0\u0550\0\u2e38"+
    "\0\u0550\0\u0550\0\u0550\0\u0550\0\u0550\0\u2e7c\0\u0550\0\u2ec0"+
    "\0\u1188\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u2f04\0\u0550\0\u0550"+
    "\0\u0550\0\u2f48\0\u1298\0\u3014\0\u3058\0\u309c\0\u3014\0\u0550"+
    "\0\u3058\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u14fc\0\u0550"+
    "\0\u1540\0\u0550\0\u15c8\0\u1650\0\u160c\0\u3234\0\u3278\0\u32bc"+
    "\0\u171c\0\u0550\0\u1760\0\u0550\0\u17e8\0\u0550\0\u3300\0\u3344"+
    "\0\u3388\0\u0550\0\u1a08\0\u33cc\0\u0550\0\u0550\0\u0550\0\u3410"+
    "\0\u3454\0\u3498\0\u3498\0\u0550\0\u34dc\0\u3520\0\u3564\0\u35a8"+
    "\0\u35ec\0\u3630\0\u3674\0\u1ed0\0\u1f14\0\u07b4\0\u36b8\0\u07b4"+
    "\0\u36fc\0\u3740\0\u3784\0\u0550\0\u37c8\0\u380c\0\u3850\0\u3894"+
    "\0\u38d8\0\u391c\0\u07b4\0\u3960\0\u39a4\0\u39e8\0\u07b4\0\u3a2c"+
    "\0\u3a70\0\u3ab4\0\u3af8\0\u07b4\0\u07b4\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004"+
    "\0\u0550\0\u07b4\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c"+
    "\0\u41e0\0\u4224\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc"+
    "\0\u4400\0\u4444\0\u4488\0\u44cc\0\u0550\0\u0550\0\u0550\0\u4510"+
    "\0\u4554\0\u0550\0\u4598\0\u45dc\0\u4620\0\u0550\0\u4664\0\u0550"+
    "\0\u46a8\0\u46ec\0\u0550\0\u4730\0\u1144\0\u4774\0\u1254\0\u47b8"+
    "\0\u47fc\0\u0550\0\u4840\0\u0550\0\u0550\0\u3344\0\u3388\0\u0550"+
    "\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\u4a1c\0\u4a60"+
    "\0\u07b4\0\u4aa4\0\u4ae8\0\u07b4\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8"+
    "\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18"+
    "\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u07b4"+
    "\0\u5038\0\u507c\0\u50c0\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214"+
    "\0\u5258\0\u529c\0\u07b4\0\u52e0\0\u07b4\0\u5324\0\u5368\0\u53ac"+
    "\0\u53f0\0\u5434\0\u5478\0\u54bc\0\u5500\0\u5544\0\u5588\0\u55cc"+
    "\0\u5610\0\u5654\0\u5698\0\u56dc\0\u5720\0\u5764\0\u57a8\0\u57ec"+
    "\0\u5830\0\u5874\0\u58b8\0\u58fc\0\u5940\0\u5984\0\u59c8\0\u5a0c"+
    "\0\u5a50\0\u5a94\0\u0550\0\u5ad8\0\u5b1c\0\u5b60\0\u5ba4\0\u5be8"+
    "\0\u0550\0\u5c2c\0\u5c70\0\u5cb4\0\u07b4\0\u5cf8\0\u5d3c\0\u5d80"+
    "\0\u5dc4\0\u5e08\0\u07b4\0\u5e4c\0\u07b4\0\u07b4\0\u5e90\0\u5ed4"+
    "\0\u5f18\0\u5f5c\0\u07b4\0\u5fa0\0\u07b4\0\u07b4\0\u5fe4\0\u6028"+
    "\0\u606c\0\u60b0\0\u60f4\0\u6138\0\u07b4\0\u617c\0\u07b4\0\u61c0"+
    "\0\u6204\0\u07b4\0\u07b4\0\u07b4\0\u6248\0\u628c\0\u62d0\0\u6314"+
    "\0\u6358\0\u07b4\0\u639c\0\u63e0\0\u07b4\0\u6424\0\u6468\0\u64ac"+
    "\0\u64f0\0\u6534\0\u6578\0\u65bc\0\u0550\0\u6600\0\u6644\0\u6688"+
    "\0\u66cc\0\u6710\0\u6754\0\u6798\0\u67dc\0\u6820\0\u6864\0\u68a8"+
    "\0\u68ec\0\u6930\0\u6974\0\u69b8\0\u0550\0\u69fc\0\u6a40\0\u6a84"+
    "\0\u6ac8\0\u6b0c\0\u6b50\0\u0550\0\u1144\0\u1254\0\u0550\0\u6b94"+
    "\0\u6bd8\0\u6c1c\0\u6c60\0\u6ca4\0\u6ce8\0\u6d2c\0\u07b4\0\u6d70"+
    "\0\u6db4\0\u6df8\0\u6e3c\0\u6e80\0\u6ec4\0\u6f08\0\u07b4\0\u6f4c"+
    "\0\u6f90\0\u6fd4\0\u7018\0\u705c\0\u70a0\0\u70e4\0\u07b4\0\u07b4"+
    "\0\u07b4\0\u7128\0\u716c\0\u07b4\0\u07b4\0\u71b0\0\u71f4\0\u7238"+
    "\0\u727c\0\u72c0\0\u7304\0\u0550\0\u7348\0\u738c\0\u73d0\0\u7414"+
    "\0\u7458\0\u0550\0\u749c\0\u74e0\0\u7524\0\u7568\0\u75ac\0\u75f0"+
    "\0\u7634\0\u7678\0\u76bc\0\u7700\0\u7744\0\u7788\0\u77cc\0\u7810"+
    "\0\u7854\0\u07b4\0\u7898\0\u78dc\0\u7920\0\u7964\0\u79a8\0\u79ec"+
    "\0\u7a30\0\u7a74\0\u7ab8\0\u7afc\0\u07b4\0\u07b4\0\u07b4\0\u7b40"+
    "\0\u07b4\0\u7b84\0\u7bc8\0\u7c0c\0\u7c50\0\u7c94\0\u07b4\0\u7cd8"+
    "\0\u0550\0\u7d1c\0\u7d60\0\u7da4\0\u0550\0\u7de8\0\u7e2c\0\u07b4"+
    "\0\u7e70\0\u7eb4\0\u7ef8\0\u7f3c\0\u7f80\0\u7fc4\0\u8008\0\u0550"+
    "\0\u804c\0\u8090\0\u80d4\0\u8118\0\u815c\0\u81a0\0\u81e4\0\u8228"+
    "\0\u07b4\0\u07b4\0\u826c\0\u82b0\0\u82f4\0\u8338\0\u837c\0\u07b4"+
    "\0\u83c0\0\u07b4\0\u07b4\0\u8404\0\u8448\0\u848c\0\u0550\0\u0550"+
    "\0\u84d0\0\u07b4\0\u8514\0\u8558\0\u859c\0\u07b4\0\u85e0\0\u8624"+
    "\0\u8668\0\u86ac\0\u86f0\0\u8734\0\u8778\0\u87bc\0\u8800\0\u07b4"+
    "\0\u07b4\0\u8844\0\u07b4\0\u8888\0\u88cc\0\u07b4\0\u8910\0\u8954"+
    "\0\u07b4\0\u07b4\0\u8998\0\u89dc\0\u07b4\0\u8a20\0\u8a64\0\u8aa8"+
    "\0\u8aec\0\u8b30\0\u8b74\0\u8bb8\0\u07b4\0\u07b4\0\u8bfc\0\u07b4"+
    "\0\u07b4\0\u8c40\0\u0550\0\u8c84\0\u8cc8\0\u07b4\0\u8d0c\0\u8d50"+
    "\0\u8d94\0\u8dd8\0\u8e1c\0\u8e60\0\u8ea4\0\u8ee8\0\u8f2c\0\u8f70"+
    "\0\u8fb4\0\u8ff8\0\u903c\0\u9080\0\u90c4\0\u9108\0\u914c\0\u9190"+
    "\0\u91d4\0\u9218\0\u925c\0\u07b4\0\u07b4\0\u07b4\0\u92a0\0\u92e4"+
    "\0\u9328\0\u0550\0\u936c\0\u93b0\0\u07b4\0\u93f4\0\u9438\0\u947c"+
    "\0\u94c0\0\u9504\0\u9548\0\u958c\0\u9438\0\u95d0\0\u9614\0\u9658"+
    "\0\u969c\0\u96e0\0\u9724\0\u9768\0\u97ac\0\u97f0\0\u9834\0\u9878"+
    "\0\u0550\0\u98bc\0\u9900\0\u9944\0\u9988\0\u99cc\0\u9a10\0\u9a54"+
    "\0\u0550\0\u9a98";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[786];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\63\23\1\24\20\23\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\26\2\36\1\25\1\37"+
    "\3\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\2\36\1\63\1\36\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\36\1\74"+
    "\1\36\1\75\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\57\1\114\1\115\15\116\1\117\3\116\1\120\1\121"+
    "\1\116\1\122\57\116\15\123\1\124\3\123\1\125\1\123"+
    "\1\126\1\127\57\123\15\130\1\131\1\132\1\130\1\133"+
    "\1\134\2\130\1\135\57\130\3\136\1\137\2\136\3\137"+
    "\1\136\2\137\3\136\1\140\7\136\22\137\3\136\1\137"+
    "\2\136\3\137\17\136\1\137\2\136\3\25\1\141\2\25"+
    "\3\141\1\25\2\141\3\25\1\142\7\25\22\141\3\25"+
    "\1\141\2\25\3\141\17\25\1\141\2\25\3\143\1\144"+
    "\2\143\3\144\2\143\1\144\2\143\1\145\1\143\1\146"+
    "\6\143\22\144\3\143\1\144\2\143\3\144\17\143\1\144"+
    "\2\143\3\147\1\150\2\147\3\150\1\147\2\150\3\147"+
    "\1\151\7\147\22\150\3\147\1\150\2\147\3\150\17\147"+
    "\1\150\2\147\3\25\1\152\2\25\3\152\1\25\2\152"+
    "\3\25\1\153\7\25\22\152\3\25\1\152\2\25\3\152"+
    "\17\25\1\152\2\25\3\154\1\155\2\154\3\155\1\154"+
    "\2\155\2\154\3\40\6\154\22\155\1\156\2\154\1\155"+
    "\2\154\3\155\17\154\1\155\2\154\3\157\1\160\2\157"+
    "\3\160\1\157\2\160\13\157\22\160\3\157\1\160\2\157"+
    "\3\160\17\157\1\160\2\157\1\25\1\161\1\162\1\36"+
    "\1\163\1\164\3\36\1\161\2\36\1\25\4\165\1\41"+
    "\1\166\1\167\1\170\1\45\1\171\22\36\1\172\1\173"+
    "\1\174\1\36\1\175\1\73\3\36\1\176\1\177\1\200"+
    "\1\201\1\202\1\203\1\204\1\205\1\206\1\106\1\107"+
    "\1\207\1\111\1\112\1\210\1\36\2\165\64\211\1\212"+
    "\17\211\64\213\1\214\17\213\16\215\1\216\1\215\1\217"+
    "\31\215\1\220\13\215\1\221\3\215\1\221\11\215\26\0"+
    "\1\222\55\0\104\223\63\23\1\224\103\23\1\0\2\23"+
    "\1\225\3\23\1\226\6\23\1\227\2\23\105\0\1\26"+
    "\1\230\1\231\1\0\1\26\3\0\1\26\73\0\1\230"+
    "\1\232\2\0\1\230\3\0\1\230\14\0\1\233\56\0"+
    "\1\36\1\0\1\36\1\0\1\36\1\234\6\36\12\0"+
    "\5\36\1\235\1\236\4\36\1\237\1\240\5\36\3\0"+
    "\1\241\2\0\3\36\17\0\1\36\6\0\1\242\21\0"+
    "\1\243\56\0\1\26\1\230\1\231\1\0\1\26\1\244"+
    "\1\0\1\245\1\26\73\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\7\36\1\246\12\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\3\36\1\247\4\36\12\0\5\36\1\250\2\36\1\251"+
    "\1\252\10\36\3\0\1\36\2\0\3\36\17\0\1\251"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\5\0\1\42"+
    "\4\0\11\36\1\253\10\36\3\0\1\36\2\0\3\36"+
    "\1\0\1\254\15\0\1\36\1\255\2\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\22\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\20\0\3\40\66\0\1\256\2\0"+
    "\3\256\1\0\2\256\13\0\22\256\3\0\1\256\2\0"+
    "\3\256\17\0\1\256\2\0\15\257\1\260\3\257\1\261"+
    "\1\262\1\257\1\263\57\257\26\0\1\264\23\0\1\265"+
    "\32\0\1\36\1\0\1\36\1\0\10\36\12\0\3\36"+
    "\1\266\1\36\1\267\2\36\1\270\3\36\1\271\5\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\270\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\11\36\1\272\3\36"+
    "\1\273\4\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\274\1\0\10\36\12\0\1\275"+
    "\6\36\1\276\12\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\277\3\36\1\300\2\36\1\301\12\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\5\36\1\302\2\36\1\303\11\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\303\3\0\1\36"+
    "\1\0\1\304\1\0\2\36\1\305\5\36\12\0\22\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\2\36\1\306\5\36\12\0\7\36"+
    "\1\307\3\36\1\310\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\11\36\1\311\10\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\312\14\36\1\313\3\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\314"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\315\21\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\316\21\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\15\36"+
    "\1\317\4\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\7\36"+
    "\1\320\3\36\1\321\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\4\36\1\322\4\36\1\323\10\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\30\0\1\324\22\0\1\325"+
    "\1\326\57\0\1\327\23\0\1\330\104\0\1\331\31\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\332\5\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\11\0"+
    "\1\333\1\334\6\0\1\335\7\0\1\336\1\0\1\337"+
    "\1\340\1\341\2\0\1\342\1\343\1\344\40\0\1\343"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\22\36"+
    "\3\0\1\36\2\0\1\36\1\345\1\36\17\0\1\36"+
    "\30\0\1\346\103\0\1\347\23\0\1\350\10\0\1\351"+
    "\1\0\1\352\44\0\1\353\35\0\1\354\45\0\1\355"+
    "\35\0\1\356\1\115\44\0\1\357\23\0\1\360\57\0"+
    "\1\361\40\0\1\362\42\0\1\363\41\0\1\364\41\0"+
    "\1\365\127\0\1\366\17\0\1\367\11\0\15\255\1\370"+
    "\64\255\1\262\1\255\15\116\1\371\3\116\1\372\1\0"+
    "\1\116\1\373\166\116\1\374\2\116\3\374\1\116\1\375"+
    "\1\374\1\116\1\371\3\116\1\376\1\377\1\116\1\u0100"+
    "\2\116\22\374\3\116\1\374\2\116\3\374\17\116\1\374"+
    "\17\116\1\371\3\116\1\u0101\1\377\1\116\1\u0102\57\116"+
    "\15\123\1\u0103\3\123\1\u0104\1\123\1\0\1\u0105\166\123"+
    "\1\374\2\123\3\374\1\123\1\u0106\1\374\1\123\1\u0103"+
    "\3\123\1\u0107\1\123\1\u0108\1\u0100\2\123\22\374\3\123"+
    "\1\374\2\123\3\374\17\123\1\374\17\123\1\u0103\3\123"+
    "\1\u0101\1\123\1\u0108\1\u0109\57\123\15\130\1\u010a\1\0"+
    "\1\130\1\0\1\u010b\2\130\1\u010c\166\130\1\u010d\2\130"+
    "\3\u010d\1\130\2\u010d\1\130\1\u010a\1\0\1\132\1\0"+
    "\1\u010b\2\130\1\u010c\2\130\22\u010d\3\130\1\u010d\2\130"+
    "\3\u010d\17\130\1\u010d\5\130\1\u010d\2\130\3\u010d\1\130"+
    "\2\u010d\1\130\1\u010a\1\u010e\1\132\1\0\1\u010b\2\130"+
    "\1\u010c\2\130\22\u010d\3\130\1\u010d\2\130\3\u010d\17\130"+
    "\1\u010d\2\130\3\0\1\374\2\0\3\374\1\0\2\374"+
    "\10\0\1\u0100\2\0\22\374\3\0\1\374\2\0\3\374"+
    "\17\0\1\374\23\0\1\u0101\62\0\16\u010f\1\u0110\1\u010f"+
    "\1\u0110\63\u010f\3\0\1\u010f\2\0\3\u010f\1\0\2\u010f"+
    "\3\0\1\u0111\7\0\22\u010f\3\0\1\u010f\2\0\3\u010f"+
    "\17\0\1\u010f\3\0\1\141\1\0\1\141\1\0\10\141"+
    "\10\0\1\u0112\1\0\22\141\3\0\1\141\2\0\3\141"+
    "\17\0\1\141\5\0\1\141\2\0\3\141\1\0\2\141"+
    "\3\0\1\u0113\7\0\22\141\3\0\1\141\2\0\3\141"+
    "\17\0\1\141\2\0\16\143\1\0\1\143\1\0\64\143"+
    "\1\u0114\1\143\1\u0114\1\143\5\u0114\1\143\1\u0114\2\143"+
    "\1\0\1\143\1\0\4\143\1\u0115\1\143\22\u0114\3\143"+
    "\1\u0114\2\143\3\u0114\17\143\1\u0114\5\143\1\u0116\2\143"+
    "\3\u0116\1\143\2\u0116\2\143\1\u0117\1\u0118\1\u0117\6\143"+
    "\22\u0116\3\143\1\u0116\2\143\3\u0116\17\143\1\u0116\5\143"+
    "\1\u0116\2\143\3\u0116\1\143\2\u0116\2\143\1\145\1\u0118"+
    "\1\u0117\6\143\22\u0116\3\143\1\u0116\2\143\3\u0116\17\143"+
    "\1\u0116\2\143\16\u0119\1\u011a\1\u0119\1\u011a\63\u0119\3\0"+
    "\1\u0119\2\0\3\u0119\1\0\2\u0119\3\0\1\u011b\7\0"+
    "\22\u0119\3\0\1\u0119\2\0\3\u0119\17\0\1\u0119\3\0"+
    "\1\152\1\0\1\152\1\0\10\152\10\0\1\u011c\1\0"+
    "\22\152\3\0\1\152\2\0\3\152\17\0\1\152\5\0"+
    "\1\152\2\0\3\152\1\0\2\152\3\0\1\u011d\7\0"+
    "\22\152\3\0\1\152\2\0\3\152\17\0\1\152\3\0"+
    "\1\155\1\0\1\155\1\0\10\155\12\0\22\155\3\0"+
    "\1\155\2\0\3\155\17\0\1\155\54\0\1\u011e\32\0"+
    "\1\160\1\0\1\160\1\0\10\160\12\0\22\160\3\0"+
    "\1\160\2\0\3\160\17\0\1\160\3\0\1\161\3\0"+
    "\1\161\3\0\1\161\73\0\1\u011f\3\0\1\u011f\1\u0120"+
    "\1\0\1\u0121\1\u011f\72\0\64\211\1\0\17\211\65\0"+
    "\1\u0122\16\0\64\u0123\1\u0124\103\u0123\1\u0124\1\u0125\16\u0123"+
    "\16\215\1\216\1\215\1\217\31\215\1\216\13\215\1\216"+
    "\3\215\1\216\11\215\16\0\1\216\137\0\1\u0126\31\0"+
    "\63\23\1\0\2\23\1\0\3\23\1\0\6\23\1\0"+
    "\2\23\26\0\1\u0127\103\0\1\u0127\21\0\1\u0128\70\0"+
    "\1\u0129\47\0\1\230\1\0\1\231\1\0\1\230\3\0"+
    "\1\230\73\0\1\u012a\2\0\1\u012b\1\u012a\3\0\1\u012a"+
    "\37\0\1\u012b\34\0\1\u012c\102\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\1\u012d\1\u012e\20\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\2\36\1\u012f\17\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\15\36\1\u0130\4\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\10\36\1\u0131\11\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\u0131\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\21\36\1\u0132\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\2\36\1\u0133\5\36\12\0\22\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\u0134\1\0\1\u0134\1\0"+
    "\1\u0134\1\0\3\u0134\17\0\2\u0134\2\0\1\u0134\53\0"+
    "\1\u0135\3\0\1\u0135\73\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\11\36\1\u0136\10\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\10\36\1\u0137\11\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\u0137\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\2\36\1\u0138\17\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\11\36\1\u0139\10\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\u013a\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\65\0\1\u013b\21\0\1\256\1\0\1\256\1\0"+
    "\10\256\12\0\22\256\3\0\1\256\2\0\3\256\17\0"+
    "\1\256\2\0\107\257\1\0\2\257\3\0\2\257\1\0"+
    "\1\257\1\260\3\257\1\261\1\262\1\257\1\0\2\257"+
    "\22\0\3\257\1\0\2\257\3\0\17\257\1\0\17\257"+
    "\1\260\3\257\1\0\1\262\1\257\1\263\57\257\26\0"+
    "\1\u013c\56\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\36\1\u013d\4\36\1\u013e\1\36\1\u013f\11\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\u013f\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\10\36\1\u0140\11\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\u0140\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\21\36\1\u0141\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\u0142\5\36\12\0\12\36\1\u0143\7\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\11\36\1\u0144\10\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\3\36\1\u0145\2\36"+
    "\1\u0146\13\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\u0147\1\0\10\36\12\0\22\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\5\36\1\u0148\14\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\5\36\1\u0149\14\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\11\36\1\u014a\10\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\10\36\1\u014b\11\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\u014b\3\0\1\36"+
    "\1\0\1\u014c\1\0\10\36\12\0\22\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\16\36\1\u014d\3\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\14\36\1\u014e\5\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\1\36\1\u014f\6\36\1\u0150\2\36"+
    "\1\u0151\6\36\3\0\1\36\2\0\3\36\17\0\1\u0150"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\5\36"+
    "\1\u0152\14\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\2\36\1\u0153\5\36"+
    "\12\0\7\36\1\u0154\12\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\u0155\5\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\u0156\21\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\36\1\u0157\20\36\3\0\1\36\2\0\2\36\1\u0158"+
    "\17\0\1\36\3\0\1\36\1\0\1\u0159\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\10\36"+
    "\1\u015a\11\36\3\0\1\36\2\0\3\36\17\0\1\u015a"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\1\u015b"+
    "\21\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u015c"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\7\36\1\u015d"+
    "\12\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\3\36\1\u015e\4\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\u015f\6\36"+
    "\1\u0160\12\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\30\0\1\u0161\56\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\11\36\1\u0162\10\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\42\0\1\u0163\72\0\1\u0164\6\0\1\u0165"+
    "\101\0\1\u0166\105\0\1\u0167\107\0\1\u0168\75\0\1\u0169"+
    "\57\0\1\u016a\123\0\1\u016b\56\0\1\u016c\101\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\1\36\1\u016d\1\u016e"+
    "\1\u016f\1\36\1\u0170\1\u0171\4\36\1\u0172\1\u0173\1\u0174"+
    "\4\36\3\0\1\36\2\0\3\36\17\0\1\36\30\0"+
    "\1\u0175\127\0\1\u0176\57\0\1\u0177\34\0\1\u0178\57\0"+
    "\1\u0179\41\0\1\u0179\30\0\1\u017a\73\0\3\u017b\43\0"+
    "\1\u017c\12\0\1\u017d\22\0\1\u017e\1\0\1\u017f\101\0"+
    "\1\u0180\1\0\1\u0181\63\0\104\255\3\116\1\0\2\116"+
    "\3\0\2\116\1\0\1\116\1\371\3\116\1\376\1\377"+
    "\1\116\1\0\2\116\22\0\3\116\1\0\2\116\3\0"+
    "\17\116\1\0\17\116\1\371\3\116\1\0\1\377\1\116"+
    "\1\u0102\57\116\1\0\1\374\1\0\1\374\1\0\10\374"+
    "\12\0\22\374\1\u0182\2\0\1\374\2\0\3\374\12\0"+
    "\1\u0183\4\0\1\374\2\0\1\116\1\375\1\116\1\375"+
    "\1\116\10\375\1\371\3\116\1\372\1\0\1\116\1\373"+
    "\2\116\22\375\1\u0184\2\116\1\375\2\116\3\375\12\116"+
    "\1\u0185\4\116\1\375\2\116\3\123\1\0\2\123\3\0"+
    "\2\123\1\0\1\123\1\u0103\3\123\1\u0107\1\123\1\u0108"+
    "\1\0\2\123\22\0\3\123\1\0\2\123\3\0\17\123"+
    "\1\0\17\123\1\u0103\3\123\1\0\1\123\1\u0108\1\u0109"+
    "\60\123\1\u0106\1\123\1\u0106\1\123\10\u0106\1\u0103\3\123"+
    "\1\u0104\1\123\1\0\1\u0105\2\123\22\u0106\1\u0186\2\123"+
    "\1\u0106\2\123\3\u0106\12\123\1\u0187\4\123\1\u0106\2\123"+
    "\16\130\1\0\1\130\1\0\66\130\1\u0188\2\130\3\u0188"+
    "\2\130\1\u0188\1\130\1\u010a\1\0\1\130\1\0\1\u0189"+
    "\2\130\1\u018a\2\130\22\u0188\3\130\1\u0188\2\130\3\u0188"+
    "\17\130\1\u0188\17\130\1\u010a\1\0\1\130\1\0\1\u018a"+
    "\2\130\1\u018b\57\130\16\u010d\1\u018c\1\u010d\1\u018c\63\u010d"+
    "\3\0\1\u010d\2\0\3\u010d\1\0\2\u010d\3\0\1\u010e"+
    "\7\0\22\u010d\3\0\1\u010d\2\0\3\u010d\17\0\1\u010d"+
    "\2\0\16\u0116\1\u018d\1\u0116\1\u018d\63\u0116\3\143\1\u0114"+
    "\2\143\3\u0114\2\143\1\u0114\2\143\1\u0117\1\143\1\u0117"+
    "\6\143\22\u0114\3\143\1\u0114\2\143\3\u0114\17\143\1\u0114"+
    "\5\143\1\u0116\2\143\3\u0116\1\143\2\u0116\2\143\1\0"+
    "\1\u0118\1\0\6\143\22\u0116\3\143\1\u0116\2\143\3\u0116"+
    "\17\143\1\u0116\2\143\1\0\1\u011f\3\0\1\u011f\3\0"+
    "\1\u011f\73\0\1\u018e\1\0\1\u018e\1\0\1\u018e\1\0"+
    "\3\u018e\17\0\2\u018e\2\0\1\u018e\53\0\1\u018f\3\0"+
    "\1\u018f\72\0\64\u0123\1\u0124\1\u0190\16\u0123\44\0\1\u0191"+
    "\77\0\1\u0192\44\0\1\u012a\3\0\1\u012a\3\0\1\u012a"+
    "\73\0\1\36\1\0\1\36\1\0\10\36\12\0\1\36"+
    "\1\u0147\20\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\u0193\1\0\10\36\12\0\22\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\1\u0194\1\36\1\u0195"+
    "\1\u0196\4\36\1\u0197\5\36\1\u0198\3\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\u0197\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\7\36\1\u0199\12\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\u019a"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u019b\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\13\36\1\u019c\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u019d\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\u019e\5\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\2\36"+
    "\1\u019f\5\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\65\0\1\u0178\21\0\1\36\1\0\1\u01a0"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\13\36\1\u01a1\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u01a2\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\u01a3\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\13\36"+
    "\1\u01a4\6\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\1\u01a5"+
    "\21\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\7\36\1\u01a6"+
    "\12\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\u01a7\5\36\12\0"+
    "\1\u01a8\21\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\13\36"+
    "\1\u01a9\6\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\2\36\1\u01aa\5\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\6\36"+
    "\1\u01ab\13\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\u01ac\1\0\10\36\12\0\22\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\u01ad\1\0\10\36\12\0\22\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\u01ae"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\6\36\1\u01af\13\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\u01b0\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\13\36"+
    "\1\u01b1\6\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\1\36"+
    "\1\u01b2\6\36\1\u01b3\11\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\u01b3\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\10\36\1\u01b4\11\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\u01b4\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\5\36\1\u01b5\14\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u01b6\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u01b7\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\4\36\1\u01b8\15\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\4\36\1\u01b9\15\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\13\36\1\u01ba\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u01bb\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\13\36\1\u01bc\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\7\36\1\u01bd\12\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\3\36"+
    "\1\u01be\4\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\13\36\1\u01bf\6\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\5\36\1\u01c0\14\36\3\0\1\u01c1\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\36\1\u01c2\20\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\42\0\1\u01c3\77\0\1\u01c4\105\0\1\u01c5"+
    "\75\0\1\u01c6\106\0\1\u01c7\106\0\1\u01c8\104\0\1\u01c9"+
    "\41\0\1\u01c9\61\0\1\u01ca\64\0\1\u01cb\52\0\1\u01cc"+
    "\75\0\1\36\1\0\1\36\1\0\10\36\12\0\11\36"+
    "\1\u01cd\10\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\1\u01ce"+
    "\21\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\u01cf\3\36"+
    "\1\u01d0\15\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\2\36\1\u01d1\5\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\13\36"+
    "\1\u01d2\6\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\1\u01d3"+
    "\21\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\u01d4\1\0\10\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\2\36\1\u01d5\5\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\5\0\1\u01d6\2\0"+
    "\3\u01d6\1\0\2\u01d6\3\0\1\u0178\2\0\1\u01d7\4\0"+
    "\22\u01d6\3\0\1\u01d6\2\0\3\u01d6\17\0\1\u01d6\1\u01d8"+
    "\36\0\1\u01d9\64\0\3\u017b\56\0\1\u017d\22\0\3\u01da"+
    "\44\0\1\u01db\11\0\1\u01dc\60\0\1\u01dd\45\0\1\u017e"+
    "\103\0\1\u0180\137\0\1\u01de\31\0\15\116\1\371\3\116"+
    "\1\372\1\0\1\116\1\373\25\116\1\u01df\31\116\15\123"+
    "\1\u0103\3\123\1\u0104\1\123\1\0\1\u0105\25\123\1\u01e0"+
    "\31\123\1\0\1\u0188\1\0\1\u0188\1\0\10\u0188\12\0"+
    "\22\u0188\3\0\1\u0188\2\0\3\u0188\12\0\1\u01e1\4\0"+
    "\1\u0188\2\0\3\130\1\0\2\130\3\0\2\130\1\0"+
    "\1\130\1\u010a\1\0\1\130\1\0\1\u0189\2\130\1\0"+
    "\2\130\22\0\3\130\1\0\2\130\3\0\17\130\1\0"+
    "\17\130\1\u010a\1\0\1\130\2\0\2\130\1\u018b\57\130"+
    "\50\0\1\u01e2\62\0\1\u01e3\55\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\5\36\1\u01e4\14\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\3\36\1\u01e5\16\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\u01e6"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\7\36\1\u01e7\12\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\16\36\1\u01e8\3\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\15\36\1\u01e9\4\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\1\u01ea\21\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\12\36\1\u01eb\7\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\11\36\1\u01ec\10\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\12\36\1\u01ed\7\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\17\36\1\u01ee\2\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\11\36\1\u01ef\10\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\4\36\1\u01f0\15\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\u01f1\1\0\2\36\1\u01f2"+
    "\5\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\36\1\u01f3\20\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\u01f4\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u01f5"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\16\36\1\u01f6"+
    "\3\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\4\36\1\u01f7"+
    "\15\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\5\36\1\u01f8"+
    "\14\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\u01f9\5\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\13\36\1\u01fa"+
    "\6\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u01fb"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\u01fc\5\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u01fd"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\10\36\1\u01fe"+
    "\11\36\3\0\1\36\2\0\3\36\17\0\1\u01fe\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\15\36\1\u01ff"+
    "\4\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\u0200\5\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\u0201\21\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\1\36\1\u0202\20\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\10\36\1\u0203\11\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\u0203\3\0\1\36"+
    "\1\0\1\u0204\1\0\10\36\12\0\22\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\1\u0205\21\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\6\36\1\u0206\13\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\11\36\1\u0207\10\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\1\u0208\21\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\2\36\1\u0209\17\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\u020a\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\2\36\1\u020b\5\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\1\u020c"+
    "\21\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u020d"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\u020e\5\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\u020f\1\0\10\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\11\0\1\u0210\103\0"+
    "\1\u0211\136\0\1\u0212\44\0\1\u0213\13\0\1\u0214\36\0"+
    "\1\u0215\35\0\1\u0216\102\0\1\u0217\77\0\1\u0218\103\0"+
    "\1\u0219\127\0\1\u021a\116\0\1\u021b\42\0\1\36\1\0"+
    "\1\36\1\0\2\36\1\u021c\5\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\11\36\1\u021d\10\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\13\36\1\u021e\6\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\5\36\1\u021f\14\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\14\36\1\u0220\5\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\2\36\1\u0221\5\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\5\36\1\u0222\14\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\1\36\1\u0223\20\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\13\36\1\u0224\6\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\u01d6\1\0"+
    "\1\u01d6\1\0\10\u01d6\1\0\1\u0225\1\0\1\u0226\6\0"+
    "\22\u01d6\3\0\1\u01d6\2\0\3\u01d6\17\0\1\u01d6\5\0"+
    "\1\u0227\2\0\3\u0227\1\0\2\u0227\13\0\22\u0227\3\0"+
    "\1\u0227\2\0\3\u0227\17\0\1\u0227\5\0\1\u0228\2\0"+
    "\3\u0228\1\0\2\u0228\13\0\22\u0228\3\0\1\u0228\2\0"+
    "\3\u0228\17\0\1\u0228\42\0\1\u0229\61\0\3\u01da\56\0"+
    "\1\u01dc\60\0\1\u022a\36\0\1\u022b\77\0\1\u022c\2\0"+
    "\3\u022c\2\0\1\u022c\13\0\22\u022c\3\0\1\u022c\2\0"+
    "\3\u022c\17\0\1\u022c\2\0\3\116\1\u022d\2\116\3\u022d"+
    "\2\116\1\u022d\1\116\1\371\3\116\1\372\1\0\1\116"+
    "\1\373\2\116\22\u022d\3\116\1\u022d\2\116\3\u022d\17\116"+
    "\1\u022d\2\116\3\123\1\u022e\2\123\3\u022e\2\123\1\u022e"+
    "\1\123\1\u0103\3\123\1\u0104\1\123\1\0\1\u0105\2\123"+
    "\22\u022e\3\123\1\u022e\2\123\3\u022e\17\123\1\u022e\2\123"+
    "\16\0\2\u022f\1\u0230\133\0\1\u0231\34\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\2\36\1\u0232\17\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\6\36\1\u0233\13\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\11\36\1\u0234\10\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\1\u0235\21\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\1\u0236\21\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\3\36\1\u0237\16\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\2\36\1\u0238\5\36\12\0\22\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\3\36\1\u0239\16\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\2\36\1\u023a\17\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\2\36\1\u023b\5\36\12\0\22\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\5\36\1\u023c\14\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\14\36\1\u023d\5\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\13\36\1\u023e\6\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\u023f\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\11\36\1\u0240\10\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\13\36\1\u0241\6\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\u0242\21\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\6\36"+
    "\1\u0243\13\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\21\36"+
    "\1\u0244\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\3\36\1\u0245\4\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\5\36\1\u0246"+
    "\14\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\6\36\1\u0247"+
    "\13\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\15\36\1\u0248"+
    "\4\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\5\36\1\u0249"+
    "\14\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\11\36\1\u024a"+
    "\10\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\1\0\3\u024b\6\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\13\36\1\u024c"+
    "\6\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\6\36\1\u024d"+
    "\13\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u024e"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\6\36\1\u024f"+
    "\13\36\3\0\1\36\2\0\3\36\17\0\1\36\43\0"+
    "\1\u0250\102\0\1\u0251\46\0\1\u0252\13\0\1\u0253\36\0"+
    "\1\u0254\74\0\1\u0255\53\0\1\u0214\36\0\1\u0215\67\0"+
    "\1\u0256\71\0\1\u021b\103\0\1\u0257\110\0\1\u0258\102\0"+
    "\1\u0259\66\0\1\u021b\36\0\1\u025a\26\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\1\u025b\21\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\1\36"+
    "\1\u025c\1\36\17\0\1\36\3\0\1\36\1\0\1\u025d"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\6\36\1\u025e\13\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\u025f\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\36\1\0\10\36\12\0\10\36"+
    "\1\u0260\11\36\3\0\1\36\2\0\3\36\17\0\1\u0260"+
    "\3\0\1\36\1\0\1\u0261\1\0\10\36\12\0\22\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\15\36\1\u0262\4\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\1\36\1\u0263\20\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\20\0\1\u0225"+
    "\66\0\1\u0227\1\0\1\u0227\1\0\10\u0227\5\0\1\u0264"+
    "\4\0\22\u0227\3\0\1\u0227\2\0\3\u0227\17\0\1\u0227"+
    "\3\0\1\u0228\1\0\1\u0228\1\0\10\u0228\12\0\22\u0228"+
    "\3\0\1\u0228\2\0\3\u0228\17\0\1\u0228\1\u0265\30\0"+
    "\1\u0266\63\0\1\u0267\134\0\1\u0268\61\0\1\u022f\115\0"+
    "\1\u0269\54\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\10\36\1\u026a\11\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\u026a\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\13\36\1\u026b\6\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\u026c\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u026d"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\13\36\1\u026e"+
    "\6\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\6\36\1\u026f"+
    "\13\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\2\36\1\u0270\5\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\u0271\1\0\10\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\2\36\1\u0272\17\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\6\36\1\u0273\13\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\u0274\1\0\10\36\12\0\22\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\1\36\1\u0275\20\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\u0276\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\12\36\1\u0277\7\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\7\36\1\u0278\12\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\15\36\1\u0279\4\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\2\36\1\u027a"+
    "\5\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\13\36\1\u027b\6\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\4\36\1\u027c\15\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\u027d\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\20\0"+
    "\3\u024b\11\0\1\u027e\52\0\1\36\1\0\1\u027f\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\36\1\u0280\20\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\21\0\1\u0250\36\0\1\u0281\66\0\1\u0282\51\0"+
    "\1\u0283\113\0\1\u0253\36\0\1\u0254\30\0\1\u0284\103\0"+
    "\1\u021b\117\0\1\u0257\36\0\1\u0285\55\0\1\u0286\122\0"+
    "\1\u0282\35\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\36\1\u0287\20\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\1\36\1\u0288\1\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\1\36\1\u0289\1\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\1\36\1\u028a\20\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\10\36\1\u028b\11\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\u028b\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\10\36\1\u028c\11\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\u028c\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\1\36\1\u028d\1\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\7\36\1\u028e\12\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\1\36\1\u028f\1\36\17\0"+
    "\1\36\20\0\1\u0225\1\0\1\u0226\101\0\1\u0290\1\0"+
    "\1\u0291\133\0\1\u0292\73\0\1\u0293\61\0\3\u0294\101\0"+
    "\3\u0295\64\0\1\36\1\0\1\36\1\0\2\36\1\u0296"+
    "\5\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\2\36\1\u0297"+
    "\5\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\6\36\1\u0298\13\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\u0299\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\1\36\1\u029a"+
    "\20\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\6\36\1\u029b"+
    "\13\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\22\36\3\0"+
    "\1\36\2\0\1\36\1\u029c\1\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\7\36\1\u029d"+
    "\12\36\3\0\1\36\2\0\3\36\17\0\1\36\3\0"+
    "\1\36\1\0\1\u029e\1\0\10\36\12\0\22\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\5\36\1\u029f\14\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\5\36\1\u02a0\14\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\6\36\1\u02a1\13\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\u02a2\1\0\10\36\12\0\22\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\u02a3\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\22\36\3\0\1\36\2\0\1\36\1\u02a4\1\36\17\0"+
    "\1\36\42\0\1\u02a5\44\0\1\36\1\0\1\u02a6\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\21\0\1\u0282\36\0\1\u02a7\61\0\1\u0253\107\0"+
    "\1\u0214\62\0\1\u0286\36\0\1\u02a8\26\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\22\36\3\0\1\36\2\0"+
    "\1\36\1\u02a9\1\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\22\36\3\0\1\36\2\0"+
    "\1\36\1\u02aa\1\36\17\0\1\36\3\0\1\36\1\0"+
    "\1\36\1\0\10\36\12\0\1\u02ab\21\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\21\36\1\u02ac\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\1\36\1\u02ad"+
    "\1\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\1\36\1\u02ae"+
    "\1\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\2\36\1\u02af\17\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\6\36\1\u02b0\13\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\20\0\1\u0290\115\0\1\u02b1\71\0"+
    "\3\u02b2\66\0\1\u02b3\2\0\3\u02b3\1\0\2\u02b3\2\0"+
    "\3\u0294\1\u02b4\5\0\22\u02b3\3\0\1\u02b3\2\0\3\u02b3"+
    "\17\0\1\u02b3\20\0\3\u0295\21\0\1\u02b5\42\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\11\36\1\u02b6\10\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\6\36\1\u02b7\13\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\15\36\1\u02b8\4\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\u02b9\1\0\10\36\12\0\22\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\7\36\1\u02ba\12\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\3\36\1\u02bb\16\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\7\36\1\u02bc\12\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\1\36\1\u02bd\20\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\u02be"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\3\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\7\36\1\u02bf\12\36\3\0\1\36\2\0\3\36"+
    "\17\0\1\36\40\0\1\u02c0\46\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\2\36\1\u02c1\17\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\1\36"+
    "\1\u02c2\1\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\7\36\1\u02c3\12\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\2\36\1\u02c4\5\36\12\0\22\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\1\36"+
    "\1\u02c5\1\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\22\36\3\0\1\36\2\0\1\36"+
    "\1\u02c6\1\36\17\0\1\36\3\0\1\36\1\0\1\36"+
    "\1\0\10\36\12\0\7\36\1\u02c7\12\36\3\0\1\36"+
    "\2\0\3\36\17\0\1\36\20\0\3\u02b1\31\0\1\366"+
    "\34\0\1\u02c8\2\0\3\u02c8\1\0\2\u02c8\1\0\1\u02c9"+
    "\3\u02b2\6\0\22\u02c8\3\0\1\u02c8\2\0\3\u02c8\17\0"+
    "\1\u02c8\3\0\1\u02b3\1\0\1\u02b3\1\0\10\u02b3\1\0"+
    "\3\u02ca\6\0\22\u02b3\3\0\1\u02b3\2\0\3\u02b3\12\0"+
    "\1\u02cb\4\0\1\u02b3\5\0\1\u02b3\2\0\3\u02b3\1\0"+
    "\2\u02b3\13\0\22\u02b3\3\0\1\u02b3\2\0\3\u02b3\17\0"+
    "\1\u02b3\11\0\1\u02cc\75\0\1\36\1\0\1\u02cd\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\15\36\1\u02ce\4\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\5\36\1\u02cf\14\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\3\36\1\u02d0\16\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\10\36\1\u02d1\11\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\u02d1\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\5\36\1\u02d2\14\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\45\0\1\u02d3\41\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\5\36\1\u02d4\14\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\6\36\1\u02d5\13\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\1\36\1\u02d6"+
    "\1\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\14\36\1\u02d7\5\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\u02c8\1\0\1\u02c8\1\0"+
    "\10\u02c8\1\u02c9\3\u02d8\6\0\22\u02c8\3\0\1\u02c8\2\0"+
    "\3\u02c8\6\0\1\u02d9\3\0\1\u02da\4\0\1\u02c8\5\0"+
    "\1\u02c8\2\0\3\u02c8\1\0\2\u02c8\13\0\22\u02c8\3\0"+
    "\1\u02c8\2\0\3\u02c8\17\0\1\u02c8\5\0\1\u02db\2\0"+
    "\3\u02db\1\0\2\u02db\1\0\1\u02dc\3\u02ca\6\0\22\u02db"+
    "\3\0\1\u02db\2\0\3\u02db\17\0\1\u02db\5\0\1\u02dd"+
    "\2\0\3\u02dd\1\0\2\u02dd\6\0\1\u02cb\4\0\22\u02dd"+
    "\3\0\1\u02dd\2\0\3\u02dd\13\0\1\u02de\3\0\1\u02dd"+
    "\1\u02cb\35\0\1\u02df\50\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\6\36\1\u02e0\13\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\6\36\1\u02e1\13\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\1\36\1\u02e2"+
    "\1\36\17\0\1\36\3\0\1\36\1\0\1\u02e3\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\3\0\1\36\1\0\1\36\1\0\10\36\12\0"+
    "\21\36\1\u02e4\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\20\0\3\u02d8\1\u02e5\65\0\1\u02c8\2\0\3\u02c8\1\0"+
    "\2\u02c8\1\0\1\u02c9\11\0\22\u02c8\3\0\1\u02c8\2\0"+
    "\3\u02c8\17\0\1\u02c8\77\0\1\u02e6\7\0\1\u02db\1\0"+
    "\1\u02db\1\0\10\u02db\1\u02dc\3\u02e7\6\0\22\u02db\3\0"+
    "\1\u02db\2\0\3\u02db\2\0\1\u02e8\3\0\1\u02e9\3\0"+
    "\1\u02ea\4\0\1\u02db\5\0\1\u02db\2\0\3\u02db\1\0"+
    "\2\u02db\13\0\22\u02db\3\0\1\u02db\2\0\3\u02db\17\0"+
    "\1\u02db\3\0\1\u02dd\1\0\1\u02dd\1\0\10\u02dd\5\0"+
    "\1\u02cb\4\0\22\u02dd\3\0\1\u02dd\2\0\3\u02dd\13\0"+
    "\1\u02de\3\0\1\u02dd\1\u02cb\17\0\3\u02ca\53\0\1\u02cb"+
    "\56\0\1\u02eb\35\0\1\36\1\0\1\u02ec\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\2\0\3\36\17\0\1\36"+
    "\3\0\1\36\1\0\1\u02ed\1\0\10\36\12\0\22\36"+
    "\3\0\1\36\2\0\3\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\22\36\3\0\1\36"+
    "\2\0\1\36\1\u02ee\1\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\22\36\3\0\1\36"+
    "\2\0\1\36\1\u02ef\1\36\17\0\1\36\3\0\1\36"+
    "\1\0\1\36\1\0\10\36\12\0\1\u02f0\21\36\3\0"+
    "\1\36\2\0\3\36\17\0\1\36\5\0\1\u02f1\2\0"+
    "\3\u02f1\1\0\2\u02f1\13\0\22\u02f1\3\0\1\u02f1\2\0"+
    "\3\u02f1\17\0\1\u02f1\20\0\3\u02d8\47\0\1\u02d9\3\0"+
    "\1\u02da\25\0\3\u02e7\43\0\1\u02e8\104\0\1\u02f2\21\0"+
    "\1\u02db\2\0\3\u02db\1\0\2\u02db\1\0\1\u02dc\11\0"+
    "\22\u02db\3\0\1\u02db\2\0\3\u02db\17\0\1\u02db\77\0"+
    "\1\u02f3\41\0\1\u02f4\51\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\1\36\1\u02f5"+
    "\1\36\17\0\1\36\3\0\1\36\1\0\1\36\1\0"+
    "\10\36\12\0\13\36\1\u02f6\6\36\3\0\1\36\2\0"+
    "\3\36\17\0\1\36\2\0\1\u02f7\1\u02f1\1\u02f7\1\u02f1"+
    "\1\u02f7\10\u02f1\1\u02f7\3\u02f8\6\u02f7\22\u02f1\3\u02f7\1\u02f1"+
    "\2\u02f7\3\u02f1\2\u02f7\1\u02f9\7\u02f7\1\u02fa\4\u02f7\1\u02f1"+
    "\2\u02f7\16\0\3\u02e7\43\0\1\u02e8\3\0\1\u02e9\3\0"+
    "\1\u02ea\16\0\1\u02fb\75\0\1\36\1\0\1\u02fc\1\0"+
    "\10\36\12\0\22\36\3\0\1\36\2\0\3\36\17\0"+
    "\1\36\2\0\16\u02f7\1\0\1\u02f7\1\0\43\u02f7\1\u02f9"+
    "\35\u02f7\3\u02f8\43\u02f7\1\u02f9\35\u02f7\1\0\1\u02f7\1\0"+
    "\43\u02f7\1\u02f9\1\u02fd\21\u02f7\1\u02fe\2\u02f7\3\u02fe\1\u02f7"+
    "\2\u02fe\2\u02f7\1\0\1\u02f7\1\0\1\u02f7\1\u02fa\4\u02f7"+
    "\22\u02fe\3\u02f7\1\u02fe\2\u02f7\3\u02fe\2\u02f7\1\u02f9\10\u02f7"+
    "\1\u02ff\3\u02f7\1\u02fe\1\u02fa\1\u02f7\47\0\1\u0300\35\0"+
    "\1\36\1\0\1\36\1\0\10\36\12\0\11\36\1\u0301"+
    "\10\36\3\0\1\36\2\0\3\36\17\0\1\36\2\0"+
    "\1\u02f7\1\u02fe\1\u02f7\1\u02fe\1\u02f7\10\u02fe\1\u02f7\1\0"+
    "\1\u02f7\1\0\1\u02f7\1\u02fa\4\u02f7\22\u02fe\3\u02f7\1\u02fe"+
    "\2\u02f7\3\u02fe\2\u02f7\1\u02f9\10\u02f7\1\u02ff\3\u02f7\1\u02fe"+
    "\1\u02fa\17\u02f7\3\u02f8\43\u02f7\1\u02f9\7\u02f7\1\u02fa\7\u02f7"+
    "\3\0\1\u0302\101\0\1\36\1\0\1\36\1\0\10\36"+
    "\12\0\22\36\3\0\1\36\1\u0303\1\0\3\36\17\0"+
    "\1\36\20\0\3\u0302\5\0\1\u0304\133\0\1\u0305\43\0"+
    "\3\u0304\1\0\1\u0306\25\0\1\u0307\31\0\1\u0308\26\0"+
    "\1\u0309\126\0\1\u030a\77\0\1\u030b\107\0\1\u030c\77\0"+
    "\1\u030d\107\0\1\u030e\77\0\1\u030f\107\0\1\u0310\51\0"+
    "\3\u030e\31\0\1\u0311\101\0\1\u0312\55\0\1\u030e\163\0"+
    "\1\u030e\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[39644];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\22\0\2\1\1\11\11\1\1\11\3\1\3\11\25\1"+
    "\1\11\12\1\6\11\1\1\1\11\3\1\1\11\4\1"+
    "\1\11\7\1\1\11\10\1\1\11\4\1\1\11\2\1"+
    "\1\11\2\1\2\11\1\1\24\11\5\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\0\4\1\2\0\1\11"+
    "\6\1\2\11\2\0\6\1\2\0\1\1\3\0\1\11"+
    "\1\0\1\1\1\11\36\1\4\11\1\1\1\11\1\1"+
    "\12\0\3\1\1\11\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\5\11\1\1\1\11\4\0\3\1"+
    "\3\11\1\1\3\0\2\1\1\11\1\1\3\0\1\1"+
    "\1\0\1\1\1\11\1\0\1\11\3\0\1\1\1\0"+
    "\2\1\1\11\1\0\1\11\1\0\1\11\1\1\2\0"+
    "\1\11\2\0\3\11\2\0\1\1\1\0\1\11\16\1"+
    "\1\0\1\11\44\1\1\11\1\1\12\0\10\1\3\11"+
    "\2\0\1\11\1\0\1\1\1\0\1\11\1\1\1\11"+
    "\1\1\1\0\1\11\5\1\1\0\1\11\1\0\2\11"+
    "\2\1\1\11\2\0\60\1\12\0\11\1\5\0\1\11"+
    "\3\0\2\1\1\11\2\0\54\1\5\0\1\11\6\0"+
    "\11\1\1\11\1\1\5\0\1\11\2\1\1\11\1\1"+
    "\1\0\31\1\1\0\4\1\4\0\1\11\5\0\1\11"+
    "\11\1\6\0\24\1\1\0\2\1\1\11\3\0\1\11"+
    "\1\0\11\1\1\11\1\1\4\0\17\1\1\0\1\1"+
    "\2\11\10\1\5\0\12\1\1\0\7\1\5\0\6\1"+
    "\1\11\4\1\10\0\5\1\7\0\5\1\1\0\1\11"+
    "\2\0\2\1\5\0\2\1\3\0\1\1\7\0\1\11"+
    "\7\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[786];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    private final List commentList = new ArrayList();
    private String heredoc = null;
    private int heredocBodyStart = -1;
    private int heredocBodyLength = 0;
    private final StringBuilder heredocBody = new StringBuilder();
    private String nowdoc = null;
    private int nowdoc_len  = 0;
    private int nowdocBodyStart = -1;
    private int nowdocBodyLength = 0;
    private final StringBuilder nowdocBody = new StringBuilder();
    private String comment = null;
    private boolean asp_tags = false;
    private boolean short_tags_allowed = true;
    private ByteStack stack = new ByteStack();
    private char yy_old_buffer[] = new char[ZZ_BUFFERSIZE];
    private int yy_old_pushbackPos;
    protected int commentStartPosition;
    private int whitespaceEndPosition;
    private boolean isEndedPhp;
    private final PHPDocCommentParser docParser = new PHPDocCommentParser();
    private final PHPVarCommentParser varParser = new PHPVarCommentParser();

    public ASTPHP5Scanner(java.io.Reader in, boolean short_tags_allowed, boolean asp_tags_allowed) {
        this(in);
        this.asp_tags = asp_tags_allowed;
        this.short_tags_allowed = short_tags_allowed;
    }
    //private AST ast;

    private int bracket = 0;

    /**
     * Returns balance beween '{' and '}'. If it's equesl 0,
     * then number of '{' == number of '}', if > 0 then '{' > '}' and
     * if return number < 0 then '{' < '}'
     */
    public int getCurlyBalance() {
        return bracket;
    }

    public int getWhitespaceEndPosition() {
        return whitespaceEndPosition;
    }

    public boolean isEndedPhp() {
        return isEndedPhp;
    }

    public boolean useAspTagsAsPhp() {
        return asp_tags;
    }

    public void reset(java.io.Reader reader) {
        yyreset(reader);
    }

    public void setState(int state) {
        yybegin(state);
    }

    public int getState() {
        return yystate();
    }

    public void setInScriptingState() {
		yybegin(ST_IN_SCRIPTING);
	}

	public void resetCommentList() {
		commentList.clear();
	}

	public List getCommentList() {
		return commentList;
	}

	protected void addComment(Comment.Type type) {
		int leftPosition = getTokenStartPosition();
        //System.out.println("#####AddCommnet start: " + commentStartPosition + " end: " + (leftPosition + getTokenLength()) + ", type: " + type);
        Comment comm;
        if (type == Comment.Type.TYPE_PHPDOC) {
            comm = docParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
        }
        else if(type == Comment.Type.TYPE_VARTYPE) {
            comm = varParser.parse(commentStartPosition, leftPosition + getTokenLength(),  comment);
            comment = null;
            if (comm == null) {
                comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
            }
        }
        else {
            comm = new Comment(commentStartPosition, leftPosition + getTokenLength(), /*ast,*/ type);
        }
		commentList.add(comm);
	}

	public void setUseAspTagsAsPhp(boolean useAspTagsAsPhp) {
		asp_tags = useAspTagsAsPhp;
	}

    private void pushState(int state) {
        stack.push(zzLexicalState);
        yybegin(state);
    }

    private void popState() {
        yybegin(stack.pop());
    }

    public int getCurrentLine() {
        return yyline;
    }

    protected int getTokenStartPosition() {
        return zzStartRead - zzPushbackPos;
    }

    protected int getTokenLength() {
        return zzMarkedPos - zzStartRead;
    }

    public int getLength() {
        return zzEndRead - zzPushbackPos;
    }

    private void handleCommentStart() {
        commentStartPosition = getTokenStartPosition();
    }

    private void handleLineCommentEnd() {
         addComment(Comment.Type.TYPE_SINGLE_LINE);
    }

    private void handleMultilineCommentEnd() {
    	addComment(Comment.Type.TYPE_MULTILINE);
    }

    private void handlePHPDocEnd() {
        addComment(Comment.Type.TYPE_PHPDOC);
    }

    private void handleVarComment() {
    	commentStartPosition = getTokenStartPosition();
    	addComment(Comment.Type.TYPE_VARTYPE);
    }

    private Symbol createFullSymbol(int symbolNumber) {
        Symbol symbol = createSymbol(symbolNumber);
        symbol.value = yytext();
        return symbol;
    }

    private Symbol createSymbol(int symbolNumber) {
        int leftPosition = getTokenStartPosition();
        Symbol symbol = new Symbol(symbolNumber, leftPosition, leftPosition + getTokenLength());
        return symbol;
    }

    private void updateNowdocBodyInfo() {
        if (nowdocBodyStart == -1) {
            nowdocBodyStart = getTokenStartPosition();
        }
        nowdocBody.append(yytext());
        nowdocBodyLength += getTokenLength();
    }

    private Symbol createFullNowdocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, nowdocBodyStart, nowdocBodyStart + nowdocBodyLength);
        symbol.value = nowdocBody.toString();
        return symbol;
    }

    private void updateHeredocBodyInfo() {
        if (heredocBodyStart == -1) {
            heredocBodyStart = getTokenStartPosition();
        }
        heredocBody.append(yytext());
        heredocBodyLength += getTokenLength();
    }

    private void resetHeredocBodyInfo() {
        heredocBodyStart = -1;
        heredocBodyLength = 0;
        heredocBody.delete(0, heredocBody.length());
    }

    private Symbol createFullHeredocBodySymbol() {
        Symbol symbol = new Symbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE, heredocBodyStart, heredocBodyStart + heredocBodyLength);
        symbol.value = heredocBody.toString();
        resetHeredocBodyInfo();
        return symbol;
    }

    private boolean isLabelChar(char c) {
        return c == '_'
                || (c >= 'a' && c <= 'z')
                || (c >= 'A' && c <= 'Z')
                || (c >= 0x7f && c <= 0xff);
    }

    private boolean isEndHereOrNowdoc(String hereOrNowdoc) {
        // check whether ID exists
        String trimedText = yytext().trim();
        boolean isEnd = false;
        if (trimedText.startsWith(hereOrNowdoc)) {
            if (trimedText.length() == hereOrNowdoc.length()) {
                isEnd = true;
            } else if (trimedText.length() > hereOrNowdoc.length()
                    && !isLabelChar(trimedText.charAt(hereOrNowdoc.length()))) {
                // e.g.
                // $test = <<< END
                // ENDING
                // END
                isEnd = true;
            }
        }
        return isEnd;
    }

    public int[] getParamenters(){
    	return new int[]{zzMarkedPos, zzPushbackPos, zzCurrentPos, zzStartRead, zzEndRead, yyline};
    }

	private boolean parsePHPDoc(){
		/*final IDocumentorLexer documentorLexer = getDocumentorLexer(zzReader);
		if(documentorLexer == null){
			return false;
		}
		yypushback(zzMarkedPos - zzStartRead);
		int[] parameters = getParamenters();
		documentorLexer.reset(zzReader, zzBuffer, parameters);
		Object phpDocBlock = documentorLexer.parse();
		commentList.add(phpDocBlock);
		reset(zzReader, documentorLexer.getBuffer(), documentorLexer.getParamenters());*/

                //System.out.println("#######ParsePHPDoc()");
		//return true;
                return false;
	}


	/*protected IDocumentorLexer getDocumentorLexer(java.io.Reader  reader) {
		return null;
	}*/

	public void reset(java.io.Reader  reader, char[] buffer, int[] parameters){
		this.zzReader = reader;
		this.zzBuffer = buffer;
		this.zzMarkedPos = parameters[0];
		this.zzPushbackPos = parameters[1];
		this.zzCurrentPos = parameters[2];
		this.zzStartRead = parameters[3];
		this.zzEndRead = parameters[4];
		this.yyline = parameters[5];
		this.yychar = this.zzStartRead - this.zzPushbackPos;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ASTPHP5Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ASTPHP5Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1772) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    /*if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }*/
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 208:
          { comment = yytext();
    handleVarComment();
          }
        case 210: break;
        case 191:
          { return createFullSymbol(ASTPHP5Symbols.T_INTERFACE);
          }
        case 211: break;
        case 156:
          { int removeChars = (yytext().charAt(0) == 'b')?4:3;
    heredoc = yytext().substring(removeChars).trim();    // for 'b<<<' or '<<<'
    if (heredoc.charAt(0) == '"') {
        heredoc = heredoc.substring(1, heredoc.length()-1);
    }
    yybegin(ST_START_HEREDOC);
    return createSymbol(ASTPHP5Symbols.T_START_HEREDOC);
          }
        case 212: break;
        case 26:
          { return createSymbol(ASTPHP5Symbols.T_OR);
          }
        case 213: break;
        case 154:
          { return createFullSymbol(ASTPHP5Symbols.T_PRINT);
          }
        case 214: break;
        case 178:
          { return createSymbol(ASTPHP5Symbols.T_UNSET_CAST);
          }
        case 215: break;
        case 35:
          { handleCommentStart();
	yybegin(ST_ONE_LINE_COMMENT);
//	yymore();
          }
        case 216: break;
        case 1:
          { return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
          }
        case 217: break;
        case 21:
          { return createSymbol(ASTPHP5Symbols.T_RGREATER);
          }
        case 218: break;
        case 128:
          { yypushback(1);
	pushState(ST_VAR_OFFSET);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 219: break;
        case 165:
          { return createFullSymbol(ASTPHP5Symbols.T_GLOBAL);
          }
        case 220: break;
        case 59:
          { //	yymore();
          }
        case 221: break;
        case 22:
          { return createSymbol(ASTPHP5Symbols.T_TIMES);
          }
        case 222: break;
        case 111:
          { String text = yytext();
    if ((text.charAt(1)=='%' && asp_tags)
        || (text.charAt(1)=='?')) {
        yypushback(1);
        yybegin(ST_IN_SHORT_ECHO);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 223: break;
        case 76:
          { return createSymbol(ASTPHP5Symbols.T_MINUS_EQUAL);
          }
        case 224: break;
        case 94:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_OR);
          }
        case 225: break;
        case 12:
          { pushState(ST_IN_SCRIPTING);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 226: break;
        case 46:
          { /* <ST_END_NOWDOC>{LABEL}";"?[\n\r] */
    nowdoc=null;
    nowdoc_len=0;
    nowdocBody.delete(0, nowdocBody.length());
    nowdocBodyStart = -1;
    nowdocBodyLength = 0;
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
          }
        case 227: break;
        case 42:
          { yypushback(1);
	yybegin(ST_HEREDOC);
          }
        case 228: break;
        case 19:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_PARENTHESE);
          }
        case 229: break;
        case 47:
          { yypushback(yylength());
    popState();
          }
        case 230: break;
        case 20:
          { return createSymbol(ASTPHP5Symbols.T_NOT);
          }
        case 231: break;
        case 157:
          { yypushback(3);
	pushState(ST_LOOKING_FOR_PROPERTY);
	return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 232: break;
        case 28:
          { return createSymbol(ASTPHP5Symbols.T_QUESTION_MARK);
          }
        case 233: break;
        case 122:
          { return createFullSymbol(ASTPHP5Symbols.T_VAR);
          }
        case 234: break;
        case 205:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNC_C);
          }
        case 235: break;
        case 144:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT);
          }
        case 236: break;
        case 162:
          { return createFullSymbol(ASTPHP5Symbols.T_STATIC);
          }
        case 237: break;
        case 134:
          { return createFullSymbol(ASTPHP5Symbols.T_EVAL);
          }
        case 238: break;
        case 164:
          { return createFullSymbol(ASTPHP5Symbols.T_RETURN);
          }
        case 239: break;
        case 147:
          { return createFullSymbol(ASTPHP5Symbols.T_UNSET);
          }
        case 240: break;
        case 87:
          { return createSymbol(ASTPHP5Symbols.T_DIV_EQUAL);
          }
        case 241: break;
        case 48:
          { popState();
    return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 242: break;
        case 202:
          { return createFullSymbol(ASTPHP5Symbols.T_METHOD_C);
          }
        case 243: break;
        case 198:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOREACH);
          }
        case 244: break;
        case 173:
          { return createFullSymbol(ASTPHP5Symbols.T_FINALLY);
          }
        case 245: break;
        case 83:
          { return createSymbol(ASTPHP5Symbols.T_IS_SMALLER_OR_EQUAL);
          }
        case 246: break;
        case 70:
          { return createFullSymbol(ASTPHP5Symbols.T_CONSTANT_ENCAPSED_STRING);
          }
        case 247: break;
        case 114:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_AND);
          }
        case 248: break;
        case 149:
          { return createFullSymbol(ASTPHP5Symbols.T_CONST);
          }
        case 249: break;
        case 137:
          { return createFullSymbol(ASTPHP5Symbols.T_GOTO);
          }
        case 250: break;
        case 117:
          { return createFullSymbol(ASTPHP5Symbols.T_EXIT);
          }
        case 251: break;
        case 37:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 252: break;
        case 130:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}("{$" | "${") */
        yypushback(2);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 253: break;
        case 184:
          { return createFullSymbol(ASTPHP5Symbols.T_CALLABLE);
          }
        case 254: break;
        case 123:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_IDENTICAL);
          }
        case 255: break;
        case 161:
          { /* not a keyword, hust for recognize constans.*/
    return createFullSymbol(ASTPHP5Symbols.T_DEFINE);
          }
        case 256: break;
        case 60:
          { String yytext = yytext();
	switch (yytext.charAt(yytext.length() - 1)) {
		case '?':
		case '%':
		case '>':
			yypushback(1);
			break;
		default:
			handleLineCommentEnd();
			yybegin(ST_IN_SCRIPTING);
	}
//	yymore();
          }
        case 257: break;
        case 93:
          { return createSymbol(ASTPHP5Symbols.T_OR_EQUAL);
          }
        case 258: break;
        case 142:
          { return createFullSymbol(ASTPHP5Symbols.T_BREAK);
          }
        case 259: break;
        case 209:
          { yybegin(ST_HALTED_COMPILER);
	return createSymbol(ASTPHP5Symbols.T_HALT_COMPILER);
          }
        case 260: break;
        case 61:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 261: break;
        case 163:
          { return createFullSymbol(ASTPHP5Symbols.T_SWITCH);
          }
        case 262: break;
        case 56:
          { popState();
	return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 263: break;
        case 32:
          { return createSymbol(ASTPHP5Symbols.T_TILDA);
          }
        case 264: break;
        case 73:
          { return createFullSymbol(ASTPHP5Symbols.T_IF);
          }
        case 265: break;
        case 175:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE);
          }
        case 266: break;
        case 17:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDOTAIM);
          }
        case 267: break;
        case 25:
          { return createSymbol(ASTPHP5Symbols.T_REFERENCE);
          }
        case 268: break;
        case 88:
          { handleCommentStart();
    yybegin(ST_COMMENT);
          }
        case 269: break;
        case 193:
          { return createFullSymbol(ASTPHP5Symbols.T_NAMESPACE);
          }
        case 270: break;
        case 200:
          { return createFullSymbol(ASTPHP5Symbols.T_IMPLEMENTS);
          }
        case 271: break;
        case 152:
          { return createFullSymbol(ASTPHP5Symbols.T_YIELD);
          }
        case 272: break;
        case 15:
          { return createSymbol(ASTPHP5Symbols.T_MINUS);
          }
        case 273: break;
        case 44:
          { /* <ST_NOWDOC>{NOWDOC_CHARS}|{NEWLINE} */
        updateNowdocBodyInfo();
          }
        case 274: break;
        case 196:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS_C);
          }
        case 275: break;
        case 109:
          { handlePHPDocEnd();
     yybegin(ST_IN_SCRIPTING);
          }
        case 276: break;
        case 207:
          { return createFullSymbol(ASTPHP5Symbols.T_NS_C);
          }
        case 277: break;
        case 155:
          { return createSymbol(ASTPHP5Symbols.T_INT_CAST);
          }
        case 278: break;
        case 160:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSEIF);
          }
        case 279: break;
        case 97:
          { return createSymbol(ASTPHP5Symbols.T_COALESCE);
          }
        case 280: break;
        case 197:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDDECLARE);
          }
        case 281: break;
        case 77:
          { return createSymbol(ASTPHP5Symbols.T_DEC);
          }
        case 282: break;
        case 98:
          { yypushback(1);
    /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[\"]))*/
    return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 283: break;
        case 182:
          { return createFullSymbol(ASTPHP5Symbols.T_ABSTRACT);
          }
        case 284: break;
        case 133:
          { return createFullSymbol(ASTPHP5Symbols.T_ELSE);
          }
        case 285: break;
        case 192:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTEADOF);
          }
        case 286: break;
        case 78:
          { pushState(ST_LOOKING_FOR_PROPERTY);
    return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 287: break;
        case 13:
          { return createSymbol(ASTPHP5Symbols.T_SEMICOLON);
          }
        case 288: break;
        case 2:
          { // do nothing
          }
        case 289: break;
        case 50:
          { popState();
    pushState(ST_IN_SCRIPTING);
    return createFullSymbol(ASTPHP5Symbols.T_STRING_VARNAME);
          }
        case 290: break;
        case 16:
          { return createSymbol(ASTPHP5Symbols.T_LGREATER);
          }
        case 291: break;
        case 136:
          { return createFullSymbol(ASTPHP5Symbols.T_LIST);
          }
        case 292: break;
        case 108:
          { handleMultilineCommentEnd();
    yybegin(ST_IN_SCRIPTING);
          }
        case 293: break;
        case 159:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDFOR);
          }
        case 294: break;
        case 3:
          { return createFullSymbol(ASTPHP5Symbols.T_LNUMBER);
          }
        case 295: break;
        case 101:
          { yypushback(1);
        /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}*("{""{"+|"$""$"+|(("{"+|"$"+)[`]))*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 296: break;
        case 41:
          { /* <ST_HEREDOC> "$" | "{" */
        updateHeredocBodyInfo();
          }
        case 297: break;
        case 138:
          { handleCommentStart();
          }
        case 298: break;
        case 141:
          { return createFullSymbol(ASTPHP5Symbols.T_ARRAY);
          }
        case 299: break;
        case 132:
          { return createFullSymbol(ASTPHP5Symbols.T_ECHO);
          }
        case 300: break;
        case 51:
          { return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 301: break;
        case 91:
          { return createSymbol(ASTPHP5Symbols.T_AND_EQUAL);
          }
        case 302: break;
        case 55:
          { bracket++; return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN);
          }
        case 303: break;
        case 145:
          { return createFullSymbol(ASTPHP5Symbols.T_THROW);
          }
        case 304: break;
        case 129:
          { /* <ST_HEREDOC> {HEREDOC_CHARS}"$"{LABEL}"["? */
        String text = yytext();
        int lastIndexOfDollar = text.lastIndexOf('$');
        yypushback(text.length() - lastIndexOfDollar);
        updateHeredocBodyInfo();
        return createFullHeredocBodySymbol();
          }
        case 305: break;
        case 153:
          { return createFullSymbol(ASTPHP5Symbols.T_WHILE);
          }
        case 306: break;
        case 190:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDSWITCH);
          }
        case 307: break;
        case 62:
          { if (asp_tags) {
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 308: break;
        case 177:
          { return createSymbol(ASTPHP5Symbols.T_ARRAY_CAST);
          }
        case 309: break;
        case 102:
          { /* {NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
        int trailingNewLineLength = 1;
        int labelLength = yylength() - trailingNewLineLength;
        int back = trailingNewLineLength;

        if (yytext().charAt(labelLength-1) == ';') {
           labelLength--;
           back++;
        }

        if (isEndHereOrNowdoc(heredoc)) {
            int indexOfHeredocId = yytext().indexOf(heredoc);
            back += labelLength - indexOfHeredocId;
            yypushback(back);
            yybegin(ST_END_HEREDOC);
        } else {
            int indexOfVariable1 = yytext().indexOf("$");
            int indexOfVariable2 = yytext().indexOf("{$");
            if (indexOfVariable1 > 0 && indexOfVariable2 == -1) {
                yypushback(yylength() - indexOfVariable1);
                updateHeredocBodyInfo();
                return createFullHeredocBodySymbol();
            } else if (indexOfVariable2 > 0 && indexOfVariable1 == -1) {
                yypushback(yylength() - indexOfVariable2);
                updateHeredocBodyInfo();
                return createFullHeredocBodySymbol();
            } else if (indexOfVariable1 > 0 && indexOfVariable2 > 0) {
                yypushback(yylength() - Math.min(indexOfVariable1, indexOfVariable2));
                updateHeredocBodyInfo();
                return createFullHeredocBodySymbol();
            } else {
                yypushback(trailingNewLineLength);
            }
        }
        updateHeredocBodyInfo();
        if (yystate() == ST_END_HEREDOC) {
            return createFullHeredocBodySymbol();
        }
          }
        case 310: break;
        case 100:
          { pushState(ST_IN_SCRIPTING);
    yypushback(yylength()-1);
    bracket++;
    return createSymbol(ASTPHP5Symbols.T_CURLY_OPEN_WITH_DOLAR);
          }
        case 311: break;
        case 171:
          { return createFullSymbol(ASTPHP5Symbols.T_DEFAULT);
          }
        case 312: break;
        case 168:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_CAST);
          }
        case 313: break;
        case 11:
          { yybegin(ST_BACKQUOTE);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 314: break;
        case 30:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_RECT);
          }
        case 315: break;
        case 148:
          { return createFullSymbol(ASTPHP5Symbols.T_CATCH);
          }
        case 316: break;
        case 104:
          { /* <ST_NOWDOC>{NEWLINE}{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
        if (isEndHereOrNowdoc(nowdoc)) {
            String yytext = yytext();
            int newlineLength = yytext.startsWith("\r\n") ? 2 : 1;
            int back = yylength() - newlineLength;
            yypushback(back);
            updateNowdocBodyInfo();
            yybegin(ST_END_NOWDOC);
            if (nowdocBodyLength > 0) {
                return createFullNowdocBodySymbol();
            }
        } else {
            yypushback(1);
            updateNowdocBodyInfo();
        }
          }
        case 317: break;
        case 99:
          { pushState(ST_LOOKING_FOR_VARNAME);
    return createSymbol(ASTPHP5Symbols.T_DOLLAR_OPEN_CURLY_BRACES);
          }
        case 318: break;
        case 34:
          { /* This is a temporary fix which is dependant on flex and it's implementation */
    if (!stack.isEmpty()) {
        popState();
    }
    bracket--;
    return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 319: break;
        case 89:
          { return createSymbol(ASTPHP5Symbols.T_MOD_EQUAL);
          }
        case 320: break;
        case 23:
          { return createSymbol(ASTPHP5Symbols.T_DIV);
          }
        case 321: break;
        case 103:
          { /* <ST_START_HEREDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\n\r]? */
    int trailingNewLineLength = 1;
    int labelLength = yylength() - trailingNewLineLength;
    int back = trailingNewLineLength;
    String yytext = yytext();

    if (yytext.charAt(labelLength - 1) == ';') {
        labelLength--;
        back++;
    }

    if (isEndHereOrNowdoc(heredoc)) {
        int indexOfHeredocId = yytext().indexOf(heredoc);
        back += labelLength - indexOfHeredocId;
        yypushback(back);
        yybegin(ST_END_HEREDOC);
    } else {
        yypushback(yylength());
        yybegin(ST_HEREDOC);
    }
          }
        case 322: break;
        case 31:
          { return createSymbol(ASTPHP5Symbols.T_CLOSE_RECT);
          }
        case 323: break;
        case 124:
          { return createSymbol(ASTPHP5Symbols.T_SPACESHIP);
          }
        case 324: break;
        case 6:
          { return createSymbol(ASTPHP5Symbols.T_PLUS);
          }
        case 325: break;
        case 150:
          { return createFullSymbol(ASTPHP5Symbols.T_CLASS);
          }
        case 326: break;
        case 118:
          { return createFullSymbol(ASTPHP5Symbols.T_FOR);
          }
        case 327: break;
        case 79:
          { return createSymbol(ASTPHP5Symbols.T_IS_GREATER_OR_EQUAL);
          }
        case 328: break;
        case 74:
          { return createFullSymbol(ASTPHP5Symbols.T_DO);
          }
        case 329: break;
        case 38:
          { /*<ST_BACKQUOTE>{BACKQUOTE_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 330: break;
        case 36:
          { /*<ST_DOUBLE_QUOTES>{DOUBLE_QUOTES_CHARS}+*/
	return createFullSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 331: break;
        case 92:
          { return createSymbol(ASTPHP5Symbols.T_BOOLEAN_AND);
          }
        case 332: break;
        case 5:
          { return createFullSymbol(ASTPHP5Symbols.T_STRING);
          }
        case 333: break;
        case 170:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE);
          }
        case 334: break;
        case 4:
          { return createSymbol(ASTPHP5Symbols.T_NEKUDA);
          }
        case 335: break;
        case 139:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDIF);
          }
        case 336: break;
        case 120:
          { return createFullSymbol(ASTPHP5Symbols.T_NEW);
          }
        case 337: break;
        case 57:
          { bracket--; return createSymbol(ASTPHP5Symbols.T_CURLY_CLOSE);
          }
        case 338: break;
        case 199:
          { return createFullSymbol(ASTPHP5Symbols.T_INSTANCEOF);
          }
        case 339: break;
        case 180:
          { int bprefix = (yytext().charAt(0) != '<') ? 1 : 0;
        int startString=3+bprefix;
        /* 3 is <<<, 2 is quotes, 1 is newline */
        nowdoc_len = yylength()-bprefix-3-2-1-(yytext().charAt(yylength()-2)=='\r'?1:0);
        while ((yytext().charAt(startString) == ' ') || (yytext().charAt(startString) == '\t')) {
            startString++;
            nowdoc_len--;
        }
        // first quate
        startString++;
        nowdoc = yytext().substring(startString,nowdoc_len+startString);
        yybegin(ST_START_NOWDOC);
        return createSymbol(ASTPHP5Symbols.T_START_NOWDOC);
          }
        case 340: break;
        case 49:
          { yypushback(yylength());
    popState();
    pushState(ST_IN_SCRIPTING);
          }
        case 341: break;
        case 158:
          { isEndedPhp = false;
    whitespaceEndPosition = getTokenStartPosition() + yylength();
    yybegin(ST_IN_SCRIPTING);
    //return T_OPEN_TAG;
    //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
          }
        case 342: break;
        case 67:
          { return createSymbol(ASTPHP5Symbols.T_PLUS_EQUAL);
          }
        case 343: break;
        case 8:
          { whitespaceEndPosition = getTokenStartPosition() + yylength();
          }
        case 344: break;
        case 176:
          { return createFullSymbol(ASTPHP5Symbols.T_PRIVATE);
          }
        case 345: break;
        case 204:
          { return createFullSymbol(ASTPHP5Symbols.T_REQUIRE_ONCE);
          }
        case 346: break;
        case 174:
          { return createFullSymbol(ASTPHP5Symbols.T_FOREACH);
          }
        case 347: break;
        case 151:
          { return createFullSymbol(ASTPHP5Symbols.T_CLONE);
          }
        case 348: break;
        case 143:
          { return createFullSymbol(ASTPHP5Symbols.T_ISSET);
          }
        case 349: break;
        case 18:
          { return createSymbol(ASTPHP5Symbols.T_OPEN_PARENTHESE);
          }
        case 350: break;
        case 166:
          { return createFullSymbol(ASTPHP5Symbols.T_PUBLIC);
          }
        case 351: break;
        case 121:
          { return createSymbol(ASTPHP5Symbols.T_SR_EQUAL);
          }
        case 352: break;
        case 63:
          { if (short_tags_allowed || yylength()>2) { /* yyleng>2 means it's not <? but <script> */
        yybegin(ST_IN_SCRIPTING);
        //return T_OPEN_TAG;
        //return createSymbol(ASTPHP5Symbols.T_OPEN_TAG);
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 353: break;
        case 140:
          { return createFullSymbol(ASTPHP5Symbols.T_EMPTY);
          }
        case 354: break;
        case 40:
          { /* <ST_HEREDOC> {HEREDOC_CHARS} */
        updateHeredocBodyInfo();
          }
        case 355: break;
        case 82:
          { return createSymbol(ASTPHP5Symbols.T_IS_NOT_EQUAL);
          }
        case 356: break;
        case 85:
          { return createSymbol(ASTPHP5Symbols.T_MUL_EQUAL);
          }
        case 357: break;
        case 127:
          { if (!parsePHPDoc()) {
handleCommentStart();
yybegin(ST_DOCBLOCK);
}
          }
        case 358: break;
        case 105:
          { /* <ST_START_NOWDOC>{TABS_AND_SPACES}{LABEL}";"?[^\n\r]*[\r\n]? */
    // there is no [\r\n] if it is the last line
    // i.e. not [\r\n] but EOF, so check not [\r\n] but [\r\n]?
    if (isEndHereOrNowdoc(nowdoc)) {
        int indexOfNowdocId = yytext().indexOf(nowdoc);
        int back = yylength() - indexOfNowdocId - nowdoc.length();
        yypushback(back);
        nowdoc = null;
        nowdoc_len = 0;
        nowdocBody.delete(0, nowdocBody.length());
        nowdocBodyStart = -1;
        nowdocBodyLength = 0;
        yybegin(ST_IN_SCRIPTING);
        return createSymbol(ASTPHP5Symbols.T_END_NOWDOC);
    } else {
        yypushback(1); // [\r\n] length
        yybegin(ST_NOWDOC);
        updateNowdocBodyInfo();
    }
          }
        case 359: break;
        case 125:
          { return createSymbol(ASTPHP5Symbols.T_SL_EQUAL);
          }
        case 360: break;
        case 116:
          { return createFullSymbol(ASTPHP5Symbols.T_TRY);
          }
        case 361: break;
        case 146:
          { return createFullSymbol(ASTPHP5Symbols.T_FINAL);
          }
        case 362: break;
        case 131:
          { int len = yylength();
        yypushback(2); // go back to mark end of comment in the next token
        comment = yytext();
          }
        case 363: break;
        case 187:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_CAST);
          }
        case 364: break;
        case 167:
          { return createSymbol(ASTPHP5Symbols.T_BOOL_CAST);
          }
        case 365: break;
        case 39:
          { yybegin(ST_IN_SCRIPTING);
    return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 366: break;
        case 7:
          { return createSymbol(ASTPHP5Symbols.T_NS_SEPARATOR);
          }
        case 367: break;
        case 186:
          { return createSymbol(ASTPHP5Symbols.T_STRING_CAST);
          }
        case 368: break;
        case 113:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_XOR);
          }
        case 369: break;
        case 52:
          { yypushback(1);
	popState();
        /*<ST_VAR_OFFSET>[ \n\r\t\\'#]*/
	return createSymbol(ASTPHP5Symbols.T_ENCAPSED_AND_WHITESPACE);
          }
        case 370: break;
        case 64:
          { return createFullSymbol(ASTPHP5Symbols.T_DNUMBER);
          }
        case 371: break;
        case 24:
          { return createSymbol(ASTPHP5Symbols.T_PRECENT);
          }
        case 372: break;
        case 206:
          { comment = yytext();
    handleVarComment();
    // if we want to handle the var comment in  ast, then return the T_VAR_Comment symbol
    // but it needs some changes in parser grammar. see issue #154967
    //return createFullSymbol(ASTPHP5Symbols.T_VAR_COMMENT);
          }
        case 373: break;
        case 96:
          { isEndedPhp = true;
    yybegin(YYINITIAL);
    return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
          }
        case 374: break;
        case 90:
          { if (asp_tags) {
        yybegin(YYINITIAL);
        return createSymbol(ASTPHP5Symbols.T_SEMICOLON);  /* implicit ';' at php-end tag */
    } else {
        return createSymbol(ASTPHP5Symbols.T_INLINE_HTML);
    }
          }
        case 375: break;
        case 183:
          { return createFullSymbol(ASTPHP5Symbols.T_FUNCTION);
          }
        case 376: break;
        case 181:
          { return createFullSymbol(ASTPHP5Symbols.T_ENDWHILE);
          }
        case 377: break;
        case 27:
          { return createSymbol(ASTPHP5Symbols.T_KOVA);
          }
        case 378: break;
        case 43:
          { /* <ST_END_HEREDOC>{TABS_AND_SPACES}{LABEL}";"? */
    heredoc=null;
    resetHeredocBodyInfo();
    yybegin(ST_IN_SCRIPTING);
    int back = 0;
    // mark just the label
    if (yytext().charAt(yylength() - 1)==';') {
        back++;
    }
    yypushback(back);
    return createSymbol(ASTPHP5Symbols.T_END_HEREDOC);
          }
        case 379: break;
        case 10:
          { yybegin(ST_DOUBLE_QUOTES);
    return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 380: break;
        case 185:
          { return createFullSymbol(ASTPHP5Symbols.T_CONTINUE);
          }
        case 381: break;
        case 115:
          { return createSymbol(ASTPHP5Symbols.T_IS_IDENTICAL);
          }
        case 382: break;
        case 72:
          { return createSymbol(ASTPHP5Symbols.T_DOUBLE_ARROW);
          }
        case 383: break;
        case 195:
          { return createFullSymbol(ASTPHP5Symbols.T_TRAIT_C);
          }
        case 384: break;
        case 81:
          { return createSymbol(ASTPHP5Symbols.T_PAAMAYIM_NEKUDOTAYIM);
          }
        case 385: break;
        case 119:
          { return createFullSymbol(ASTPHP5Symbols.T_USE);
          }
        case 386: break;
        case 80:
          { return createSymbol(ASTPHP5Symbols.T_SR);
          }
        case 387: break;
        case 14:
          { return createSymbol(ASTPHP5Symbols.T_EQUAL);
          }
        case 388: break;
        case 29:
          { return createSymbol(ASTPHP5Symbols.T_COMMA);
          }
        case 389: break;
        case 179:
          { return createFullSymbol(ASTPHP5Symbols.T_DIR);
          }
        case 390: break;
        case 110:
          { if (asp_tags || yytext().charAt(0)!='%') { /* asp comment? */
        isEndedPhp = true;
	    handleLineCommentEnd();
        yypushback(yylength());
		yybegin(ST_IN_SCRIPTING);
		//return T_COMMENT;
	}
          }
        case 391: break;
        case 194:
          { return createFullSymbol(ASTPHP5Symbols.T_PROTECTED);
          }
        case 392: break;
        case 65:
          { return createSymbol(ASTPHP5Symbols.T_CONCAT_EQUAL);
          }
        case 393: break;
        case 107:
          { /* treat numbers (almost) as strings inside encapsulated strings */
    return createFullSymbol(ASTPHP5Symbols.T_NUM_STRING);
          }
        case 394: break;
        case 9:
          { return createSymbol(ASTPHP5Symbols.T_DOLLAR);
          }
        case 395: break;
        case 66:
          { return createSymbol(ASTPHP5Symbols.T_INC);
          }
        case 396: break;
        case 45:
          { yypushback(1);
	yybegin(ST_NOWDOC);
          }
        case 397: break;
        case 75:
          { return createFullSymbol(ASTPHP5Symbols.T_LOGICAL_OR);
          }
        case 398: break;
        case 84:
          { return createSymbol(ASTPHP5Symbols.T_SL);
          }
        case 399: break;
        case 68:
          { return createFullSymbol(ASTPHP5Symbols.T_AS);
          }
        case 400: break;
        case 203:
          { return createFullSymbol(ASTPHP5Symbols.T_INCLUDE_ONCE);
          }
        case 401: break;
        case 126:
          { return createSymbol(ASTPHP5Symbols.T_POW_EQUAL);
          }
        case 402: break;
        case 71:
          { return createSymbol(ASTPHP5Symbols.T_IS_EQUAL);
          }
        case 403: break;
        case 33:
          { return createSymbol(ASTPHP5Symbols.T_AT);
          }
        case 404: break;
        case 53:
          { return createSymbol(ASTPHP5Symbols.T_QUATE);
          }
        case 405: break;
        case 189:
          { return createFullSymbol(ASTPHP5Symbols.T_LINE);
          }
        case 406: break;
        case 169:
          { return createFullSymbol(ASTPHP5Symbols.T_EXTENDS);
          }
        case 407: break;
        case 69:
          { return createFullSymbol(ASTPHP5Symbols.T_VARIABLE);
          }
        case 408: break;
        case 201:
          { return createSymbol(ASTPHP5Symbols.T_YIELD_FROM);
          }
        case 409: break;
        case 172:
          { return createFullSymbol(ASTPHP5Symbols.T_DECLARE);
          }
        case 410: break;
        case 95:
          { return createSymbol(ASTPHP5Symbols.T_XOR_EQUAL);
          }
        case 411: break;
        case 86:
          { return createSymbol(ASTPHP5Symbols.T_POW);
          }
        case 412: break;
        case 135:
          { return createFullSymbol(ASTPHP5Symbols.T_CASE);
          }
        case 413: break;
        case 188:
          { return createFullSymbol(ASTPHP5Symbols.T_FILE);
          }
        case 414: break;
        case 106:
          { return createSymbol(ASTPHP5Symbols.T_OBJECT_OPERATOR);
          }
        case 415: break;
        case 112:
          { return createSymbol(ASTPHP5Symbols.T_ELLIPSIS);
          }
        case 416: break;
        case 54:
          { return createSymbol(ASTPHP5Symbols.T_BACKQUATE);
          }
        case 417: break;
        case 58:
          {
          }
        case 418: break;
        default:
          if (zzInput == YYEOF && (zzStartRead == zzCurrentPos || zzLexicalState == ST_DOCBLOCK)) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case ST_DOCBLOCK: {
              if (yytext().length() > 0) {
                yypushback(1);  // backup eof
                comment = yytext();
              }
              else {
                return createSymbol(ASTPHP5Symbols.EOF);
              }
            }
            case 787: break;
            default:
              {     return createSymbol(ASTPHP5Symbols.EOF);
 }
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
