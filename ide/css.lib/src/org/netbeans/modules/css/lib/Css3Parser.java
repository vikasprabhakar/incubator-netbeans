// $ANTLR 3.5.2 Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g 2019-03-31 15:20:13

/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

// DO NOT EDIT THIS FILE MANUALLY!
// SEE Css3.g FOR INSTRUCTIONS

package org.netbeans.modules.css.lib;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.debug.*;
import java.io.IOException;
@SuppressWarnings("all")
public class Css3Parser extends DebugParser {
	public static final String[] tokenNames = new String[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "AT_IDENT", "AT_SIGN", 
		"B", "BEGINS", "BOTTOMCENTER_SYM", "BOTTOMLEFTCORNER_SYM", "BOTTOMLEFT_SYM", 
		"BOTTOMRIGHTCORNER_SYM", "BOTTOMRIGHT_SYM", "C", "CDC", "CDO", "CHARSET_SYM", 
		"COLON", "COMMA", "COMMENT", "CONTAINS", "COUNTER_STYLE_SYM", "CP_DOTS", 
		"CP_EQ", "CP_NOT_EQ", "D", "DASHMATCH", "DCOLON", "DIMENSION", "DOT", 
		"E", "EMS", "ENDS", "ESCAPE", "EXCLAMATION_MARK", "EXS", "F", "FONT_FACE_SYM", 
		"FREQ", "G", "GEN", "GREATER", "GREATER_OR_EQ", "H", "HASH", "HASH_SYMBOL", 
		"HEXCHAR", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", "INCLUDES", "INVALID", 
		"J", "K", "L", "LBRACE", "LBRACKET", "LEFTBOTTOM_SYM", "LEFTMIDDLE_SYM", 
		"LEFTTOP_SYM", "LENGTH", "LESS", "LESS_AND", "LESS_JS_STRING", "LESS_OR_EQ", 
		"LESS_REST", "LINE_COMMENT", "LPAREN", "M", "MEDIA_SYM", "MINUS", "MOZ_DOCUMENT_SYM", 
		"MOZ_DOMAIN", "MOZ_REGEXP", "MOZ_URL_PREFIX", "N", "NAME", "NAMESPACE_SYM", 
		"NL", "NMCHAR", "NMSTART", "NONASCII", "NOT", "NUMBER", "O", "OPEQ", "P", 
		"PAGE_SYM", "PERCENTAGE", "PERCENTAGE_SYMBOL", "PIPE", "PLUS", "Q", "R", 
		"RBRACE", "RBRACKET", "REM", "RESOLUTION", "RIGHTBOTTOM_SYM", "RIGHTMIDDLE_SYM", 
		"RIGHTTOP_SYM", "RPAREN", "S", "SASS_AT_ROOT", "SASS_CONTENT", "SASS_DEBUG", 
		"SASS_DEFAULT", "SASS_EACH", "SASS_ELSE", "SASS_ELSEIF", "SASS_ERROR", 
		"SASS_EXTEND", "SASS_EXTEND_ONLY_SELECTOR", "SASS_FOR", "SASS_FUNCTION", 
		"SASS_GLOBAL", "SASS_IF", "SASS_INCLUDE", "SASS_MIXIN", "SASS_OPTIONAL", 
		"SASS_RETURN", "SASS_VAR", "SASS_WARN", "SASS_WHILE", "SEMI", "SOLIDUS", 
		"STAR", "STRING", "SUPPORTS_SYM", "T", "TILDE", "TIME", "TOPCENTER_SYM", 
		"TOPLEFTCORNER_SYM", "TOPLEFT_SYM", "TOPRIGHTCORNER_SYM", "TOPRIGHT_SYM", 
		"U", "UNICODE", "URI", "URL", "V", "VARIABLE", "W", "WEBKIT_KEYFRAMES_SYM", 
		"WS", "X", "Y", "Z"
	};
	public static final int EOF=-1;
	public static final int A=4;
	public static final int ANGLE=5;
	public static final int AT_IDENT=6;
	public static final int AT_SIGN=7;
	public static final int B=8;
	public static final int BEGINS=9;
	public static final int BOTTOMCENTER_SYM=10;
	public static final int BOTTOMLEFTCORNER_SYM=11;
	public static final int BOTTOMLEFT_SYM=12;
	public static final int BOTTOMRIGHTCORNER_SYM=13;
	public static final int BOTTOMRIGHT_SYM=14;
	public static final int C=15;
	public static final int CDC=16;
	public static final int CDO=17;
	public static final int CHARSET_SYM=18;
	public static final int COLON=19;
	public static final int COMMA=20;
	public static final int COMMENT=21;
	public static final int CONTAINS=22;
	public static final int COUNTER_STYLE_SYM=23;
	public static final int CP_DOTS=24;
	public static final int CP_EQ=25;
	public static final int CP_NOT_EQ=26;
	public static final int D=27;
	public static final int DASHMATCH=28;
	public static final int DCOLON=29;
	public static final int DIMENSION=30;
	public static final int DOT=31;
	public static final int E=32;
	public static final int EMS=33;
	public static final int ENDS=34;
	public static final int ESCAPE=35;
	public static final int EXCLAMATION_MARK=36;
	public static final int EXS=37;
	public static final int F=38;
	public static final int FONT_FACE_SYM=39;
	public static final int FREQ=40;
	public static final int G=41;
	public static final int GEN=42;
	public static final int GREATER=43;
	public static final int GREATER_OR_EQ=44;
	public static final int H=45;
	public static final int HASH=46;
	public static final int HASH_SYMBOL=47;
	public static final int HEXCHAR=48;
	public static final int I=49;
	public static final int IDENT=50;
	public static final int IMPORTANT_SYM=51;
	public static final int IMPORT_SYM=52;
	public static final int INCLUDES=53;
	public static final int INVALID=54;
	public static final int J=55;
	public static final int K=56;
	public static final int L=57;
	public static final int LBRACE=58;
	public static final int LBRACKET=59;
	public static final int LEFTBOTTOM_SYM=60;
	public static final int LEFTMIDDLE_SYM=61;
	public static final int LEFTTOP_SYM=62;
	public static final int LENGTH=63;
	public static final int LESS=64;
	public static final int LESS_AND=65;
	public static final int LESS_JS_STRING=66;
	public static final int LESS_OR_EQ=67;
	public static final int LESS_REST=68;
	public static final int LINE_COMMENT=69;
	public static final int LPAREN=70;
	public static final int M=71;
	public static final int MEDIA_SYM=72;
	public static final int MINUS=73;
	public static final int MOZ_DOCUMENT_SYM=74;
	public static final int MOZ_DOMAIN=75;
	public static final int MOZ_REGEXP=76;
	public static final int MOZ_URL_PREFIX=77;
	public static final int N=78;
	public static final int NAME=79;
	public static final int NAMESPACE_SYM=80;
	public static final int NL=81;
	public static final int NMCHAR=82;
	public static final int NMSTART=83;
	public static final int NONASCII=84;
	public static final int NOT=85;
	public static final int NUMBER=86;
	public static final int O=87;
	public static final int OPEQ=88;
	public static final int P=89;
	public static final int PAGE_SYM=90;
	public static final int PERCENTAGE=91;
	public static final int PERCENTAGE_SYMBOL=92;
	public static final int PIPE=93;
	public static final int PLUS=94;
	public static final int Q=95;
	public static final int R=96;
	public static final int RBRACE=97;
	public static final int RBRACKET=98;
	public static final int REM=99;
	public static final int RESOLUTION=100;
	public static final int RIGHTBOTTOM_SYM=101;
	public static final int RIGHTMIDDLE_SYM=102;
	public static final int RIGHTTOP_SYM=103;
	public static final int RPAREN=104;
	public static final int S=105;
	public static final int SASS_AT_ROOT=106;
	public static final int SASS_CONTENT=107;
	public static final int SASS_DEBUG=108;
	public static final int SASS_DEFAULT=109;
	public static final int SASS_EACH=110;
	public static final int SASS_ELSE=111;
	public static final int SASS_ELSEIF=112;
	public static final int SASS_ERROR=113;
	public static final int SASS_EXTEND=114;
	public static final int SASS_EXTEND_ONLY_SELECTOR=115;
	public static final int SASS_FOR=116;
	public static final int SASS_FUNCTION=117;
	public static final int SASS_GLOBAL=118;
	public static final int SASS_IF=119;
	public static final int SASS_INCLUDE=120;
	public static final int SASS_MIXIN=121;
	public static final int SASS_OPTIONAL=122;
	public static final int SASS_RETURN=123;
	public static final int SASS_VAR=124;
	public static final int SASS_WARN=125;
	public static final int SASS_WHILE=126;
	public static final int SEMI=127;
	public static final int SOLIDUS=128;
	public static final int STAR=129;
	public static final int STRING=130;
	public static final int SUPPORTS_SYM=131;
	public static final int T=132;
	public static final int TILDE=133;
	public static final int TIME=134;
	public static final int TOPCENTER_SYM=135;
	public static final int TOPLEFTCORNER_SYM=136;
	public static final int TOPLEFT_SYM=137;
	public static final int TOPRIGHTCORNER_SYM=138;
	public static final int TOPRIGHT_SYM=139;
	public static final int U=140;
	public static final int UNICODE=141;
	public static final int URI=142;
	public static final int URL=143;
	public static final int V=144;
	public static final int VARIABLE=145;
	public static final int W=146;
	public static final int WEBKIT_KEYFRAMES_SYM=147;
	public static final int WS=148;
	public static final int X=149;
	public static final int Y=150;
	public static final int Z=151;

	// delegates
	public Parser[] getDelegates() {
		return new Parser[] {};
	}

	// delegators


	public static final String[] ruleNames = new String[] {
		"invalidRule", "cp_mixin_call", "sass_control_block", "mediaQuery", "bodyItem", 
		"synpred46_Css3", "synpred5_Css3", "cp_mixin_call_arg", "namespacePrefixName", 
		"ws", "synpred36_Css3", "supportsAtRule", "cp_variable", "sass_while", 
		"namespace", "synpred27_Css3", "mediaQueryOperator", "syncTo_SEMI", "synpred26_Css3", 
		"synpred16_Css3", "moz_document_function", "pseudoPage", "namespaces", 
		"cp_term_symbol", "sass_each", "charSetValue", "slAttributeName", "supportsDecl", 
		"declarations", "synpred11_Css3", "cp_expression", "cp_expression_operator", 
		"less_when", "charSet", "selectorsGroup", "generic_at_rule", "less_condition_operator", 
		"media", "synpred45_Css3", "synpred28_Css3", "declaration", "syncToFollow", 
		"less_condition", "moz_document", "propertyDeclaration", "synpred10_Css3", 
		"vendorAtRule", "cp_expression_list", "synpred17_Css3", "prio", "cp_args_list", 
		"synpred32_Css3", "imports", "slAttributeValue", "synpred43_Css3", "cp_math_expressions", 
		"less_fn_name", "synpred9_Css3", "typeSelector", "sass_extend", "synpred31_Css3", 
		"functionName", "key_or", "cp_mixin_declaration", "rule", "synpred38_Css3", 
		"operator", "sass_each_variables", "resourceIdentifier", "webkitKeyframes", 
		"supportsFeature", "expression", "synpred3_Css3", "cp_propertyValue", 
		"styleSheet", "sass_control_expression", "synpred20_Css3", "synpred52_Css3", 
		"synpred24_Css3", "synpred44_Css3", "synpred12_Css3", "less_function_in_condition", 
		"esPred", "property", "sass_function_declaration", "synpred41_Css3", "webkitKeyframeSelectors", 
		"synpred7_Css3", "syncTo_RBRACE", "synpred6_Css3", "combinator", "synpred2_Css3", 
		"fontFace", "synpred25_Css3", "synpred51_Css3", "sass_map", "synpred30_Css3", 
		"expressionPredicate", "mediaType", "namespacePrefix", "elementSubsequent", 
		"cp_math_expression_atom", "less_selector_interpolation", "function", 
		"synpred37_Css3", "cp_mixin_call_args", "simpleSelectorSequence", "pseudo", 
		"supportsConjunction", "sass_debug", "unaryOperator", "sass_content", 
		"webkitKeyframesBlock", "slAttribute", "fnAttributes", "atRuleId", "cp_variable_declaration", 
		"cp_expression_atom", "mediaFeature", "fnAttributeValue", "sass_if", "importItem", 
		"propertyValue", "sass_map_pair", "cp_math_expression", "cp_mixin_name", 
		"sass_nested_properties", "fnAttribute", "synpred42_Css3", "sass_control", 
		"selector", "sass_interpolation_expression_var", "cp_arg", "synpred21_Css3", 
		"synpred49_Css3", "key_only", "fnAttributeName", "sass_function_return", 
		"cssId", "cssClass", "sass_selector_interpolation_exp", "synpred23_Css3", 
		"synpred13_Css3", "sass_function_name", "at_rule", "mediaQueryList", "sass_extend_only_selector", 
		"sass_map_pairs", "sass_else", "synpred50_Css3", "synpred34_Css3", "supportsCondition", 
		"margin_sym", "synpred1_Css3", "key_and", "less_selector_interpolation_exp", 
		"mediaExpression", "cp_mixin_block", "supportsDisjunction", "elementName", 
		"hexColor", "synpred48_Css3", "mediaBody", "sass_for", "synpred40_Css3", 
		"synpred14_Css3", "synpred47_Css3", "mediaFeatureValue", "supportsInParens", 
		"counterStyle", "supportsWithOperator", "synpred33_Css3", "body", "page", 
		"synpred39_Css3", "less_import_types", "synpred18_Css3", "synpred19_Css3", 
		"margin", "synpred4_Css3", "mediaBodyItem", "sass_error", "term", "sass_map_name", 
		"less_mixin_guarded", "synpred8_Css3", "synpred22_Css3", "synpred35_Css3", 
		"syncToDeclarationsRule", "synpred15_Css3", "synpred29_Css3"
	};

	public static final boolean[] decisionCanBacktrack = new boolean[] {
		false, // invalid decision
		false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, true, false, false, false, false, 
		    true, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, false, true, false, false, false, 
		    false, false, false, false, true, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, true, false, false, false, true, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, true, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, true, false, false, true, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, true, false, false, true, false, false, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, true, false, false, 
		    false, false, false, true, false, false, true, false, false, false, 
		    false, false, false, true, false, false, false, true, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    true, false, false, false, true, false, false, false, false, false, 
		    false, false, false, false, false, true, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false, false, false, false, false, false, false, false, false, false, 
		    false
	};

 
	public int ruleLevel = 0;
	public int getRuleLevel() { return ruleLevel; }
	public void incRuleLevel() { ruleLevel++; }
	public void decRuleLevel() { ruleLevel--; }
	public Css3Parser(TokenStream input) {
		this(input, DebugEventSocketProxy.DEFAULT_DEBUGGER_PORT, new RecognizerSharedState());
	}
	public Css3Parser(TokenStream input, int port, RecognizerSharedState state) {
		super(input, state);
		DebugEventSocketProxy proxy =
			new DebugEventSocketProxy(this, port, null);

		setDebugListener(proxy);
		try {
			proxy.handshake();
		}
		catch (IOException ioe) {
			reportError(ioe);
		}
	}

	public Css3Parser(TokenStream input, DebugEventListener dbg) {
		super(input, dbg, new RecognizerSharedState());
	}

	protected boolean evalPredicate(boolean result, String predicate) {
		dbg.semanticPredicate(result, predicate);
		return result;
	}

	@Override public String[] getTokenNames() { return Css3Parser.tokenNames; }
	@Override public String getGrammarFileName() { return "Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g"; }



	    protected boolean isLessSource() {
	        return false;
	    }

	    protected boolean isScssSource() {
	        return false;
	    }

	    private boolean isCssPreprocessorSource() {
	        return isLessSource() || isScssSource();
	    }

	    private boolean tokenNameEquals(String tokenImage) {
	        return tokenImage.equalsIgnoreCase(input.LT(1).getText());
	    }

	    private boolean tokenNameIs(String[] tokens) {
	        for(String tokenImage : tokens) {
	            if(tokenImage.equalsIgnoreCase(input.LT(1).getText())) {
	                return true;
	            }
	        }
	        return false;
	    }

	    private boolean tokenNameStartsWith(String prefix) {
	        return input.LT(1).getText() != null
	            && input.LT(1).getText().startsWith(prefix);
	    }

	/**
	     * Use the current stacked followset to work out the valid tokens that
	     * can follow on from the current point in the parse, then recover by
	     * eating tokens that are not a member of the follow set we compute.
	     *
	     * This method is used whenever we wish to force a sync, even though
	     * the parser has not yet checked LA(1) for alt selection. This is useful
	     * in situations where only a subset of tokens can begin a new construct
	     * (such as the start of a new statement in a block) and we want to
	     * proactively detect garbage so that the current rule does not exit on
	     * on an exception.
	     *
	     * We could override recover() to make this the default behavior but that
	     * is too much like using a sledge hammer to crack a nut. We want finer
	     * grained control of the recovery and error mechanisms.
	     */
	    protected void syncToSet()
	    {
	        // Compute the followset that is in context wherever we are in the
	        // rule chain/stack
	        //
	         BitSet follow = state.following[state._fsp]; //computeContextSensitiveRuleFOLLOW();

	         syncToSet(follow);
	    }

	    protected void syncToSet(BitSet follow)
	    {
	        int mark = -1;

	        //create error-recovery node
	        dbg.enterRule(getGrammarFileName(), "recovery");

	        try {

	            mark = input.mark();

	            // Consume all tokens in the stream until we find a member of the follow
	            // set, which means the next production should be guaranteed to be happy.
	            //
	            while (! follow.member(input.LA(1)) ) {

	                if  (input.LA(1) == Token.EOF) {

	                    // Looks like we didn't find anything at all that can help us here
	                    // so we need to rewind to where we were and let normal error handling
	                    // bail out.
	                    //
	                    input.rewind();
	                    mark = -1;
	                    return;
	                }
	                input.consume();

	                // Now here, because you are consuming some tokens, yu will probably want
	                // to raise an error message such as "Spurious elements after the class member were discarded"
	                // using whatever your override of displayRecognitionError() routine does to record
	                // error messages. The exact error my depend on context etc.
	                //
	            }
	        } catch (Exception e) {

	          // Just ignore any errors here, we will just let the recognizer
	          // try to resync as normal - something must be very screwed.
	          //
	        }
	        finally {
	            dbg.exitRule(getGrammarFileName(), "recovery");

	            // Always release the mark we took
	            //
	            if  (mark != -1) {
	                input.release(mark);
	            }
	        }
	    }

	    /**
	         * synces to next RBRACE "}" taking nesting into account
	         */
	        protected void syncToRBRACE(int nest)
	            {

	                int mark = -1;
	                //create error-recovery node
	                //dbg.enterRule(getGrammarFileName(), "recovery");

	                try {
	                    mark = input.mark();
	                    for(;;) {
	                        //read char
	                        int c = input.LA(1);

	                        switch(c) {
	                            case Token.EOF:
	                                input.rewind();
	                                mark = -1;
	                                return ;
	                            case Css3Lexer.LBRACE:
	                                nest++;
	                                break;
	                            case Css3Lexer.RBRACE:
	                                nest--;
	                                if(nest == 0) {
	                                    //do not eat the final RBRACE
	                                    return ;
	                                }
	                        }

	                        input.consume();

	                    }

	                } catch (Exception e) {

	                  // Just ignore any errors here, we will just let the recognizer
	                  // try to resync as normal - something must be very screwed.
	                  //
	                }
	                finally {
	                    if  (mark != -1) {
	                        input.release(mark);
	                    }
	                    //dbg.exitRule(getGrammarFileName(), "recovery");
	                }
	            }




	// $ANTLR start "styleSheet"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:277:1: styleSheet : ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF ;
	public final void styleSheet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "styleSheet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(277, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:278:5: ( ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:279:6: ( ws )? ( charSet ( ws )? )? ( imports )? ( namespaces )? ( body )? EOF
			{
			dbg.location(279,6);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:279:6: ( ws )?
			int alt1=2;
			try { dbg.enterSubRule(1);
			try { dbg.enterDecision(1, decisionCanBacktrack[1]);

			int LA1_0 = input.LA(1);
			if ( (LA1_0==COMMENT||LA1_0==NL||LA1_0==WS) ) {
				alt1=1;
			}
			} finally {dbg.exitDecision(1);}

			switch (alt1) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:279:6: ws
					{
					dbg.location(279,6);
					pushFollow(FOLLOW_ws_in_styleSheet99);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(1);}
			dbg.location(280,6);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:280:6: ( charSet ( ws )? )?
			int alt3=2;
			try { dbg.enterSubRule(3);
			try { dbg.enterDecision(3, decisionCanBacktrack[3]);

			try {
				isCyclicDecision = true;
				alt3 = dfa3.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(3);}

			switch (alt3) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:280:8: charSet ( ws )?
					{
					dbg.location(280,8);
					pushFollow(FOLLOW_charSet_in_styleSheet109);
					charSet();
					state._fsp--;
					if (state.failed) return;dbg.location(280,16);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:280:16: ( ws )?
					int alt2=2;
					try { dbg.enterSubRule(2);
					try { dbg.enterDecision(2, decisionCanBacktrack[2]);

					int LA2_0 = input.LA(1);
					if ( (LA2_0==COMMENT||LA2_0==NL||LA2_0==WS) ) {
						alt2=1;
					}
					} finally {dbg.exitDecision(2);}

					switch (alt2) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:280:16: ws
							{
							dbg.location(280,16);
							pushFollow(FOLLOW_ws_in_styleSheet111);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(2);}

					}
					break;

			}
			} finally {dbg.exitSubRule(3);}
			dbg.location(281,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:281:9: ( imports )?
			int alt4=2;
			try { dbg.enterSubRule(4);
			try { dbg.enterDecision(4, decisionCanBacktrack[4]);

			int LA4_0 = input.LA(1);
			if ( (LA4_0==IMPORT_SYM) ) {
				int LA4_1 = input.LA(2);
				if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
					alt4=1;
				}
			}
			} finally {dbg.exitDecision(4);}

			switch (alt4) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:281:9: imports
					{
					dbg.location(281,9);
					pushFollow(FOLLOW_imports_in_styleSheet125);
					imports();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(4);}
			dbg.location(282,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:282:9: ( namespaces )?
			int alt5=2;
			try { dbg.enterSubRule(5);
			try { dbg.enterDecision(5, decisionCanBacktrack[5]);

			try {
				isCyclicDecision = true;
				alt5 = dfa5.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(5);}

			switch (alt5) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:282:9: namespaces
					{
					dbg.location(282,9);
					pushFollow(FOLLOW_namespaces_in_styleSheet136);
					namespaces();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(5);}
			dbg.location(283,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:283:9: ( body )?
			int alt6=2;
			try { dbg.enterSubRule(6);
			try { dbg.enterDecision(6, decisionCanBacktrack[6]);

			int LA6_0 = input.LA(1);
			if ( ((LA6_0 >= AT_IDENT && LA6_0 <= AT_SIGN)||(LA6_0 >= BOTTOMCENTER_SYM && LA6_0 <= BOTTOMRIGHT_SYM)||(LA6_0 >= CHARSET_SYM && LA6_0 <= COLON)||LA6_0==COUNTER_STYLE_SYM||(LA6_0 >= DCOLON && LA6_0 <= DOT)||LA6_0==FONT_FACE_SYM||(LA6_0 >= GEN && LA6_0 <= GREATER)||(LA6_0 >= HASH && LA6_0 <= HASH_SYMBOL)||LA6_0==IDENT||LA6_0==IMPORT_SYM||(LA6_0 >= LBRACKET && LA6_0 <= LEFTTOP_SYM)||LA6_0==LESS_AND||(LA6_0 >= MEDIA_SYM && LA6_0 <= MOZ_DOCUMENT_SYM)||LA6_0==NAMESPACE_SYM||LA6_0==PAGE_SYM||(LA6_0 >= PIPE && LA6_0 <= PLUS)||(LA6_0 >= RIGHTBOTTOM_SYM && LA6_0 <= RIGHTTOP_SYM)||(LA6_0 >= SASS_AT_ROOT && LA6_0 <= SASS_DEBUG)||(LA6_0 >= SASS_EACH && LA6_0 <= SASS_ELSE)||(LA6_0 >= SASS_EXTEND && LA6_0 <= SASS_FUNCTION)||(LA6_0 >= SASS_IF && LA6_0 <= SASS_MIXIN)||(LA6_0 >= SASS_RETURN && LA6_0 <= SEMI)||LA6_0==STAR||LA6_0==SUPPORTS_SYM||LA6_0==TILDE||(LA6_0 >= TOPCENTER_SYM && LA6_0 <= TOPRIGHT_SYM)||LA6_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt6=1;
			}
			} finally {dbg.exitDecision(6);}

			switch (alt6) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:283:9: body
					{
					dbg.location(283,9);
					pushFollow(FOLLOW_body_in_styleSheet147);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(6);}
			dbg.location(284,6);
			match(input,EOF,FOLLOW_EOF_in_styleSheet155); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(285, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "styleSheet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "styleSheet"



	// $ANTLR start "namespaces"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:287:1: namespaces : ( namespace ( ws )? )+ ;
	public final void namespaces() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespaces");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(287, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:288:2: ( ( namespace ( ws )? )+ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:289:2: ( namespace ( ws )? )+
			{
			dbg.location(289,2);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:289:2: ( namespace ( ws )? )+
			int cnt8=0;
			try { dbg.enterSubRule(8);

			loop8:
			while (true) {
				int alt8=2;
				try { dbg.enterDecision(8, decisionCanBacktrack[8]);

				try {
					isCyclicDecision = true;
					alt8 = dfa8.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(8);}

				switch (alt8) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:289:4: namespace ( ws )?
					{
					dbg.location(289,4);
					pushFollow(FOLLOW_namespace_in_namespaces172);
					namespace();
					state._fsp--;
					if (state.failed) return;dbg.location(289,14);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:289:14: ( ws )?
					int alt7=2;
					try { dbg.enterSubRule(7);
					try { dbg.enterDecision(7, decisionCanBacktrack[7]);

					int LA7_0 = input.LA(1);
					if ( (LA7_0==COMMENT||LA7_0==NL||LA7_0==WS) ) {
						alt7=1;
					}
					} finally {dbg.exitDecision(7);}

					switch (alt7) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:289:14: ws
							{
							dbg.location(289,14);
							pushFollow(FOLLOW_ws_in_namespaces174);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(7);}

					}
					break;

				default :
					if ( cnt8 >= 1 ) break loop8;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(8, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt8++;
			}
			} finally {dbg.exitSubRule(8);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(290, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespaces");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespaces"



	// $ANTLR start "namespace"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:292:1: namespace : NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI ;
	public final void namespace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(292, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:3: ( NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:5: NAMESPACE_SYM ( ws )? ( namespacePrefixName ( ws )? )? resourceIdentifier ( ws )? SEMI
			{
			dbg.location(293,5);
			match(input,NAMESPACE_SYM,FOLLOW_NAMESPACE_SYM_in_namespace190); if (state.failed) return;dbg.location(293,19);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:19: ( ws )?
			int alt9=2;
			try { dbg.enterSubRule(9);
			try { dbg.enterDecision(9, decisionCanBacktrack[9]);

			int LA9_0 = input.LA(1);
			if ( (LA9_0==COMMENT||LA9_0==NL||LA9_0==WS) ) {
				alt9=1;
			}
			} finally {dbg.exitDecision(9);}

			switch (alt9) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:19: ws
					{
					dbg.location(293,19);
					pushFollow(FOLLOW_ws_in_namespace192);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(9);}
			dbg.location(293,23);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:23: ( namespacePrefixName ( ws )? )?
			int alt11=2;
			try { dbg.enterSubRule(11);
			try { dbg.enterDecision(11, decisionCanBacktrack[11]);

			int LA11_0 = input.LA(1);
			if ( (LA11_0==IDENT) ) {
				alt11=1;
			}
			} finally {dbg.exitDecision(11);}

			switch (alt11) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:24: namespacePrefixName ( ws )?
					{
					dbg.location(293,24);
					pushFollow(FOLLOW_namespacePrefixName_in_namespace196);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;dbg.location(293,44);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:44: ( ws )?
					int alt10=2;
					try { dbg.enterSubRule(10);
					try { dbg.enterDecision(10, decisionCanBacktrack[10]);

					int LA10_0 = input.LA(1);
					if ( (LA10_0==COMMENT||LA10_0==NL||LA10_0==WS) ) {
						alt10=1;
					}
					} finally {dbg.exitDecision(10);}

					switch (alt10) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:44: ws
							{
							dbg.location(293,44);
							pushFollow(FOLLOW_ws_in_namespace198);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(10);}

					}
					break;

			}
			} finally {dbg.exitSubRule(11);}
			dbg.location(293,50);
			pushFollow(FOLLOW_resourceIdentifier_in_namespace203);
			resourceIdentifier();
			state._fsp--;
			if (state.failed) return;dbg.location(293,69);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:69: ( ws )?
			int alt12=2;
			try { dbg.enterSubRule(12);
			try { dbg.enterDecision(12, decisionCanBacktrack[12]);

			int LA12_0 = input.LA(1);
			if ( (LA12_0==COMMENT||LA12_0==NL||LA12_0==WS) ) {
				alt12=1;
			}
			} finally {dbg.exitDecision(12);}

			switch (alt12) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:293:69: ws
					{
					dbg.location(293,69);
					pushFollow(FOLLOW_ws_in_namespace205);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(12);}
			dbg.location(293,73);
			match(input,SEMI,FOLLOW_SEMI_in_namespace208); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(294, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespace"



	// $ANTLR start "namespacePrefixName"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:296:1: namespacePrefixName : IDENT ;
	public final void namespacePrefixName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefixName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(296, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:297:3: ( IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:297:5: IDENT
			{
			dbg.location(297,5);
			match(input,IDENT,FOLLOW_IDENT_in_namespacePrefixName221); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(298, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefixName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefixName"



	// $ANTLR start "resourceIdentifier"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:300:1: resourceIdentifier : ( STRING | URI );
	public final void resourceIdentifier() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "resourceIdentifier");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(300, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:301:3: ( STRING | URI )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(301,3);
			if ( input.LA(1)==STRING||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(302, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "resourceIdentifier");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "resourceIdentifier"



	// $ANTLR start "charSet"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:304:1: charSet : CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI ;
	public final void charSet() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSet");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(304, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:305:5: ( CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:305:9: CHARSET_SYM ( ws )? charSetValue ( ws )? SEMI
			{
			dbg.location(305,9);
			match(input,CHARSET_SYM,FOLLOW_CHARSET_SYM_in_charSet255); if (state.failed) return;dbg.location(305,21);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:305:21: ( ws )?
			int alt13=2;
			try { dbg.enterSubRule(13);
			try { dbg.enterDecision(13, decisionCanBacktrack[13]);

			int LA13_0 = input.LA(1);
			if ( (LA13_0==COMMENT||LA13_0==NL||LA13_0==WS) ) {
				alt13=1;
			}
			} finally {dbg.exitDecision(13);}

			switch (alt13) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:305:21: ws
					{
					dbg.location(305,21);
					pushFollow(FOLLOW_ws_in_charSet257);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(13);}
			dbg.location(305,25);
			pushFollow(FOLLOW_charSetValue_in_charSet260);
			charSetValue();
			state._fsp--;
			if (state.failed) return;dbg.location(305,38);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:305:38: ( ws )?
			int alt14=2;
			try { dbg.enterSubRule(14);
			try { dbg.enterDecision(14, decisionCanBacktrack[14]);

			int LA14_0 = input.LA(1);
			if ( (LA14_0==COMMENT||LA14_0==NL||LA14_0==WS) ) {
				alt14=1;
			}
			} finally {dbg.exitDecision(14);}

			switch (alt14) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:305:38: ws
					{
					dbg.location(305,38);
					pushFollow(FOLLOW_ws_in_charSet262);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(14);}
			dbg.location(305,42);
			match(input,SEMI,FOLLOW_SEMI_in_charSet265); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(306, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSet");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSet"



	// $ANTLR start "charSetValue"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:308:1: charSetValue : STRING ;
	public final void charSetValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "charSetValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(308, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:309:2: ( STRING )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:309:4: STRING
			{
			dbg.location(309,4);
			match(input,STRING,FOLLOW_STRING_in_charSetValue279); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(310, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "charSetValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "charSetValue"



	// $ANTLR start "imports"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:312:1: imports : ( importItem ( ws )? SEMI ( ws )? )+ ;
	public final void imports() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "imports");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(312, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:313:2: ( ( importItem ( ws )? SEMI ( ws )? )+ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:2: ( importItem ( ws )? SEMI ( ws )? )+
			{
			dbg.location(314,2);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:2: ( importItem ( ws )? SEMI ( ws )? )+
			int cnt17=0;
			try { dbg.enterSubRule(17);

			loop17:
			while (true) {
				int alt17=2;
				try { dbg.enterDecision(17, decisionCanBacktrack[17]);

				int LA17_0 = input.LA(1);
				if ( (LA17_0==IMPORT_SYM) ) {
					int LA17_29 = input.LA(2);
					if ( (!(evalPredicate(((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))),""))) ) {
						alt17=1;
					}

				}

				} finally {dbg.exitDecision(17);}

				switch (alt17) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:4: importItem ( ws )? SEMI ( ws )?
					{
					dbg.location(314,4);
					pushFollow(FOLLOW_importItem_in_imports293);
					importItem();
					state._fsp--;
					if (state.failed) return;dbg.location(314,15);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:15: ( ws )?
					int alt15=2;
					try { dbg.enterSubRule(15);
					try { dbg.enterDecision(15, decisionCanBacktrack[15]);

					int LA15_0 = input.LA(1);
					if ( (LA15_0==COMMENT||LA15_0==NL||LA15_0==WS) ) {
						alt15=1;
					}
					} finally {dbg.exitDecision(15);}

					switch (alt15) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:15: ws
							{
							dbg.location(314,15);
							pushFollow(FOLLOW_ws_in_imports295);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(15);}
					dbg.location(314,19);
					match(input,SEMI,FOLLOW_SEMI_in_imports298); if (state.failed) return;dbg.location(314,24);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:24: ( ws )?
					int alt16=2;
					try { dbg.enterSubRule(16);
					try { dbg.enterDecision(16, decisionCanBacktrack[16]);

					int LA16_0 = input.LA(1);
					if ( (LA16_0==COMMENT||LA16_0==NL||LA16_0==WS) ) {
						alt16=1;
					}
					} finally {dbg.exitDecision(16);}

					switch (alt16) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:314:24: ws
							{
							dbg.location(314,24);
							pushFollow(FOLLOW_ws_in_imports300);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(16);}

					}
					break;

				default :
					if ( cnt17 >= 1 ) break loop17;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(17, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt17++;
			}
			} finally {dbg.exitSubRule(17);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(315, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "imports");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "imports"



	// $ANTLR start "importItem"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:317:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );
	public final void importItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "importItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(317, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:318:5: ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? )
			int alt32=3;
			try { dbg.enterDecision(32, decisionCanBacktrack[32]);

			try {
				isCyclicDecision = true;
				alt32 = dfa32.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(32);}

			switch (alt32) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:9: IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(319,9);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem326); if (state.failed) return;dbg.location(319,20);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:20: ( ws )?
					int alt18=2;
					try { dbg.enterSubRule(18);
					try { dbg.enterDecision(18, decisionCanBacktrack[18]);

					int LA18_0 = input.LA(1);
					if ( (LA18_0==COMMENT||LA18_0==NL||LA18_0==WS) ) {
						alt18=1;
					}
					} finally {dbg.exitDecision(18);}

					switch (alt18) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:20: ws
							{
							dbg.location(319,20);
							pushFollow(FOLLOW_ws_in_importItem328);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(18);}
					dbg.location(319,24);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem331);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(319,43);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:43: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt20=2;
					try { dbg.enterSubRule(20);
					try { dbg.enterDecision(20, decisionCanBacktrack[20]);

					int LA20_0 = input.LA(1);
					if ( (LA20_0==COMMENT||LA20_0==NL||LA20_0==WS) ) {
						int LA20_1 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==IDENT) ) {
						int LA20_2 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==NOT) && (synpred1_Css3())) {
						alt20=1;
					}
					else if ( (LA20_0==GEN) ) {
						int LA20_4 = input.LA(2);
						if ( (synpred1_Css3()) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==HASH_SYMBOL) ) {
						int LA20_5 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==LPAREN) && (synpred1_Css3())) {
						alt20=1;
					}
					else if ( (LA20_0==SASS_MIXIN) ) {
						int LA20_7 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_VAR) ) {
						int LA20_8 = input.LA(2);
						if ( (((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==AT_IDENT) ) {
						int LA20_14 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_INCLUDE) ) {
						int LA20_15 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_AT_ROOT) ) {
						int LA20_16 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_DEBUG||LA20_0==SASS_WARN) ) {
						int LA20_17 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_IF) ) {
						int LA20_28 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_FOR) ) {
						int LA20_29 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_EACH) ) {
						int LA20_30 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_WHILE) ) {
						int LA20_31 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_CONTENT) ) {
						int LA20_32 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==IMPORT_SYM) ) {
						int LA20_33 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==PAGE_SYM) ) {
						int LA20_34 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==FONT_FACE_SYM) ) {
						int LA20_35 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==MOZ_DOCUMENT_SYM) ) {
						int LA20_36 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA20_37 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==MEDIA_SYM) ) {
						int LA20_38 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_EXTEND) ) {
						int LA20_39 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==COUNTER_STYLE_SYM) ) {
						int LA20_41 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( (LA20_0==SASS_FUNCTION) ) {
						int LA20_43 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					else if ( ((LA20_0 >= BOTTOMCENTER_SYM && LA20_0 <= BOTTOMRIGHT_SYM)||LA20_0==CHARSET_SYM||(LA20_0 >= LEFTBOTTOM_SYM && LA20_0 <= LEFTTOP_SYM)||LA20_0==NAMESPACE_SYM||(LA20_0 >= RIGHTBOTTOM_SYM && LA20_0 <= RIGHTTOP_SYM)||LA20_0==SASS_ELSE||LA20_0==SASS_RETURN||(LA20_0 >= TOPCENTER_SYM && LA20_0 <= TOPRIGHT_SYM)) ) {
						int LA20_44 = input.LA(2);
						if ( ((synpred1_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt20=1;
						}
					}
					} finally {dbg.exitDecision(20);}

					switch (alt20) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:44: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(319,66);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:66: ( ws )?
							int alt19=2;
							try { dbg.enterSubRule(19);
							try { dbg.enterDecision(19, decisionCanBacktrack[19]);

							int LA19_0 = input.LA(1);
							if ( (LA19_0==COMMENT||LA19_0==NL||LA19_0==WS) ) {
								alt19=1;
							}
							} finally {dbg.exitDecision(19);}

							switch (alt19) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:66: ws
									{
									dbg.location(319,66);
									pushFollow(FOLLOW_ws_in_importItem341);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(19);}
							dbg.location(319,70);
							pushFollow(FOLLOW_mediaQueryList_in_importItem344);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(20);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:9: {...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(322,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isScssSource()");
					}dbg.location(322,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem377); if (state.failed) return;dbg.location(322,38);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:38: ( ws )?
					int alt21=2;
					try { dbg.enterSubRule(21);
					try { dbg.enterDecision(21, decisionCanBacktrack[21]);

					int LA21_0 = input.LA(1);
					if ( (LA21_0==COMMENT||LA21_0==NL||LA21_0==WS) ) {
						alt21=1;
					}
					} finally {dbg.exitDecision(21);}

					switch (alt21) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:38: ws
							{
							dbg.location(322,38);
							pushFollow(FOLLOW_ws_in_importItem379);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(21);}
					dbg.location(322,42);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem382);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(322,61);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*
					try { dbg.enterSubRule(24);

					loop24:
					while (true) {
						int alt24=2;
						try { dbg.enterDecision(24, decisionCanBacktrack[24]);

						try {
							isCyclicDecision = true;
							alt24 = dfa24.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(24);}

						switch (alt24) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:62: ( ws )? COMMA ( ws )? resourceIdentifier
							{
							dbg.location(322,62);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:62: ( ws )?
							int alt22=2;
							try { dbg.enterSubRule(22);
							try { dbg.enterDecision(22, decisionCanBacktrack[22]);

							int LA22_0 = input.LA(1);
							if ( (LA22_0==COMMENT||LA22_0==NL||LA22_0==WS) ) {
								alt22=1;
							}
							} finally {dbg.exitDecision(22);}

							switch (alt22) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:62: ws
									{
									dbg.location(322,62);
									pushFollow(FOLLOW_ws_in_importItem385);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(22);}
							dbg.location(322,66);
							match(input,COMMA,FOLLOW_COMMA_in_importItem388); if (state.failed) return;dbg.location(322,72);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:72: ( ws )?
							int alt23=2;
							try { dbg.enterSubRule(23);
							try { dbg.enterDecision(23, decisionCanBacktrack[23]);

							int LA23_0 = input.LA(1);
							if ( (LA23_0==COMMENT||LA23_0==NL||LA23_0==WS) ) {
								alt23=1;
							}
							} finally {dbg.exitDecision(23);}

							switch (alt23) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:72: ws
									{
									dbg.location(322,72);
									pushFollow(FOLLOW_ws_in_importItem390);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(23);}
							dbg.location(322,76);
							pushFollow(FOLLOW_resourceIdentifier_in_importItem393);
							resourceIdentifier();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop24;
						}
					}
					} finally {dbg.exitSubRule(24);}
					dbg.location(322,97);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:97: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt26=2;
					try { dbg.enterSubRule(26);
					try { dbg.enterDecision(26, decisionCanBacktrack[26]);

					int LA26_0 = input.LA(1);
					if ( (LA26_0==COMMENT||LA26_0==NL||LA26_0==WS) ) {
						int LA26_1 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==IDENT) ) {
						int LA26_2 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==NOT) && (synpred2_Css3())) {
						alt26=1;
					}
					else if ( (LA26_0==GEN) ) {
						int LA26_4 = input.LA(2);
						if ( (synpred2_Css3()) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==HASH_SYMBOL) ) {
						int LA26_5 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==LPAREN) && (synpred2_Css3())) {
						alt26=1;
					}
					else if ( (LA26_0==SASS_MIXIN) ) {
						int LA26_7 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_VAR) ) {
						int LA26_8 = input.LA(2);
						if ( (((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==AT_IDENT) ) {
						int LA26_14 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_INCLUDE) ) {
						int LA26_15 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_AT_ROOT) ) {
						int LA26_16 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_DEBUG||LA26_0==SASS_WARN) ) {
						int LA26_17 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_IF) ) {
						int LA26_28 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_FOR) ) {
						int LA26_29 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_EACH) ) {
						int LA26_30 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_WHILE) ) {
						int LA26_31 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_CONTENT) ) {
						int LA26_32 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==IMPORT_SYM) ) {
						int LA26_33 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==PAGE_SYM) ) {
						int LA26_34 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==FONT_FACE_SYM) ) {
						int LA26_35 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==MOZ_DOCUMENT_SYM) ) {
						int LA26_36 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA26_37 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==MEDIA_SYM) ) {
						int LA26_38 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_EXTEND) ) {
						int LA26_39 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==COUNTER_STYLE_SYM) ) {
						int LA26_41 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( (LA26_0==SASS_FUNCTION) ) {
						int LA26_43 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					else if ( ((LA26_0 >= BOTTOMCENTER_SYM && LA26_0 <= BOTTOMRIGHT_SYM)||LA26_0==CHARSET_SYM||(LA26_0 >= LEFTBOTTOM_SYM && LA26_0 <= LEFTTOP_SYM)||LA26_0==NAMESPACE_SYM||(LA26_0 >= RIGHTBOTTOM_SYM && LA26_0 <= RIGHTTOP_SYM)||LA26_0==SASS_ELSE||LA26_0==SASS_RETURN||(LA26_0 >= TOPCENTER_SYM && LA26_0 <= TOPRIGHT_SYM)) ) {
						int LA26_44 = input.LA(2);
						if ( ((synpred2_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
							alt26=1;
						}
					}
					} finally {dbg.exitDecision(26);}

					switch (alt26) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:98: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(322,120);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:120: ( ws )?
							int alt25=2;
							try { dbg.enterSubRule(25);
							try { dbg.enterDecision(25, decisionCanBacktrack[25]);

							int LA25_0 = input.LA(1);
							if ( (LA25_0==COMMENT||LA25_0==NL||LA25_0==WS) ) {
								alt25=1;
							}
							} finally {dbg.exitDecision(25);}

							switch (alt25) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:120: ws
									{
									dbg.location(322,120);
									pushFollow(FOLLOW_ws_in_importItem405);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(25);}
							dbg.location(322,124);
							pushFollow(FOLLOW_mediaQueryList_in_importItem408);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(26);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:9: {...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					{
					dbg.location(324,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "importItem", "isLessSource()");
					}dbg.location(324,27);
					match(input,IMPORT_SYM,FOLLOW_IMPORT_SYM_in_importItem432); if (state.failed) return;dbg.location(324,38);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:38: ( ws )?
					int alt27=2;
					try { dbg.enterSubRule(27);
					try { dbg.enterDecision(27, decisionCanBacktrack[27]);

					int LA27_0 = input.LA(1);
					if ( (LA27_0==COMMENT||LA27_0==NL||LA27_0==WS) ) {
						alt27=1;
					}
					} finally {dbg.exitDecision(27);}

					switch (alt27) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:38: ws
							{
							dbg.location(324,38);
							pushFollow(FOLLOW_ws_in_importItem434);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(27);}
					dbg.location(324,42);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:42: ( LPAREN less_import_types RPAREN ( ws )? )?
					int alt29=2;
					try { dbg.enterSubRule(29);
					try { dbg.enterDecision(29, decisionCanBacktrack[29]);

					int LA29_0 = input.LA(1);
					if ( (LA29_0==LPAREN) ) {
						alt29=1;
					}
					} finally {dbg.exitDecision(29);}

					switch (alt29) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:43: LPAREN less_import_types RPAREN ( ws )?
							{
							dbg.location(324,43);
							match(input,LPAREN,FOLLOW_LPAREN_in_importItem438); if (state.failed) return;dbg.location(324,50);
							pushFollow(FOLLOW_less_import_types_in_importItem440);
							less_import_types();
							state._fsp--;
							if (state.failed) return;dbg.location(324,68);
							match(input,RPAREN,FOLLOW_RPAREN_in_importItem442); if (state.failed) return;dbg.location(324,75);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:75: ( ws )?
							int alt28=2;
							try { dbg.enterSubRule(28);
							try { dbg.enterDecision(28, decisionCanBacktrack[28]);

							int LA28_0 = input.LA(1);
							if ( (LA28_0==COMMENT||LA28_0==NL||LA28_0==WS) ) {
								alt28=1;
							}
							} finally {dbg.exitDecision(28);}

							switch (alt28) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:75: ws
									{
									dbg.location(324,75);
									pushFollow(FOLLOW_ws_in_importItem444);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(28);}

							}
							break;

					}
					} finally {dbg.exitSubRule(29);}
					dbg.location(324,81);
					pushFollow(FOLLOW_resourceIdentifier_in_importItem449);
					resourceIdentifier();
					state._fsp--;
					if (state.failed) return;dbg.location(324,100);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:100: ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )?
					int alt31=2;
					try { dbg.enterSubRule(31);
					try { dbg.enterDecision(31, decisionCanBacktrack[31]);

					int LA31_0 = input.LA(1);
					if ( (LA31_0==COMMENT||LA31_0==NL||LA31_0==WS) ) {
						int LA31_1 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==IDENT) ) {
						int LA31_2 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==NOT) && (synpred3_Css3())) {
						alt31=1;
					}
					else if ( (LA31_0==GEN) ) {
						int LA31_4 = input.LA(2);
						if ( (synpred3_Css3()) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==HASH_SYMBOL) ) {
						int LA31_5 = input.LA(2);
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==LPAREN) && (synpred3_Css3())) {
						alt31=1;
					}
					else if ( (LA31_0==SASS_MIXIN) ) {
						int LA31_7 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_VAR) ) {
						int LA31_8 = input.LA(2);
						if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==AT_IDENT) ) {
						int LA31_14 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_INCLUDE) ) {
						int LA31_15 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_AT_ROOT) ) {
						int LA31_16 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_DEBUG||LA31_0==SASS_WARN) ) {
						int LA31_17 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_IF) ) {
						int LA31_28 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_FOR) ) {
						int LA31_29 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_EACH) ) {
						int LA31_30 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_WHILE) ) {
						int LA31_31 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_CONTENT) ) {
						int LA31_32 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==IMPORT_SYM) ) {
						int LA31_33 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==PAGE_SYM) ) {
						int LA31_34 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==FONT_FACE_SYM) ) {
						int LA31_35 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==MOZ_DOCUMENT_SYM) ) {
						int LA31_36 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==WEBKIT_KEYFRAMES_SYM) ) {
						int LA31_37 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==MEDIA_SYM) ) {
						int LA31_38 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_EXTEND) ) {
						int LA31_39 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==COUNTER_STYLE_SYM) ) {
						int LA31_41 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( (LA31_0==SASS_FUNCTION) ) {
						int LA31_43 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					else if ( ((LA31_0 >= BOTTOMCENTER_SYM && LA31_0 <= BOTTOMRIGHT_SYM)||LA31_0==CHARSET_SYM||(LA31_0 >= LEFTBOTTOM_SYM && LA31_0 <= LEFTTOP_SYM)||LA31_0==NAMESPACE_SYM||(LA31_0 >= RIGHTBOTTOM_SYM && LA31_0 <= RIGHTTOP_SYM)||LA31_0==SASS_ELSE||LA31_0==SASS_RETURN||(LA31_0 >= TOPCENTER_SYM && LA31_0 <= TOPRIGHT_SYM)) ) {
						int LA31_44 = input.LA(2);
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred3_Css3())) ) {
							alt31=1;
						}
					}
					} finally {dbg.exitDecision(31);}

					switch (alt31) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:101: ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList
							{
							dbg.location(324,123);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:123: ( ws )?
							int alt30=2;
							try { dbg.enterSubRule(30);
							try { dbg.enterDecision(30, decisionCanBacktrack[30]);

							int LA30_0 = input.LA(1);
							if ( (LA30_0==COMMENT||LA30_0==NL||LA30_0==WS) ) {
								alt30=1;
							}
							} finally {dbg.exitDecision(30);}

							switch (alt30) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:123: ws
									{
									dbg.location(324,123);
									pushFollow(FOLLOW_ws_in_importItem459);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(30);}
							dbg.location(324,127);
							pushFollow(FOLLOW_mediaQueryList_in_importItem462);
							mediaQueryList();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(31);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(325, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "importItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "importItem"



	// $ANTLR start "media"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:326:1: media : MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void media() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "media");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(326, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:327:5: ( MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:327:7: MEDIA_SYM ( ws )? ( mediaQueryList ) ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(327,7);
			match(input,MEDIA_SYM,FOLLOW_MEDIA_SYM_in_media480); if (state.failed) return;dbg.location(327,17);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:327:17: ( ws )?
			int alt33=2;
			try { dbg.enterSubRule(33);
			try { dbg.enterDecision(33, decisionCanBacktrack[33]);

			int LA33_0 = input.LA(1);
			if ( (LA33_0==COMMENT||LA33_0==NL||LA33_0==WS) ) {
				alt33=1;
			}
			} finally {dbg.exitDecision(33);}

			switch (alt33) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:327:17: ws
					{
					dbg.location(327,17);
					pushFollow(FOLLOW_ws_in_media482);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(33);}
			dbg.location(328,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:328:5: ( mediaQueryList )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:329:10: mediaQueryList
			{
			dbg.location(329,10);
			pushFollow(FOLLOW_mediaQueryList_in_media500);
			mediaQueryList();
			state._fsp--;
			if (state.failed) return;
			}
			dbg.location(330,7);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:330:7: ( ws )?
			int alt34=2;
			try { dbg.enterSubRule(34);
			try { dbg.enterDecision(34, decisionCanBacktrack[34]);

			int LA34_0 = input.LA(1);
			if ( (LA34_0==COMMENT||LA34_0==NL||LA34_0==WS) ) {
				alt34=1;
			}
			} finally {dbg.exitDecision(34);}

			switch (alt34) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:330:7: ws
					{
					dbg.location(330,7);
					pushFollow(FOLLOW_ws_in_media508);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(34);}
			dbg.location(331,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_media515); if (state.failed) return;dbg.location(331,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:331:12: ( ws )?
			int alt35=2;
			try { dbg.enterSubRule(35);
			try { dbg.enterDecision(35, decisionCanBacktrack[35]);

			int LA35_0 = input.LA(1);
			if ( (LA35_0==COMMENT||LA35_0==NL||LA35_0==WS) ) {
				alt35=1;
			}
			} finally {dbg.exitDecision(35);}

			switch (alt35) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:331:12: ws
					{
					dbg.location(331,12);
					pushFollow(FOLLOW_ws_in_media517);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(35);}
			dbg.location(331,16);
			pushFollow(FOLLOW_syncToFollow_in_media520);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(332,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:332:9: ( mediaBody )?
			int alt36=2;
			try { dbg.enterSubRule(36);
			try { dbg.enterDecision(36, decisionCanBacktrack[36]);

			int LA36_0 = input.LA(1);
			if ( ((LA36_0 >= AT_IDENT && LA36_0 <= AT_SIGN)||(LA36_0 >= BOTTOMCENTER_SYM && LA36_0 <= BOTTOMRIGHT_SYM)||(LA36_0 >= CHARSET_SYM && LA36_0 <= COLON)||LA36_0==COUNTER_STYLE_SYM||(LA36_0 >= DCOLON && LA36_0 <= DOT)||LA36_0==FONT_FACE_SYM||(LA36_0 >= GEN && LA36_0 <= GREATER)||(LA36_0 >= HASH && LA36_0 <= HASH_SYMBOL)||LA36_0==IDENT||LA36_0==IMPORT_SYM||(LA36_0 >= LBRACKET && LA36_0 <= LEFTTOP_SYM)||LA36_0==LESS_AND||(LA36_0 >= MEDIA_SYM && LA36_0 <= MOZ_DOCUMENT_SYM)||LA36_0==NAMESPACE_SYM||LA36_0==PAGE_SYM||(LA36_0 >= PIPE && LA36_0 <= PLUS)||(LA36_0 >= RIGHTBOTTOM_SYM && LA36_0 <= RIGHTTOP_SYM)||(LA36_0 >= SASS_AT_ROOT && LA36_0 <= SASS_DEBUG)||(LA36_0 >= SASS_EACH && LA36_0 <= SASS_ELSE)||(LA36_0 >= SASS_EXTEND && LA36_0 <= SASS_FUNCTION)||(LA36_0 >= SASS_IF && LA36_0 <= SASS_MIXIN)||(LA36_0 >= SASS_RETURN && LA36_0 <= SEMI)||LA36_0==STAR||LA36_0==SUPPORTS_SYM||LA36_0==TILDE||(LA36_0 >= TOPCENTER_SYM && LA36_0 <= TOPRIGHT_SYM)||LA36_0==VARIABLE||LA36_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt36=1;
			}
			} finally {dbg.exitDecision(36);}

			switch (alt36) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:332:9: mediaBody
					{
					dbg.location(332,9);
					pushFollow(FOLLOW_mediaBody_in_media530);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(36);}
			dbg.location(333,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_media537); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(334, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "media");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "media"



	// $ANTLR start "mediaBody"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:336:1: mediaBody : ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ ;
	public final void mediaBody() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBody");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(336, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:337:5: ( ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:338:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			{
			dbg.location(338,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:338:5: ( ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) | ({...}? sass_extend ( ws | ( SEMI ) ) ) )+
			int cnt42=0;
			try { dbg.enterSubRule(42);

			loop42:
			while (true) {
				int alt42=4;
				try { dbg.enterDecision(42, decisionCanBacktrack[42]);

				switch ( input.LA(1) ) {
				case AT_IDENT:
				case AT_SIGN:
				case BOTTOMCENTER_SYM:
				case BOTTOMLEFTCORNER_SYM:
				case BOTTOMLEFT_SYM:
				case BOTTOMRIGHTCORNER_SYM:
				case BOTTOMRIGHT_SYM:
				case CHARSET_SYM:
				case COLON:
				case COUNTER_STYLE_SYM:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case FONT_FACE_SYM:
				case GEN:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case IDENT:
				case IMPORT_SYM:
				case LBRACKET:
				case LEFTBOTTOM_SYM:
				case LEFTMIDDLE_SYM:
				case LEFTTOP_SYM:
				case LESS_AND:
				case MEDIA_SYM:
				case MINUS:
				case MOZ_DOCUMENT_SYM:
				case NAMESPACE_SYM:
				case PAGE_SYM:
				case PIPE:
				case PLUS:
				case RIGHTBOTTOM_SYM:
				case RIGHTMIDDLE_SYM:
				case RIGHTTOP_SYM:
				case SASS_AT_ROOT:
				case SASS_CONTENT:
				case SASS_DEBUG:
				case SASS_EACH:
				case SASS_ELSE:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SASS_FOR:
				case SASS_FUNCTION:
				case SASS_IF:
				case SASS_INCLUDE:
				case SASS_MIXIN:
				case SASS_RETURN:
				case SASS_VAR:
				case SASS_WARN:
				case SASS_WHILE:
				case STAR:
				case SUPPORTS_SYM:
				case TILDE:
				case TOPCENTER_SYM:
				case TOPLEFTCORNER_SYM:
				case TOPLEFT_SYM:
				case TOPRIGHTCORNER_SYM:
				case TOPRIGHT_SYM:
				case VARIABLE:
				case WEBKIT_KEYFRAMES_SYM:
					{
					alt42=1;
					}
					break;
				case SASS_EXTEND:
					{
					int LA42_35 = input.LA(2);
					if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
						alt42=1;
					}
					else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
						alt42=3;
					}

					}
					break;
				case SEMI:
					{
					alt42=2;
					}
					break;
				}
				} finally {dbg.exitDecision(42);}

				switch (alt42) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(339,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:10: ( mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:12: mediaBodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(339,12);
					pushFollow(FOLLOW_mediaBodyItem_in_mediaBody571);
					mediaBodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(339,26);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt38=2;
					try { dbg.enterSubRule(38);
					try { dbg.enterDecision(38, decisionCanBacktrack[38]);

					try {
						isCyclicDecision = true;
						alt38 = dfa38.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(38);}

					switch (alt38) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:27: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(339,39);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:39: ( ws )?
							int alt37=2;
							try { dbg.enterSubRule(37);
							try { dbg.enterDecision(37, decisionCanBacktrack[37]);

							int LA37_0 = input.LA(1);
							if ( (LA37_0==COMMENT||LA37_0==NL||LA37_0==WS) ) {
								alt37=1;
							}
							} finally {dbg.exitDecision(37);}

							switch (alt37) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:39: ws
									{
									dbg.location(339,39);
									pushFollow(FOLLOW_ws_in_mediaBody581);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(37);}
							dbg.location(339,43);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody584); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(38);}
					dbg.location(339,50);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:50: ( ws )?
					int alt39=2;
					try { dbg.enterSubRule(39);
					try { dbg.enterDecision(39, decisionCanBacktrack[39]);

					int LA39_0 = input.LA(1);
					if ( (LA39_0==COMMENT||LA39_0==NL||LA39_0==WS) ) {
						alt39=1;
					}
					} finally {dbg.exitDecision(39);}

					switch (alt39) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:50: ws
							{
							dbg.location(339,50);
							pushFollow(FOLLOW_ws_in_mediaBody588);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(39);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:341:10: ( SEMI ( ws )? )
					{
					dbg.location(341,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:341:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:341:12: SEMI ( ws )?
					{
					dbg.location(341,12);
					match(input,SEMI,FOLLOW_SEMI_in_mediaBody615); if (state.failed) return;dbg.location(341,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:341:17: ( ws )?
					int alt40=2;
					try { dbg.enterSubRule(40);
					try { dbg.enterDecision(40, decisionCanBacktrack[40]);

					int LA40_0 = input.LA(1);
					if ( (LA40_0==COMMENT||LA40_0==NL||LA40_0==WS) ) {
						alt40=1;
					}
					} finally {dbg.exitDecision(40);}

					switch (alt40) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:341:17: ws
							{
							dbg.location(341,17);
							pushFollow(FOLLOW_ws_in_mediaBody617);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(40);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					{
					dbg.location(342,12);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:12: ({...}? sass_extend ( ws | ( SEMI ) ) )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:13: {...}? sass_extend ( ws | ( SEMI ) )
					{
					dbg.location(342,13);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBody", "isScssSource()");
					}dbg.location(342,31);
					pushFollow(FOLLOW_sass_extend_in_mediaBody636);
					sass_extend();
					state._fsp--;
					if (state.failed) return;dbg.location(342,43);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:43: ( ws | ( SEMI ) )
					int alt41=2;
					try { dbg.enterSubRule(41);
					try { dbg.enterDecision(41, decisionCanBacktrack[41]);

					int LA41_0 = input.LA(1);
					if ( (LA41_0==COMMENT||LA41_0==NL||LA41_0==WS) ) {
						alt41=1;
					}
					else if ( (LA41_0==SEMI) ) {
						alt41=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 41, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(41);}

					switch (alt41) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:44: ws
							{
							dbg.location(342,44);
							pushFollow(FOLLOW_ws_in_mediaBody639);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:49: ( SEMI )
							{
							dbg.location(342,49);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:49: ( SEMI )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:342:50: SEMI
							{
							dbg.location(342,50);
							match(input,SEMI,FOLLOW_SEMI_in_mediaBody644); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(41);}

					}

					}
					break;

				default :
					if ( cnt42 >= 1 ) break loop42;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(42, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt42++;
			}
			} finally {dbg.exitSubRule(42);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(344, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBody");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBody"



	// $ANTLR start "mediaBodyItem"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:346:1: mediaBodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule );
	public final void mediaBodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaBodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(346, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:347:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration |{...}? sass_debug |{...}? sass_control |{...}? sass_content |{...}? importItem | rule | page | fontFace | vendorAtRule | media | supportsAtRule )
			int alt47=15;
			try { dbg.enterDecision(47, decisionCanBacktrack[47]);

			int LA47_0 = input.LA(1);
			if ( (LA47_0==LESS_AND) ) {
				int LA47_1 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt47=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt47=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt47=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==DOT) ) {
				int LA47_2 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt47=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt47=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt47=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==HASH) ) {
				int LA47_3 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt47=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt47=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt47=3;
				}
				else if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==SASS_MIXIN) ) {
				int LA47_4 = input.LA(2);
				if ( ((synpred5_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt47=1;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==AT_IDENT) ) {
				int LA47_5 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())) ) {
					alt47=2;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred7_Css3())) ) {
					alt47=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=13;
				}

			}
			else if ( (LA47_0==SASS_INCLUDE) ) {
				int LA47_6 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred6_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt47=2;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred7_Css3())) ) {
					alt47=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==SASS_AT_ROOT) ) {
				int LA47_7 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==GREATER||LA47_0==PLUS||LA47_0==TILDE) ) {
				int LA47_8 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				int LA47_9 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt47=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==HASH_SYMBOL) ) {
				int LA47_10 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( ((synpred9_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==DIMENSION) ) {
				int LA47_11 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"))) ) {
					alt47=4;
				}
				else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
					alt47=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==LBRACKET) ) {
				int LA47_12 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==COLON||LA47_0==DCOLON) ) {
				int LA47_13 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==IDENT) ) {
				int LA47_14 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==AT_SIGN) ) {
				int LA47_15 = input.LA(2);
				if ( ((synpred8_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt47=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt47=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==MINUS) ) {
				int LA47_16 = input.LA(2);
				if ( ((synpred8_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt47=4;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt47=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==STAR) ) {
				int LA47_17 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==PIPE) ) {
				int LA47_18 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==GEN) ) {
				int LA47_19 = input.LA(2);
				if ( (synpred8_Css3()) ) {
					alt47=4;
				}
				else if ( (synpred9_Css3()) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=10;
				}

			}
			else if ( (LA47_0==VARIABLE) && (synpred9_Css3())) {
				alt47=5;
			}
			else if ( (LA47_0==SASS_DEBUG||LA47_0==SASS_WARN) ) {
				int LA47_21 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==SASS_VAR) && (synpred9_Css3())) {
				alt47=5;
			}
			else if ( (LA47_0==SASS_IF) ) {
				int LA47_23 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==SASS_FOR) ) {
				int LA47_24 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==SASS_EACH) ) {
				int LA47_25 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==SASS_WHILE) ) {
				int LA47_26 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==SASS_CONTENT) ) {
				int LA47_27 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt47=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==IMPORT_SYM) ) {
				int LA47_28 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt47=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 47, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA47_0==PAGE_SYM) ) {
				int LA47_29 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=11;
				}

			}
			else if ( (LA47_0==FONT_FACE_SYM) ) {
				int LA47_30 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=12;
				}

			}
			else if ( (LA47_0==MOZ_DOCUMENT_SYM) ) {
				int LA47_31 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=13;
				}

			}
			else if ( (LA47_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA47_32 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=13;
				}

			}
			else if ( (LA47_0==MEDIA_SYM) ) {
				int LA47_33 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred9_Css3())) ) {
					alt47=5;
				}
				else if ( (true) ) {
					alt47=14;
				}

			}
			else if ( ((LA47_0 >= BOTTOMCENTER_SYM && LA47_0 <= BOTTOMRIGHT_SYM)||LA47_0==CHARSET_SYM||LA47_0==COUNTER_STYLE_SYM||(LA47_0 >= LEFTBOTTOM_SYM && LA47_0 <= LEFTTOP_SYM)||LA47_0==NAMESPACE_SYM||(LA47_0 >= RIGHTBOTTOM_SYM && LA47_0 <= RIGHTTOP_SYM)||LA47_0==SASS_ELSE||LA47_0==SASS_EXTEND||LA47_0==SASS_FUNCTION||LA47_0==SASS_RETURN||(LA47_0 >= TOPCENTER_SYM && LA47_0 <= TOPRIGHT_SYM)) && (synpred9_Css3())) {
				alt47=5;
			}
			else if ( (LA47_0==SUPPORTS_SYM) ) {
				alt47=15;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 47, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(47);}

			switch (alt47) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(348,96);
					pushFollow(FOLLOW_cp_mixin_declaration_in_mediaBodyItem718);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(350,55);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isLessSource()");
					}dbg.location(350,73);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem751);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(350,87);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:87: ( ( ws )? IMPORTANT_SYM )?
					int alt44=2;
					try { dbg.enterSubRule(44);
					try { dbg.enterDecision(44, decisionCanBacktrack[44]);

					try {
						isCyclicDecision = true;
						alt44 = dfa44.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(44);}

					switch (alt44) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:88: ( ws )? IMPORTANT_SYM
							{
							dbg.location(350,88);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:88: ( ws )?
							int alt43=2;
							try { dbg.enterSubRule(43);
							try { dbg.enterDecision(43, decisionCanBacktrack[43]);

							int LA43_0 = input.LA(1);
							if ( (LA43_0==COMMENT||LA43_0==NL||LA43_0==WS) ) {
								alt43=1;
							}
							} finally {dbg.exitDecision(43);}

							switch (alt43) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:88: ws
									{
									dbg.location(350,88);
									pushFollow(FOLLOW_ws_in_mediaBodyItem754);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(43);}
							dbg.location(350,92);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem757); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(44);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(351,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(351,43);
					pushFollow(FOLLOW_cp_mixin_call_in_mediaBodyItem774);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(351,57);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:57: ( ( ws )? IMPORTANT_SYM )?
					int alt46=2;
					try { dbg.enterSubRule(46);
					try { dbg.enterDecision(46, decisionCanBacktrack[46]);

					try {
						isCyclicDecision = true;
						alt46 = dfa46.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(46);}

					switch (alt46) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(351,58);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:58: ( ws )?
							int alt45=2;
							try { dbg.enterSubRule(45);
							try { dbg.enterDecision(45, decisionCanBacktrack[45]);

							int LA45_0 = input.LA(1);
							if ( (LA45_0==COMMENT||LA45_0==NL||LA45_0==WS) ) {
								alt45=1;
							}
							} finally {dbg.exitDecision(45);}

							switch (alt45) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:58: ws
									{
									dbg.location(351,58);
									pushFollow(FOLLOW_ws_in_mediaBodyItem777);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(45);}
							dbg.location(351,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_mediaBodyItem780); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(46);}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(352,145);
					pushFollow(FOLLOW_rule_in_mediaBodyItem845);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:353:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(353,30);
					pushFollow(FOLLOW_propertyDeclaration_in_mediaBodyItem857);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:354:7: {...}? sass_debug
					{
					dbg.location(354,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(354,25);
					pushFollow(FOLLOW_sass_debug_in_mediaBodyItem867);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:355:7: {...}? sass_control
					{
					dbg.location(355,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(355,25);
					pushFollow(FOLLOW_sass_control_in_mediaBodyItem877);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:356:7: {...}? sass_content
					{
					dbg.location(356,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isScssSource()");
					}dbg.location(356,25);
					pushFollow(FOLLOW_sass_content_in_mediaBodyItem887);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:357:7: {...}? importItem
					{
					dbg.location(357,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaBodyItem", "isCssPreprocessorSource()");
					}dbg.location(357,36);
					pushFollow(FOLLOW_importItem_in_mediaBodyItem897);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:358:7: rule
					{
					dbg.location(358,7);
					pushFollow(FOLLOW_rule_in_mediaBodyItem905);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:359:7: page
					{
					dbg.location(359,7);
					pushFollow(FOLLOW_page_in_mediaBodyItem913);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:360:7: fontFace
					{
					dbg.location(360,7);
					pushFollow(FOLLOW_fontFace_in_mediaBodyItem921);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:361:7: vendorAtRule
					{
					dbg.location(361,7);
					pushFollow(FOLLOW_vendorAtRule_in_mediaBodyItem929);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:363:7: media
					{
					dbg.location(363,7);
					pushFollow(FOLLOW_media_in_mediaBodyItem942);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:364:7: supportsAtRule
					{
					dbg.location(364,7);
					pushFollow(FOLLOW_supportsAtRule_in_mediaBodyItem950);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(365, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaBodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaBodyItem"



	// $ANTLR start "mediaQueryList"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:367:1: mediaQueryList : mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* ;
	public final void mediaQueryList() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryList");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(367, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:2: ( mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:4: mediaQuery ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			{
			dbg.location(368,4);
			pushFollow(FOLLOW_mediaQuery_in_mediaQueryList964);
			mediaQuery();
			state._fsp--;
			if (state.failed) return;dbg.location(368,15);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*
			try { dbg.enterSubRule(50);

			loop50:
			while (true) {
				int alt50=2;
				try { dbg.enterDecision(50, decisionCanBacktrack[50]);

				try {
					isCyclicDecision = true;
					alt50 = dfa50.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(50);}

				switch (alt50) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:17: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery
					{
					dbg.location(368,31);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:31: ( ws )?
					int alt48=2;
					try { dbg.enterSubRule(48);
					try { dbg.enterDecision(48, decisionCanBacktrack[48]);

					int LA48_0 = input.LA(1);
					if ( (LA48_0==COMMENT||LA48_0==NL||LA48_0==WS) ) {
						alt48=1;
					}
					} finally {dbg.exitDecision(48);}

					switch (alt48) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:31: ws
							{
							dbg.location(368,31);
							pushFollow(FOLLOW_ws_in_mediaQueryList976);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(48);}
					dbg.location(368,35);
					match(input,COMMA,FOLLOW_COMMA_in_mediaQueryList979); if (state.failed) return;dbg.location(368,41);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:41: ( ws )?
					int alt49=2;
					try { dbg.enterSubRule(49);
					try { dbg.enterDecision(49, decisionCanBacktrack[49]);

					int LA49_0 = input.LA(1);
					if ( (LA49_0==COMMENT||LA49_0==NL||LA49_0==WS) ) {
						alt49=1;
					}
					} finally {dbg.exitDecision(49);}

					switch (alt49) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:41: ws
							{
							dbg.location(368,41);
							pushFollow(FOLLOW_ws_in_mediaQueryList981);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(49);}
					dbg.location(368,45);
					pushFollow(FOLLOW_mediaQuery_in_mediaQueryList984);
					mediaQuery();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop50;
				}
			}
			} finally {dbg.exitSubRule(50);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(369, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryList");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryList"



	// $ANTLR start "mediaQuery"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:371:1: mediaQuery : ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable );
	public final void mediaQuery() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQuery");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(371, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:372:2: ( ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* | mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )* |{...}? cp_variable )
			int alt59=3;
			try { dbg.enterDecision(59, decisionCanBacktrack[59]);

			switch ( input.LA(1) ) {
			case GEN:
			case IDENT:
			case NOT:
				{
				alt59=1;
				}
				break;
			case HASH_SYMBOL:
				{
				int LA59_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt59=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt59=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 59, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LPAREN:
				{
				alt59=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt59=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 59, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(59);}

			switch (alt59) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:5: ( mediaQueryOperator ( ws )? )? mediaType ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(373,5);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:5: ( mediaQueryOperator ( ws )? )?
					int alt52=2;
					try { dbg.enterSubRule(52);
					try { dbg.enterDecision(52, decisionCanBacktrack[52]);

					int LA52_0 = input.LA(1);
					if ( (LA52_0==IDENT) ) {
						int LA52_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
							alt52=1;
						}
					}
					else if ( (LA52_0==NOT) ) {
						alt52=1;
					}
					} finally {dbg.exitDecision(52);}

					switch (alt52) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:6: mediaQueryOperator ( ws )?
							{
							dbg.location(373,6);
							pushFollow(FOLLOW_mediaQueryOperator_in_mediaQuery1003);
							mediaQueryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(373,25);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:25: ( ws )?
							int alt51=2;
							try { dbg.enterSubRule(51);
							try { dbg.enterDecision(51, decisionCanBacktrack[51]);

							int LA51_0 = input.LA(1);
							if ( (LA51_0==COMMENT||LA51_0==NL||LA51_0==WS) ) {
								alt51=1;
							}
							} finally {dbg.exitDecision(51);}

							switch (alt51) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:25: ws
									{
									dbg.location(373,25);
									pushFollow(FOLLOW_ws_in_mediaQuery1005);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(51);}

							}
							break;

					}
					} finally {dbg.exitSubRule(52);}
					dbg.location(373,33);
					pushFollow(FOLLOW_mediaType_in_mediaQuery1012);
					mediaType();
					state._fsp--;
					if (state.failed) return;dbg.location(373,43);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:43: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(55);

					loop55:
					while (true) {
						int alt55=2;
						try { dbg.enterDecision(55, decisionCanBacktrack[55]);

						int LA55_0 = input.LA(1);
						if ( (LA55_0==COMMENT||LA55_0==NL||LA55_0==WS) ) {
							int LA55_1 = input.LA(2);
							if ( (synpred11_Css3()) ) {
								alt55=1;
							}

						}
						else if ( (LA55_0==IDENT) ) {
							int LA55_18 = input.LA(2);
							if ( ((synpred11_Css3()&&evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")"))) ) {
								alt55=1;
							}

						}

						} finally {dbg.exitDecision(55);}

						switch (alt55) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:44: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(373,60);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:60: ( ws )?
							int alt53=2;
							try { dbg.enterSubRule(53);
							try { dbg.enterDecision(53, decisionCanBacktrack[53]);

							int LA53_0 = input.LA(1);
							if ( (LA53_0==COMMENT||LA53_0==NL||LA53_0==WS) ) {
								alt53=1;
							}
							} finally {dbg.exitDecision(53);}

							switch (alt53) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:60: ws
									{
									dbg.location(373,60);
									pushFollow(FOLLOW_ws_in_mediaQuery1023);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(53);}
							dbg.location(373,64);
							pushFollow(FOLLOW_key_and_in_mediaQuery1026);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(373,72);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:72: ( ws )?
							int alt54=2;
							try { dbg.enterSubRule(54);
							try { dbg.enterDecision(54, decisionCanBacktrack[54]);

							int LA54_0 = input.LA(1);
							if ( (LA54_0==COMMENT||LA54_0==NL||LA54_0==WS) ) {
								alt54=1;
							}
							} finally {dbg.exitDecision(54);}

							switch (alt54) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:72: ws
									{
									dbg.location(373,72);
									pushFollow(FOLLOW_ws_in_mediaQuery1028);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(54);}
							dbg.location(373,76);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1031);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop55;
						}
					}
					} finally {dbg.exitSubRule(55);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:7: mediaExpression ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					{
					dbg.location(374,7);
					pushFollow(FOLLOW_mediaExpression_in_mediaQuery1042);
					mediaExpression();
					state._fsp--;
					if (state.failed) return;dbg.location(374,23);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:23: ( ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression )*
					try { dbg.enterSubRule(58);

					loop58:
					while (true) {
						int alt58=2;
						try { dbg.enterDecision(58, decisionCanBacktrack[58]);

						int LA58_0 = input.LA(1);
						if ( (LA58_0==COMMENT||LA58_0==NL||LA58_0==WS) ) {
							int LA58_1 = input.LA(2);
							if ( (synpred12_Css3()) ) {
								alt58=1;
							}

						}
						else if ( (LA58_0==IDENT) ) {
							int LA58_18 = input.LA(2);
							if ( ((evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")&&synpred12_Css3())) ) {
								alt58=1;
							}

						}

						} finally {dbg.exitDecision(58);}

						switch (alt58) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:24: ( ( ws )? key_and )=> ( ws )? key_and ( ws )? mediaExpression
							{
							dbg.location(374,40);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:40: ( ws )?
							int alt56=2;
							try { dbg.enterSubRule(56);
							try { dbg.enterDecision(56, decisionCanBacktrack[56]);

							int LA56_0 = input.LA(1);
							if ( (LA56_0==COMMENT||LA56_0==NL||LA56_0==WS) ) {
								alt56=1;
							}
							} finally {dbg.exitDecision(56);}

							switch (alt56) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:40: ws
									{
									dbg.location(374,40);
									pushFollow(FOLLOW_ws_in_mediaQuery1053);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(56);}
							dbg.location(374,44);
							pushFollow(FOLLOW_key_and_in_mediaQuery1056);
							key_and();
							state._fsp--;
							if (state.failed) return;dbg.location(374,52);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:52: ( ws )?
							int alt57=2;
							try { dbg.enterSubRule(57);
							try { dbg.enterDecision(57, decisionCanBacktrack[57]);

							int LA57_0 = input.LA(1);
							if ( (LA57_0==COMMENT||LA57_0==NL||LA57_0==WS) ) {
								alt57=1;
							}
							} finally {dbg.exitDecision(57);}

							switch (alt57) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:52: ws
									{
									dbg.location(374,52);
									pushFollow(FOLLOW_ws_in_mediaQuery1058);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(57);}
							dbg.location(374,56);
							pushFollow(FOLLOW_mediaExpression_in_mediaQuery1061);
							mediaExpression();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop58;
						}
					}
					} finally {dbg.exitSubRule(58);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:375:7: {...}? cp_variable
					{
					dbg.location(375,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaQuery", "isLessSource()");
					}dbg.location(375,25);
					pushFollow(FOLLOW_cp_variable_in_mediaQuery1074);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(376, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQuery");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQuery"



	// $ANTLR start "mediaQueryOperator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:378:1: mediaQueryOperator : ( key_only | NOT );
	public final void mediaQueryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaQueryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(378, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:379:3: ( key_only | NOT )
			int alt60=2;
			try { dbg.enterDecision(60, decisionCanBacktrack[60]);

			int LA60_0 = input.LA(1);
			if ( (LA60_0==IDENT) ) {
				alt60=1;
			}
			else if ( (LA60_0==NOT) ) {
				alt60=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 60, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(60);}

			switch (alt60) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:379:5: key_only
					{
					dbg.location(379,5);
					pushFollow(FOLLOW_key_only_in_mediaQueryOperator1086);
					key_only();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:379:16: NOT
					{
					dbg.location(379,16);
					match(input,NOT,FOLLOW_NOT_in_mediaQueryOperator1090); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(380, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaQueryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaQueryOperator"



	// $ANTLR start "mediaType"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:382:1: mediaType : ( IDENT | GEN |{...}? sass_interpolation_expression_var );
	public final void mediaType() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaType");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(382, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:383:2: ( IDENT | GEN |{...}? sass_interpolation_expression_var )
			int alt61=3;
			try { dbg.enterDecision(61, decisionCanBacktrack[61]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt61=1;
				}
				break;
			case GEN:
				{
				alt61=2;
				}
				break;
			case HASH_SYMBOL:
				{
				alt61=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 61, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(61);}

			switch (alt61) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:383:4: IDENT
					{
					dbg.location(383,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaType1102); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:383:12: GEN
					{
					dbg.location(383,12);
					match(input,GEN,FOLLOW_GEN_in_mediaType1106); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:383:18: {...}? sass_interpolation_expression_var
					{
					dbg.location(383,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaType", "isCssPreprocessorSource()");
					}dbg.location(383,47);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaType1112);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(384, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaType");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaType"



	// $ANTLR start "mediaExpression"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:386:1: mediaExpression : ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var );
	public final void mediaExpression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaExpression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(386, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:387:5: ( ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN ) | ( HASH )=>{...}? sass_interpolation_expression_var )
			int alt65=2;
			try { dbg.enterDecision(65, decisionCanBacktrack[65]);

			int LA65_0 = input.LA(1);
			if ( (LA65_0==LPAREN) && (synpred13_Css3())) {
				alt65=1;
			}
			else if ( (LA65_0==HASH_SYMBOL) && (synpred14_Css3())) {
				alt65=2;
			}

			} finally {dbg.exitDecision(65);}

			switch (alt65) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:5: ( LPAREN )=> ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					{
					dbg.location(388,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:17: ( LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:18: LPAREN ( ws )? mediaFeature ( mediaFeatureValue )? ( ws )? RPAREN
					{
					dbg.location(388,18);
					match(input,LPAREN,FOLLOW_LPAREN_in_mediaExpression1137); if (state.failed) return;dbg.location(388,25);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:25: ( ws )?
					int alt62=2;
					try { dbg.enterSubRule(62);
					try { dbg.enterDecision(62, decisionCanBacktrack[62]);

					int LA62_0 = input.LA(1);
					if ( (LA62_0==COMMENT||LA62_0==NL||LA62_0==WS) ) {
						alt62=1;
					}
					} finally {dbg.exitDecision(62);}

					switch (alt62) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:25: ws
							{
							dbg.location(388,25);
							pushFollow(FOLLOW_ws_in_mediaExpression1139);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(62);}
					dbg.location(388,29);
					pushFollow(FOLLOW_mediaFeature_in_mediaExpression1142);
					mediaFeature();
					state._fsp--;
					if (state.failed) return;dbg.location(388,42);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:42: ( mediaFeatureValue )?
					int alt63=2;
					try { dbg.enterSubRule(63);
					try { dbg.enterDecision(63, decisionCanBacktrack[63]);

					try {
						isCyclicDecision = true;
						alt63 = dfa63.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(63);}

					switch (alt63) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:42: mediaFeatureValue
							{
							dbg.location(388,42);
							pushFollow(FOLLOW_mediaFeatureValue_in_mediaExpression1144);
							mediaFeatureValue();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(63);}
					dbg.location(388,61);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:61: ( ws )?
					int alt64=2;
					try { dbg.enterSubRule(64);
					try { dbg.enterDecision(64, decisionCanBacktrack[64]);

					int LA64_0 = input.LA(1);
					if ( (LA64_0==COMMENT||LA64_0==NL||LA64_0==WS) ) {
						alt64=1;
					}
					} finally {dbg.exitDecision(64);}

					switch (alt64) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:61: ws
							{
							dbg.location(388,61);
							pushFollow(FOLLOW_ws_in_mediaExpression1147);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(64);}
					dbg.location(388,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_mediaExpression1150); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:389:7: ( HASH )=>{...}? sass_interpolation_expression_var
					{
					dbg.location(389,17);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaExpression", "isCssPreprocessorSource()");
					}dbg.location(389,46);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaExpression1167);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(390, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaExpression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaExpression"



	// $ANTLR start "mediaFeatureValue"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:392:1: mediaFeatureValue : ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) ;
	public final void mediaFeatureValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeatureValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(392, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:393:5: ( ( ws )? COLON ( ws )? ({...}? cp_expression | expression ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:394:5: ( ws )? COLON ( ws )? ({...}? cp_expression | expression )
			{
			dbg.location(394,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:394:5: ( ws )?
			int alt66=2;
			try { dbg.enterSubRule(66);
			try { dbg.enterDecision(66, decisionCanBacktrack[66]);

			int LA66_0 = input.LA(1);
			if ( (LA66_0==COMMENT||LA66_0==NL||LA66_0==WS) ) {
				alt66=1;
			}
			} finally {dbg.exitDecision(66);}

			switch (alt66) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:394:5: ws
					{
					dbg.location(394,5);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1188);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(66);}
			dbg.location(394,9);
			match(input,COLON,FOLLOW_COLON_in_mediaFeatureValue1191); if (state.failed) return;dbg.location(394,15);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:394:15: ( ws )?
			int alt67=2;
			try { dbg.enterSubRule(67);
			try { dbg.enterDecision(67, decisionCanBacktrack[67]);

			int LA67_0 = input.LA(1);
			if ( (LA67_0==COMMENT||LA67_0==NL||LA67_0==WS) ) {
				alt67=1;
			}
			} finally {dbg.exitDecision(67);}

			switch (alt67) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:394:15: ws
					{
					dbg.location(394,15);
					pushFollow(FOLLOW_ws_in_mediaFeatureValue1193);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(67);}
			dbg.location(395,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:395:5: ({...}? cp_expression | expression )
			int alt68=2;
			try { dbg.enterSubRule(68);
			try { dbg.enterDecision(68, decisionCanBacktrack[68]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt68=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA68_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case IDENT:
				{
				int LA68_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA68_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA68_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA68_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA68_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case EMS:
				{
				int LA68_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case REM:
				{
				int LA68_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case EXS:
				{
				int LA68_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA68_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case TIME:
				{
				int LA68_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case FREQ:
				{
				int LA68_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA68_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA68_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case STRING:
				{
				int LA68_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case TILDE:
				{
				int LA68_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA68_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case GEN:
				{
				int LA68_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case URI:
				{
				int LA68_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case HASH:
				{
				int LA68_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (true) ) {
					alt68=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA68_23 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt68=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt68=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA68_24 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt68=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt68=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA68_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt68=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt68=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA68_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt68=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt68=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA68_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt68=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt68=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA68_28 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt68=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 68, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 68, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(68);}

			switch (alt68) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:396:9: {...}? cp_expression
					{
					dbg.location(396,9);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeatureValue", "isCssPreprocessorSource()");
					}dbg.location(396,38);
					pushFollow(FOLLOW_cp_expression_in_mediaFeatureValue1212);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:398:9: expression
					{
					dbg.location(398,9);
					pushFollow(FOLLOW_expression_in_mediaFeatureValue1232);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(68);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(400, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeatureValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeatureValue"



	// $ANTLR start "mediaFeature"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:402:1: mediaFeature : ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void mediaFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "mediaFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(402, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:2: ( IDENT | GEN |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt70=3;
			try { dbg.enterDecision(70, decisionCanBacktrack[70]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt70=1;
				}
				break;
			case GEN:
				{
				alt70=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt70=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 70, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(70);}

			switch (alt70) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:4: IDENT
					{
					dbg.location(403,4);
					match(input,IDENT,FOLLOW_IDENT_in_mediaFeature1252); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:12: GEN
					{
					dbg.location(403,12);
					match(input,GEN,FOLLOW_GEN_in_mediaFeature1256); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:18: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(403,18);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "mediaFeature", "isCssPreprocessorSource()");
					}dbg.location(403,47);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:47: ( cp_variable | sass_interpolation_expression_var )
					int alt69=2;
					try { dbg.enterSubRule(69);
					try { dbg.enterDecision(69, decisionCanBacktrack[69]);

					int LA69_0 = input.LA(1);
					if ( (LA69_0==AT_IDENT||(LA69_0 >= BOTTOMCENTER_SYM && LA69_0 <= BOTTOMRIGHT_SYM)||LA69_0==CHARSET_SYM||LA69_0==COUNTER_STYLE_SYM||LA69_0==FONT_FACE_SYM||LA69_0==IMPORT_SYM||(LA69_0 >= LEFTBOTTOM_SYM && LA69_0 <= LEFTTOP_SYM)||LA69_0==MEDIA_SYM||LA69_0==MOZ_DOCUMENT_SYM||LA69_0==NAMESPACE_SYM||LA69_0==PAGE_SYM||(LA69_0 >= RIGHTBOTTOM_SYM && LA69_0 <= RIGHTTOP_SYM)||(LA69_0 >= SASS_AT_ROOT && LA69_0 <= SASS_DEBUG)||(LA69_0 >= SASS_EACH && LA69_0 <= SASS_ELSE)||LA69_0==SASS_EXTEND||(LA69_0 >= SASS_FOR && LA69_0 <= SASS_FUNCTION)||(LA69_0 >= SASS_IF && LA69_0 <= SASS_MIXIN)||(LA69_0 >= SASS_RETURN && LA69_0 <= SASS_WHILE)||(LA69_0 >= TOPCENTER_SYM && LA69_0 <= TOPRIGHT_SYM)||LA69_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt69=1;
					}
					else if ( (LA69_0==HASH_SYMBOL) ) {
						alt69=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 69, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(69);}

					switch (alt69) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:49: cp_variable
							{
							dbg.location(403,49);
							pushFollow(FOLLOW_cp_variable_in_mediaFeature1264);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:403:63: sass_interpolation_expression_var
							{
							dbg.location(403,63);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_mediaFeature1268);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(69);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(404, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "mediaFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "mediaFeature"



	// $ANTLR start "body"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:406:2: body : ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ ;
	public final void body() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "body");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(406, 1);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:407:5: ( ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:408:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			{
			dbg.location(408,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:408:5: ( ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? ) | ( SEMI ( ws )? ) )+
			int cnt75=0;
			try { dbg.enterSubRule(75);

			loop75:
			while (true) {
				int alt75=3;
				try { dbg.enterDecision(75, decisionCanBacktrack[75]);

				int LA75_0 = input.LA(1);
				if ( ((LA75_0 >= AT_IDENT && LA75_0 <= AT_SIGN)||(LA75_0 >= BOTTOMCENTER_SYM && LA75_0 <= BOTTOMRIGHT_SYM)||(LA75_0 >= CHARSET_SYM && LA75_0 <= COLON)||LA75_0==COUNTER_STYLE_SYM||(LA75_0 >= DCOLON && LA75_0 <= DOT)||LA75_0==FONT_FACE_SYM||(LA75_0 >= GEN && LA75_0 <= GREATER)||(LA75_0 >= HASH && LA75_0 <= HASH_SYMBOL)||LA75_0==IDENT||LA75_0==IMPORT_SYM||(LA75_0 >= LBRACKET && LA75_0 <= LEFTTOP_SYM)||LA75_0==LESS_AND||(LA75_0 >= MEDIA_SYM && LA75_0 <= MOZ_DOCUMENT_SYM)||LA75_0==NAMESPACE_SYM||LA75_0==PAGE_SYM||(LA75_0 >= PIPE && LA75_0 <= PLUS)||(LA75_0 >= RIGHTBOTTOM_SYM && LA75_0 <= RIGHTTOP_SYM)||(LA75_0 >= SASS_AT_ROOT && LA75_0 <= SASS_DEBUG)||(LA75_0 >= SASS_EACH && LA75_0 <= SASS_ELSE)||(LA75_0 >= SASS_EXTEND && LA75_0 <= SASS_FUNCTION)||(LA75_0 >= SASS_IF && LA75_0 <= SASS_MIXIN)||(LA75_0 >= SASS_RETURN && LA75_0 <= SASS_WHILE)||LA75_0==STAR||LA75_0==SUPPORTS_SYM||LA75_0==TILDE||(LA75_0 >= TOPCENTER_SYM && LA75_0 <= TOPRIGHT_SYM)||LA75_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt75=1;
				}
				else if ( (LA75_0==SEMI) ) {
					alt75=2;
				}

				} finally {dbg.exitDecision(75);}

				switch (alt75) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					{
					dbg.location(409,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:10: ( bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:12: bodyItem ( ( ( ws )? SEMI )=> ( ws )? SEMI )? ( ws )?
					{
					dbg.location(409,12);
					pushFollow(FOLLOW_bodyItem_in_body1302);
					bodyItem();
					state._fsp--;
					if (state.failed) return;dbg.location(409,21);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?
					int alt72=2;
					try { dbg.enterSubRule(72);
					try { dbg.enterDecision(72, decisionCanBacktrack[72]);

					try {
						isCyclicDecision = true;
						alt72 = dfa72.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(72);}

					switch (alt72) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:22: ( ( ws )? SEMI )=> ( ws )? SEMI
							{
							dbg.location(409,34);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:34: ( ws )?
							int alt71=2;
							try { dbg.enterSubRule(71);
							try { dbg.enterDecision(71, decisionCanBacktrack[71]);

							int LA71_0 = input.LA(1);
							if ( (LA71_0==COMMENT||LA71_0==NL||LA71_0==WS) ) {
								alt71=1;
							}
							} finally {dbg.exitDecision(71);}

							switch (alt71) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:34: ws
									{
									dbg.location(409,34);
									pushFollow(FOLLOW_ws_in_body1312);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(71);}
							dbg.location(409,38);
							match(input,SEMI,FOLLOW_SEMI_in_body1315); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(72);}
					dbg.location(409,45);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:45: ( ws )?
					int alt73=2;
					try { dbg.enterSubRule(73);
					try { dbg.enterDecision(73, decisionCanBacktrack[73]);

					int LA73_0 = input.LA(1);
					if ( (LA73_0==COMMENT||LA73_0==NL||LA73_0==WS) ) {
						alt73=1;
					}
					} finally {dbg.exitDecision(73);}

					switch (alt73) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:45: ws
							{
							dbg.location(409,45);
							pushFollow(FOLLOW_ws_in_body1319);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(73);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:411:10: ( SEMI ( ws )? )
					{
					dbg.location(411,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:411:10: ( SEMI ( ws )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:411:12: SEMI ( ws )?
					{
					dbg.location(411,12);
					match(input,SEMI,FOLLOW_SEMI_in_body1346); if (state.failed) return;dbg.location(411,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:411:17: ( ws )?
					int alt74=2;
					try { dbg.enterSubRule(74);
					try { dbg.enterDecision(74, decisionCanBacktrack[74]);

					int LA74_0 = input.LA(1);
					if ( (LA74_0==COMMENT||LA74_0==NL||LA74_0==WS) ) {
						alt74=1;
					}
					} finally {dbg.exitDecision(74);}

					switch (alt74) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:411:17: ws
							{
							dbg.location(411,17);
							pushFollow(FOLLOW_ws_in_body1348);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(74);}

					}

					}
					break;

				default :
					if ( cnt75 >= 1 ) break loop75;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(75, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt75++;
			}
			} finally {dbg.exitSubRule(75);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(413, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "body");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "body"



	// $ANTLR start "bodyItem"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:415:1: bodyItem : ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration );
	public final void bodyItem() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "bodyItem");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(415, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:416:5: ( ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration | ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call | ( cp_mixin_call )=>{...}? cp_mixin_call | rule | ( cp_variable ( ws )? COLON )=> cp_variable_declaration | ( sass_map )=> sass_map | at_rule |{...}? importItem |{...}? sass_debug |{...}? sass_control |{...}? sass_function_declaration )
			int alt76=11;
			try { dbg.enterDecision(76, decisionCanBacktrack[76]);

			switch ( input.LA(1) ) {
			case LESS_AND:
				{
				int LA76_1 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt76=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=3;
				}
				else if ( (true) ) {
					alt76=4;
				}

				}
				break;
			case DOT:
				{
				int LA76_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt76=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=3;
				}
				else if ( (true) ) {
					alt76=4;
				}

				}
				break;
			case HASH:
				{
				int LA76_3 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred16_Css3())) ) {
					alt76=1;
				}
				else if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=3;
				}
				else if ( (true) ) {
					alt76=4;
				}

				}
				break;
			case SASS_MIXIN:
				{
				int LA76_4 = input.LA(2);
				if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred16_Css3())) ) {
					alt76=1;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
				{
				int LA76_5 = input.LA(2);
				if ( ((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=2;
				}
				else if ( (((synpred18_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case SASS_INCLUDE:
				{
				int LA76_6 = input.LA(2);
				if ( (((synpred17_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=2;
				}
				else if ( ((synpred18_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=3;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_AT_ROOT:
				{
				int LA76_7 = input.LA(2);
				if ( (true) ) {
					alt76=4;
				}
				else if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
			case COLON:
			case DCOLON:
			case DIMENSION:
			case GEN:
			case GREATER:
			case HASH_SYMBOL:
			case IDENT:
			case LBRACKET:
			case MINUS:
			case PIPE:
			case PLUS:
			case SASS_EXTEND_ONLY_SELECTOR:
			case STAR:
			case TILDE:
				{
				alt76=4;
				}
				break;
			case MEDIA_SYM:
				{
				int LA76_20 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case SASS_VAR:
				{
				int LA76_21 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PAGE_SYM:
				{
				int LA76_22 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case COUNTER_STYLE_SYM:
				{
				int LA76_23 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case FONT_FACE_SYM:
				{
				int LA76_24 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case MOZ_DOCUMENT_SYM:
				{
				int LA76_25 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case SUPPORTS_SYM:
				{
				alt76=7;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA76_27 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (true) ) {
					alt76=7;
				}

				}
				break;
			case IMPORT_SYM:
				{
				int LA76_28 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt76=8;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_DEBUG:
			case SASS_WARN:
				{
				int LA76_29 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt76=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_IF:
				{
				int LA76_30 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt76=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FOR:
				{
				int LA76_31 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt76=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_EACH:
				{
				int LA76_32 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt76=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_WHILE:
				{
				int LA76_33 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt76=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_FUNCTION:
				{
				int LA76_34 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt76=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case NAMESPACE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_CONTENT:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_RETURN:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
				{
				int LA76_35 = input.LA(2);
				if ( ((synpred19_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt76=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred20_Css3())) ) {
					alt76=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 76, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 76, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(76);}

			switch (alt76) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )=> cp_mixin_declaration
					{
					dbg.location(417,107);
					pushFollow(FOLLOW_cp_mixin_declaration_in_bodyItem1428);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:419:11: ( cp_mixin_call ( ws )? SEMI )=>{...}? cp_mixin_call
					{
					dbg.location(419,38);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isLessSource()");
					}dbg.location(419,56);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1461);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:420:11: ( cp_mixin_call )=>{...}? cp_mixin_call
					{
					dbg.location(420,29);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(420,47);
					pushFollow(FOLLOW_cp_mixin_call_in_bodyItem1480);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:421:8: rule
					{
					dbg.location(421,8);
					pushFollow(FOLLOW_rule_in_bodyItem1489);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:422:11: ( cp_variable ( ws )? COLON )=> cp_variable_declaration
					{
					dbg.location(422,37);
					pushFollow(FOLLOW_cp_variable_declaration_in_bodyItem1511);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:423:11: ( sass_map )=> sass_map
					{
					dbg.location(423,24);
					pushFollow(FOLLOW_sass_map_in_bodyItem1528);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:424:11: at_rule
					{
					dbg.location(424,11);
					pushFollow(FOLLOW_at_rule_in_bodyItem1540);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:426:11: {...}? importItem
					{
					dbg.location(426,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isCssPreprocessorSource()");
					}dbg.location(426,40);
					pushFollow(FOLLOW_importItem_in_bodyItem1563);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:427:11: {...}? sass_debug
					{
					dbg.location(427,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(427,29);
					pushFollow(FOLLOW_sass_debug_in_bodyItem1577);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:428:11: {...}? sass_control
					{
					dbg.location(428,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(428,29);
					pushFollow(FOLLOW_sass_control_in_bodyItem1591);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:429:11: {...}? sass_function_declaration
					{
					dbg.location(429,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "bodyItem", "isScssSource()");
					}dbg.location(429,29);
					pushFollow(FOLLOW_sass_function_declaration_in_bodyItem1605);
					sass_function_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(NL));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(430, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "bodyItem");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "bodyItem"



	// $ANTLR start "supportsAtRule"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:435:1: supportsAtRule : SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE ;
	public final void supportsAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(435, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:436:2: ( SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:2: SUPPORTS_SYM ( ws )? supportsCondition ( ws )? LBRACE ( ws )? syncToFollow ( mediaBody )? RBRACE
			{
			dbg.location(437,2);
			match(input,SUPPORTS_SYM,FOLLOW_SUPPORTS_SYM_in_supportsAtRule1625); if (state.failed) return;dbg.location(437,15);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:15: ( ws )?
			int alt77=2;
			try { dbg.enterSubRule(77);
			try { dbg.enterDecision(77, decisionCanBacktrack[77]);

			int LA77_0 = input.LA(1);
			if ( (LA77_0==COMMENT||LA77_0==NL||LA77_0==WS) ) {
				alt77=1;
			}
			} finally {dbg.exitDecision(77);}

			switch (alt77) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:15: ws
					{
					dbg.location(437,15);
					pushFollow(FOLLOW_ws_in_supportsAtRule1627);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(77);}
			dbg.location(437,19);
			pushFollow(FOLLOW_supportsCondition_in_supportsAtRule1630);
			supportsCondition();
			state._fsp--;
			if (state.failed) return;dbg.location(437,37);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:37: ( ws )?
			int alt78=2;
			try { dbg.enterSubRule(78);
			try { dbg.enterDecision(78, decisionCanBacktrack[78]);

			int LA78_0 = input.LA(1);
			if ( (LA78_0==COMMENT||LA78_0==NL||LA78_0==WS) ) {
				alt78=1;
			}
			} finally {dbg.exitDecision(78);}

			switch (alt78) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:37: ws
					{
					dbg.location(437,37);
					pushFollow(FOLLOW_ws_in_supportsAtRule1632);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(78);}
			dbg.location(437,41);
			match(input,LBRACE,FOLLOW_LBRACE_in_supportsAtRule1635); if (state.failed) return;dbg.location(437,48);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:48: ( ws )?
			int alt79=2;
			try { dbg.enterSubRule(79);
			try { dbg.enterDecision(79, decisionCanBacktrack[79]);

			int LA79_0 = input.LA(1);
			if ( (LA79_0==COMMENT||LA79_0==NL||LA79_0==WS) ) {
				alt79=1;
			}
			} finally {dbg.exitDecision(79);}

			switch (alt79) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:48: ws
					{
					dbg.location(437,48);
					pushFollow(FOLLOW_ws_in_supportsAtRule1637);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(79);}
			dbg.location(437,52);
			pushFollow(FOLLOW_syncToFollow_in_supportsAtRule1640);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(437,65);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:65: ( mediaBody )?
			int alt80=2;
			try { dbg.enterSubRule(80);
			try { dbg.enterDecision(80, decisionCanBacktrack[80]);

			int LA80_0 = input.LA(1);
			if ( ((LA80_0 >= AT_IDENT && LA80_0 <= AT_SIGN)||(LA80_0 >= BOTTOMCENTER_SYM && LA80_0 <= BOTTOMRIGHT_SYM)||(LA80_0 >= CHARSET_SYM && LA80_0 <= COLON)||LA80_0==COUNTER_STYLE_SYM||(LA80_0 >= DCOLON && LA80_0 <= DOT)||LA80_0==FONT_FACE_SYM||(LA80_0 >= GEN && LA80_0 <= GREATER)||(LA80_0 >= HASH && LA80_0 <= HASH_SYMBOL)||LA80_0==IDENT||LA80_0==IMPORT_SYM||(LA80_0 >= LBRACKET && LA80_0 <= LEFTTOP_SYM)||LA80_0==LESS_AND||(LA80_0 >= MEDIA_SYM && LA80_0 <= MOZ_DOCUMENT_SYM)||LA80_0==NAMESPACE_SYM||LA80_0==PAGE_SYM||(LA80_0 >= PIPE && LA80_0 <= PLUS)||(LA80_0 >= RIGHTBOTTOM_SYM && LA80_0 <= RIGHTTOP_SYM)||(LA80_0 >= SASS_AT_ROOT && LA80_0 <= SASS_DEBUG)||(LA80_0 >= SASS_EACH && LA80_0 <= SASS_ELSE)||(LA80_0 >= SASS_EXTEND && LA80_0 <= SASS_FUNCTION)||(LA80_0 >= SASS_IF && LA80_0 <= SASS_MIXIN)||(LA80_0 >= SASS_RETURN && LA80_0 <= SEMI)||LA80_0==STAR||LA80_0==SUPPORTS_SYM||LA80_0==TILDE||(LA80_0 >= TOPCENTER_SYM && LA80_0 <= TOPRIGHT_SYM)||LA80_0==VARIABLE||LA80_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt80=1;
			}
			} finally {dbg.exitDecision(80);}

			switch (alt80) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:437:65: mediaBody
					{
					dbg.location(437,65);
					pushFollow(FOLLOW_mediaBody_in_supportsAtRule1642);
					mediaBody();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(80);}
			dbg.location(437,76);
			match(input,RBRACE,FOLLOW_RBRACE_in_supportsAtRule1645); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(438, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsAtRule"



	// $ANTLR start "supportsCondition"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:441:1: supportsCondition : ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? );
	public final void supportsCondition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsCondition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(441, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:442:2: ( NOT ws supportsInParens | supportsInParens ( ws supportsWithOperator )? )
			int alt82=2;
			try { dbg.enterDecision(82, decisionCanBacktrack[82]);

			int LA82_0 = input.LA(1);
			if ( (LA82_0==NOT) ) {
				alt82=1;
			}
			else if ( (LA82_0==LPAREN) ) {
				alt82=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 82, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(82);}

			switch (alt82) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:443:2: NOT ws supportsInParens
					{
					dbg.location(443,2);
					match(input,NOT,FOLLOW_NOT_in_supportsCondition1658); if (state.failed) return;dbg.location(443,6);
					pushFollow(FOLLOW_ws_in_supportsCondition1660);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(443,9);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition1662);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:444:4: supportsInParens ( ws supportsWithOperator )?
					{
					dbg.location(444,4);
					pushFollow(FOLLOW_supportsInParens_in_supportsCondition1667);
					supportsInParens();
					state._fsp--;
					if (state.failed) return;dbg.location(444,21);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:444:21: ( ws supportsWithOperator )?
					int alt81=2;
					try { dbg.enterSubRule(81);
					try { dbg.enterDecision(81, decisionCanBacktrack[81]);

					try {
						isCyclicDecision = true;
						alt81 = dfa81.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(81);}

					switch (alt81) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:444:22: ws supportsWithOperator
							{
							dbg.location(444,22);
							pushFollow(FOLLOW_ws_in_supportsCondition1670);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(444,25);
							pushFollow(FOLLOW_supportsWithOperator_in_supportsCondition1672);
							supportsWithOperator();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(81);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(445, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsCondition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsCondition"



	// $ANTLR start "supportsWithOperator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:447:1: supportsWithOperator : ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* );
	public final void supportsWithOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsWithOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(447, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:448:9: ( supportsConjunction ( ws supportsConjunction )* | supportsDisjunction ( ws supportsDisjunction )* )
			int alt85=2;
			try { dbg.enterDecision(85, decisionCanBacktrack[85]);

			int LA85_0 = input.LA(1);
			if ( (LA85_0==IDENT) ) {
				int LA85_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt85=1;
				}
				else if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt85=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 85, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 85, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(85);}

			switch (alt85) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:449:9: supportsConjunction ( ws supportsConjunction )*
					{
					dbg.location(449,9);
					pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator1700);
					supportsConjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(449,29);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:449:29: ( ws supportsConjunction )*
					try { dbg.enterSubRule(83);

					loop83:
					while (true) {
						int alt83=2;
						try { dbg.enterDecision(83, decisionCanBacktrack[83]);

						try {
							isCyclicDecision = true;
							alt83 = dfa83.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(83);}

						switch (alt83) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:449:30: ws supportsConjunction
							{
							dbg.location(449,30);
							pushFollow(FOLLOW_ws_in_supportsWithOperator1703);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(449,33);
							pushFollow(FOLLOW_supportsConjunction_in_supportsWithOperator1705);
							supportsConjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop83;
						}
					}
					} finally {dbg.exitSubRule(83);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:450:11: supportsDisjunction ( ws supportsDisjunction )*
					{
					dbg.location(450,11);
					pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator1719);
					supportsDisjunction();
					state._fsp--;
					if (state.failed) return;dbg.location(450,31);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:450:31: ( ws supportsDisjunction )*
					try { dbg.enterSubRule(84);

					loop84:
					while (true) {
						int alt84=2;
						try { dbg.enterDecision(84, decisionCanBacktrack[84]);

						try {
							isCyclicDecision = true;
							alt84 = dfa84.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(84);}

						switch (alt84) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:450:32: ws supportsDisjunction
							{
							dbg.location(450,32);
							pushFollow(FOLLOW_ws_in_supportsWithOperator1722);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(450,35);
							pushFollow(FOLLOW_supportsDisjunction_in_supportsWithOperator1724);
							supportsDisjunction();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop84;
						}
					}
					} finally {dbg.exitSubRule(84);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(451, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsWithOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsWithOperator"



	// $ANTLR start "supportsConjunction"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:453:1: supportsConjunction : ( key_and ws supportsInParens ) ;
	public final void supportsConjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsConjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(453, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:454:9: ( ( key_and ws supportsInParens ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:454:11: ( key_and ws supportsInParens )
			{
			dbg.location(454,11);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:454:11: ( key_and ws supportsInParens )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:454:12: key_and ws supportsInParens
			{
			dbg.location(454,12);
			pushFollow(FOLLOW_key_and_in_supportsConjunction1752);
			key_and();
			state._fsp--;
			if (state.failed) return;dbg.location(454,20);
			pushFollow(FOLLOW_ws_in_supportsConjunction1754);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(454,23);
			pushFollow(FOLLOW_supportsInParens_in_supportsConjunction1756);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(455, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsConjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsConjunction"



	// $ANTLR start "supportsDisjunction"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:457:1: supportsDisjunction : ( key_or ws supportsInParens ) ;
	public final void supportsDisjunction() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDisjunction");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(457, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:458:9: ( ( key_or ws supportsInParens ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:458:11: ( key_or ws supportsInParens )
			{
			dbg.location(458,11);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:458:11: ( key_or ws supportsInParens )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:458:12: key_or ws supportsInParens
			{
			dbg.location(458,12);
			pushFollow(FOLLOW_key_or_in_supportsDisjunction1783);
			key_or();
			state._fsp--;
			if (state.failed) return;dbg.location(458,19);
			pushFollow(FOLLOW_ws_in_supportsDisjunction1785);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(458,22);
			pushFollow(FOLLOW_supportsInParens_in_supportsDisjunction1787);
			supportsInParens();
			state._fsp--;
			if (state.failed) return;
			}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(459, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDisjunction");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDisjunction"



	// $ANTLR start "supportsInParens"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:461:1: supportsInParens : LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN ;
	public final void supportsInParens() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsInParens");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(461, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:462:2: ( LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:2: LPAREN ( ws )? ( supportsCondition | supportsFeature ) ( ws )? RPAREN
			{
			dbg.location(463,2);
			match(input,LPAREN,FOLLOW_LPAREN_in_supportsInParens1807); if (state.failed) return;dbg.location(463,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:9: ( ws )?
			int alt86=2;
			try { dbg.enterSubRule(86);
			try { dbg.enterDecision(86, decisionCanBacktrack[86]);

			int LA86_0 = input.LA(1);
			if ( (LA86_0==COMMENT||LA86_0==NL||LA86_0==WS) ) {
				alt86=1;
			}
			} finally {dbg.exitDecision(86);}

			switch (alt86) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:9: ws
					{
					dbg.location(463,9);
					pushFollow(FOLLOW_ws_in_supportsInParens1809);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(86);}
			dbg.location(463,13);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:13: ( supportsCondition | supportsFeature )
			int alt87=2;
			try { dbg.enterSubRule(87);
			try { dbg.enterDecision(87, decisionCanBacktrack[87]);

			int LA87_0 = input.LA(1);
			if ( (LA87_0==LPAREN||LA87_0==NOT) ) {
				alt87=1;
			}
			else if ( ((LA87_0 >= AT_IDENT && LA87_0 <= AT_SIGN)||(LA87_0 >= BOTTOMCENTER_SYM && LA87_0 <= BOTTOMRIGHT_SYM)||(LA87_0 >= CHARSET_SYM && LA87_0 <= COLON)||LA87_0==COUNTER_STYLE_SYM||(LA87_0 >= DCOLON && LA87_0 <= DOT)||LA87_0==FONT_FACE_SYM||(LA87_0 >= GEN && LA87_0 <= GREATER)||(LA87_0 >= HASH && LA87_0 <= HASH_SYMBOL)||LA87_0==IDENT||LA87_0==IMPORT_SYM||(LA87_0 >= LBRACKET && LA87_0 <= LEFTTOP_SYM)||LA87_0==LESS_AND||(LA87_0 >= MEDIA_SYM && LA87_0 <= MOZ_DOCUMENT_SYM)||LA87_0==NAMESPACE_SYM||LA87_0==PAGE_SYM||(LA87_0 >= PIPE && LA87_0 <= PLUS)||(LA87_0 >= RIGHTBOTTOM_SYM && LA87_0 <= RIGHTTOP_SYM)||(LA87_0 >= SASS_AT_ROOT && LA87_0 <= SASS_DEBUG)||(LA87_0 >= SASS_EACH && LA87_0 <= SASS_ELSE)||(LA87_0 >= SASS_ERROR && LA87_0 <= SASS_FUNCTION)||(LA87_0 >= SASS_IF && LA87_0 <= SASS_MIXIN)||(LA87_0 >= SASS_RETURN && LA87_0 <= SASS_WHILE)||LA87_0==STAR||LA87_0==SUPPORTS_SYM||LA87_0==TILDE||(LA87_0 >= TOPCENTER_SYM && LA87_0 <= TOPRIGHT_SYM)||LA87_0==VARIABLE||LA87_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt87=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 87, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(87);}

			switch (alt87) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:14: supportsCondition
					{
					dbg.location(463,14);
					pushFollow(FOLLOW_supportsCondition_in_supportsInParens1813);
					supportsCondition();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:34: supportsFeature
					{
					dbg.location(463,34);
					pushFollow(FOLLOW_supportsFeature_in_supportsInParens1817);
					supportsFeature();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(87);}
			dbg.location(463,51);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:51: ( ws )?
			int alt88=2;
			try { dbg.enterSubRule(88);
			try { dbg.enterDecision(88, decisionCanBacktrack[88]);

			int LA88_0 = input.LA(1);
			if ( (LA88_0==COMMENT||LA88_0==NL||LA88_0==WS) ) {
				alt88=1;
			}
			} finally {dbg.exitDecision(88);}

			switch (alt88) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:463:51: ws
					{
					dbg.location(463,51);
					pushFollow(FOLLOW_ws_in_supportsInParens1820);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(88);}
			dbg.location(463,55);
			match(input,RPAREN,FOLLOW_RPAREN_in_supportsInParens1823); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(464, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsInParens");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsInParens"



	// $ANTLR start "supportsFeature"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:466:1: supportsFeature : supportsDecl ;
	public final void supportsFeature() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsFeature");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(466, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:467:2: ( supportsDecl )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:468:2: supportsDecl
			{
			dbg.location(468,2);
			pushFollow(FOLLOW_supportsDecl_in_supportsFeature1836);
			supportsDecl();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(469, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsFeature");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsFeature"



	// $ANTLR start "supportsDecl"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:471:1: supportsDecl : declaration ;
	public final void supportsDecl() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "supportsDecl");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(471, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:472:2: ( declaration )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:473:2: declaration
			{
			dbg.location(473,2);
			pushFollow(FOLLOW_declaration_in_supportsDecl1849);
			declaration();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(474, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "supportsDecl");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "supportsDecl"



	// $ANTLR start "at_rule"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:476:1: at_rule : ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule );
	public final void at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(476, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:477:5: ( media | page | counterStyle | fontFace | supportsAtRule | vendorAtRule )
			int alt89=6;
			try { dbg.enterDecision(89, decisionCanBacktrack[89]);

			switch ( input.LA(1) ) {
			case MEDIA_SYM:
				{
				alt89=1;
				}
				break;
			case PAGE_SYM:
				{
				alt89=2;
				}
				break;
			case COUNTER_STYLE_SYM:
				{
				alt89=3;
				}
				break;
			case FONT_FACE_SYM:
				{
				alt89=4;
				}
				break;
			case SUPPORTS_SYM:
				{
				alt89=5;
				}
				break;
			case AT_IDENT:
			case MOZ_DOCUMENT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt89=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 89, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(89);}

			switch (alt89) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:478:5: media
					{
					dbg.location(478,5);
					pushFollow(FOLLOW_media_in_at_rule1867);
					media();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:479:7: page
					{
					dbg.location(479,7);
					pushFollow(FOLLOW_page_in_at_rule1875);
					page();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:480:7: counterStyle
					{
					dbg.location(480,7);
					pushFollow(FOLLOW_counterStyle_in_at_rule1883);
					counterStyle();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:481:7: fontFace
					{
					dbg.location(481,7);
					pushFollow(FOLLOW_fontFace_in_at_rule1891);
					fontFace();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:482:7: supportsAtRule
					{
					dbg.location(482,7);
					pushFollow(FOLLOW_supportsAtRule_in_at_rule1899);
					supportsAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:483:7: vendorAtRule
					{
					dbg.location(483,7);
					pushFollow(FOLLOW_vendorAtRule_in_at_rule1907);
					vendorAtRule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(484, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "at_rule"



	// $ANTLR start "vendorAtRule"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:486:1: vendorAtRule : ( moz_document | webkitKeyframes | generic_at_rule );
	public final void vendorAtRule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "vendorAtRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(486, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:487:3: ( moz_document | webkitKeyframes | generic_at_rule )
			int alt90=3;
			try { dbg.enterDecision(90, decisionCanBacktrack[90]);

			switch ( input.LA(1) ) {
			case MOZ_DOCUMENT_SYM:
				{
				alt90=1;
				}
				break;
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt90=2;
				}
				break;
			case AT_IDENT:
				{
				alt90=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 90, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(90);}

			switch (alt90) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:487:3: moz_document
					{
					dbg.location(487,3);
					pushFollow(FOLLOW_moz_document_in_vendorAtRule1920);
					moz_document();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:487:18: webkitKeyframes
					{
					dbg.location(487,18);
					pushFollow(FOLLOW_webkitKeyframes_in_vendorAtRule1924);
					webkitKeyframes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:487:36: generic_at_rule
					{
					dbg.location(487,36);
					pushFollow(FOLLOW_generic_at_rule_in_vendorAtRule1928);
					generic_at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(487, 50);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "vendorAtRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "vendorAtRule"



	// $ANTLR start "atRuleId"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:489:1: atRuleId : ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) );
	public final void atRuleId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "atRuleId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(489, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:490:2: ( IDENT | STRING |{...}? ( cp_variable | sass_interpolation_expression_var ) )
			int alt92=3;
			try { dbg.enterDecision(92, decisionCanBacktrack[92]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				alt92=1;
				}
				break;
			case STRING:
				{
				alt92=2;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case HASH_SYMBOL:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt92=3;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 92, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(92);}

			switch (alt92) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:491:2: IDENT
					{
					dbg.location(491,2);
					match(input,IDENT,FOLLOW_IDENT_in_atRuleId1938); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:491:10: STRING
					{
					dbg.location(491,10);
					match(input,STRING,FOLLOW_STRING_in_atRuleId1942); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:491:19: {...}? ( cp_variable | sass_interpolation_expression_var )
					{
					dbg.location(491,19);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "atRuleId", "isCssPreprocessorSource()");
					}dbg.location(491,48);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:491:48: ( cp_variable | sass_interpolation_expression_var )
					int alt91=2;
					try { dbg.enterSubRule(91);
					try { dbg.enterDecision(91, decisionCanBacktrack[91]);

					int LA91_0 = input.LA(1);
					if ( (LA91_0==AT_IDENT||(LA91_0 >= BOTTOMCENTER_SYM && LA91_0 <= BOTTOMRIGHT_SYM)||LA91_0==CHARSET_SYM||LA91_0==COUNTER_STYLE_SYM||LA91_0==FONT_FACE_SYM||LA91_0==IMPORT_SYM||(LA91_0 >= LEFTBOTTOM_SYM && LA91_0 <= LEFTTOP_SYM)||LA91_0==MEDIA_SYM||LA91_0==MOZ_DOCUMENT_SYM||LA91_0==NAMESPACE_SYM||LA91_0==PAGE_SYM||(LA91_0 >= RIGHTBOTTOM_SYM && LA91_0 <= RIGHTTOP_SYM)||(LA91_0 >= SASS_AT_ROOT && LA91_0 <= SASS_DEBUG)||(LA91_0 >= SASS_EACH && LA91_0 <= SASS_ELSE)||LA91_0==SASS_EXTEND||(LA91_0 >= SASS_FOR && LA91_0 <= SASS_FUNCTION)||(LA91_0 >= SASS_IF && LA91_0 <= SASS_MIXIN)||(LA91_0 >= SASS_RETURN && LA91_0 <= SASS_WHILE)||(LA91_0 >= TOPCENTER_SYM && LA91_0 <= TOPRIGHT_SYM)||LA91_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt91=1;
					}
					else if ( (LA91_0==HASH_SYMBOL) ) {
						alt91=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 91, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(91);}

					switch (alt91) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:491:50: cp_variable
							{
							dbg.location(491,50);
							pushFollow(FOLLOW_cp_variable_in_atRuleId1950);
							cp_variable();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:491:64: sass_interpolation_expression_var
							{
							dbg.location(491,64);
							pushFollow(FOLLOW_sass_interpolation_expression_var_in_atRuleId1954);
							sass_interpolation_expression_var();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(91);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(492, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "atRuleId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "atRuleId"



	// $ANTLR start "generic_at_rule"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:494:1: generic_at_rule : AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE ;
	public final void generic_at_rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "generic_at_rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(494, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:5: ( AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:7: AT_IDENT ( ws )? ( atRuleId ( ws )? )? LBRACE syncTo_RBRACE RBRACE
			{
			dbg.location(495,7);
			match(input,AT_IDENT,FOLLOW_AT_IDENT_in_generic_at_rule1970); if (state.failed) return;dbg.location(495,16);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:16: ( ws )?
			int alt93=2;
			try { dbg.enterSubRule(93);
			try { dbg.enterDecision(93, decisionCanBacktrack[93]);

			int LA93_0 = input.LA(1);
			if ( (LA93_0==COMMENT||LA93_0==NL||LA93_0==WS) ) {
				alt93=1;
			}
			} finally {dbg.exitDecision(93);}

			switch (alt93) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:16: ws
					{
					dbg.location(495,16);
					pushFollow(FOLLOW_ws_in_generic_at_rule1972);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(93);}
			dbg.location(495,20);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:20: ( atRuleId ( ws )? )?
			int alt95=2;
			try { dbg.enterSubRule(95);
			try { dbg.enterDecision(95, decisionCanBacktrack[95]);

			int LA95_0 = input.LA(1);
			if ( (LA95_0==AT_IDENT||(LA95_0 >= BOTTOMCENTER_SYM && LA95_0 <= BOTTOMRIGHT_SYM)||LA95_0==CHARSET_SYM||LA95_0==COUNTER_STYLE_SYM||LA95_0==FONT_FACE_SYM||LA95_0==HASH_SYMBOL||LA95_0==IDENT||LA95_0==IMPORT_SYM||(LA95_0 >= LEFTBOTTOM_SYM && LA95_0 <= LEFTTOP_SYM)||LA95_0==MEDIA_SYM||LA95_0==MOZ_DOCUMENT_SYM||LA95_0==NAMESPACE_SYM||LA95_0==PAGE_SYM||(LA95_0 >= RIGHTBOTTOM_SYM && LA95_0 <= RIGHTTOP_SYM)||(LA95_0 >= SASS_AT_ROOT && LA95_0 <= SASS_DEBUG)||(LA95_0 >= SASS_EACH && LA95_0 <= SASS_ELSE)||LA95_0==SASS_EXTEND||(LA95_0 >= SASS_FOR && LA95_0 <= SASS_FUNCTION)||(LA95_0 >= SASS_IF && LA95_0 <= SASS_MIXIN)||(LA95_0 >= SASS_RETURN && LA95_0 <= SASS_WHILE)||LA95_0==STRING||(LA95_0 >= TOPCENTER_SYM && LA95_0 <= TOPRIGHT_SYM)||LA95_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt95=1;
			}
			} finally {dbg.exitDecision(95);}

			switch (alt95) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:22: atRuleId ( ws )?
					{
					dbg.location(495,22);
					pushFollow(FOLLOW_atRuleId_in_generic_at_rule1977);
					atRuleId();
					state._fsp--;
					if (state.failed) return;dbg.location(495,31);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:31: ( ws )?
					int alt94=2;
					try { dbg.enterSubRule(94);
					try { dbg.enterDecision(94, decisionCanBacktrack[94]);

					int LA94_0 = input.LA(1);
					if ( (LA94_0==COMMENT||LA94_0==NL||LA94_0==WS) ) {
						alt94=1;
					}
					} finally {dbg.exitDecision(94);}

					switch (alt94) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:495:31: ws
							{
							dbg.location(495,31);
							pushFollow(FOLLOW_ws_in_generic_at_rule1979);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(94);}

					}
					break;

			}
			} finally {dbg.exitSubRule(95);}
			dbg.location(496,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_generic_at_rule1993); if (state.failed) return;dbg.location(497,10);
			pushFollow(FOLLOW_syncTo_RBRACE_in_generic_at_rule2004);
			syncTo_RBRACE();
			state._fsp--;
			if (state.failed) return;dbg.location(498,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_generic_at_rule2014); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(499, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "generic_at_rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "generic_at_rule"



	// $ANTLR start "moz_document"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:500:1: moz_document : MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE ;
	public final void moz_document() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(500, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:501:2: ( MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:2: MOZ_DOCUMENT_SYM ( ws )? ( moz_document_function ( ws )? ) ( COMMA ( ws )? moz_document_function ( ws )? )* LBRACE ( ws )? ( body )? RBRACE
			{
			dbg.location(502,2);
			match(input,MOZ_DOCUMENT_SYM,FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2025); if (state.failed) return;dbg.location(502,19);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:19: ( ws )?
			int alt96=2;
			try { dbg.enterSubRule(96);
			try { dbg.enterDecision(96, decisionCanBacktrack[96]);

			int LA96_0 = input.LA(1);
			if ( (LA96_0==COMMENT||LA96_0==NL||LA96_0==WS) ) {
				alt96=1;
			}
			} finally {dbg.exitDecision(96);}

			switch (alt96) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:19: ws
					{
					dbg.location(502,19);
					pushFollow(FOLLOW_ws_in_moz_document2027);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(96);}
			dbg.location(502,23);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:23: ( moz_document_function ( ws )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:25: moz_document_function ( ws )?
			{
			dbg.location(502,25);
			pushFollow(FOLLOW_moz_document_function_in_moz_document2032);
			moz_document_function();
			state._fsp--;
			if (state.failed) return;dbg.location(502,47);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:47: ( ws )?
			int alt97=2;
			try { dbg.enterSubRule(97);
			try { dbg.enterDecision(97, decisionCanBacktrack[97]);

			int LA97_0 = input.LA(1);
			if ( (LA97_0==COMMENT||LA97_0==NL||LA97_0==WS) ) {
				alt97=1;
			}
			} finally {dbg.exitDecision(97);}

			switch (alt97) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:47: ws
					{
					dbg.location(502,47);
					pushFollow(FOLLOW_ws_in_moz_document2034);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(97);}

			}
			dbg.location(502,52);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:52: ( COMMA ( ws )? moz_document_function ( ws )? )*
			try { dbg.enterSubRule(100);

			loop100:
			while (true) {
				int alt100=2;
				try { dbg.enterDecision(100, decisionCanBacktrack[100]);

				int LA100_0 = input.LA(1);
				if ( (LA100_0==COMMA) ) {
					alt100=1;
				}

				} finally {dbg.exitDecision(100);}

				switch (alt100) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:54: COMMA ( ws )? moz_document_function ( ws )?
					{
					dbg.location(502,54);
					match(input,COMMA,FOLLOW_COMMA_in_moz_document2040); if (state.failed) return;dbg.location(502,60);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:60: ( ws )?
					int alt98=2;
					try { dbg.enterSubRule(98);
					try { dbg.enterDecision(98, decisionCanBacktrack[98]);

					int LA98_0 = input.LA(1);
					if ( (LA98_0==COMMENT||LA98_0==NL||LA98_0==WS) ) {
						alt98=1;
					}
					} finally {dbg.exitDecision(98);}

					switch (alt98) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:60: ws
							{
							dbg.location(502,60);
							pushFollow(FOLLOW_ws_in_moz_document2042);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(98);}
					dbg.location(502,64);
					pushFollow(FOLLOW_moz_document_function_in_moz_document2045);
					moz_document_function();
					state._fsp--;
					if (state.failed) return;dbg.location(502,86);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:86: ( ws )?
					int alt99=2;
					try { dbg.enterSubRule(99);
					try { dbg.enterDecision(99, decisionCanBacktrack[99]);

					int LA99_0 = input.LA(1);
					if ( (LA99_0==COMMENT||LA99_0==NL||LA99_0==WS) ) {
						alt99=1;
					}
					} finally {dbg.exitDecision(99);}

					switch (alt99) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:502:86: ws
							{
							dbg.location(502,86);
							pushFollow(FOLLOW_ws_in_moz_document2047);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(99);}

					}
					break;

				default :
					break loop100;
				}
			}
			} finally {dbg.exitSubRule(100);}
			dbg.location(503,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_moz_document2054); if (state.failed) return;dbg.location(503,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:503:9: ( ws )?
			int alt101=2;
			try { dbg.enterSubRule(101);
			try { dbg.enterDecision(101, decisionCanBacktrack[101]);

			int LA101_0 = input.LA(1);
			if ( (LA101_0==COMMENT||LA101_0==NL||LA101_0==WS) ) {
				alt101=1;
			}
			} finally {dbg.exitDecision(101);}

			switch (alt101) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:503:9: ws
					{
					dbg.location(503,9);
					pushFollow(FOLLOW_ws_in_moz_document2056);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(101);}
			dbg.location(504,3);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:504:3: ( body )?
			int alt102=2;
			try { dbg.enterSubRule(102);
			try { dbg.enterDecision(102, decisionCanBacktrack[102]);

			int LA102_0 = input.LA(1);
			if ( ((LA102_0 >= AT_IDENT && LA102_0 <= AT_SIGN)||(LA102_0 >= BOTTOMCENTER_SYM && LA102_0 <= BOTTOMRIGHT_SYM)||(LA102_0 >= CHARSET_SYM && LA102_0 <= COLON)||LA102_0==COUNTER_STYLE_SYM||(LA102_0 >= DCOLON && LA102_0 <= DOT)||LA102_0==FONT_FACE_SYM||(LA102_0 >= GEN && LA102_0 <= GREATER)||(LA102_0 >= HASH && LA102_0 <= HASH_SYMBOL)||LA102_0==IDENT||LA102_0==IMPORT_SYM||(LA102_0 >= LBRACKET && LA102_0 <= LEFTTOP_SYM)||LA102_0==LESS_AND||(LA102_0 >= MEDIA_SYM && LA102_0 <= MOZ_DOCUMENT_SYM)||LA102_0==NAMESPACE_SYM||LA102_0==PAGE_SYM||(LA102_0 >= PIPE && LA102_0 <= PLUS)||(LA102_0 >= RIGHTBOTTOM_SYM && LA102_0 <= RIGHTTOP_SYM)||(LA102_0 >= SASS_AT_ROOT && LA102_0 <= SASS_DEBUG)||(LA102_0 >= SASS_EACH && LA102_0 <= SASS_ELSE)||(LA102_0 >= SASS_EXTEND && LA102_0 <= SASS_FUNCTION)||(LA102_0 >= SASS_IF && LA102_0 <= SASS_MIXIN)||(LA102_0 >= SASS_RETURN && LA102_0 <= SEMI)||LA102_0==STAR||LA102_0==SUPPORTS_SYM||LA102_0==TILDE||(LA102_0 >= TOPCENTER_SYM && LA102_0 <= TOPRIGHT_SYM)||LA102_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt102=1;
			}
			} finally {dbg.exitDecision(102);}

			switch (alt102) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:504:3: body
					{
					dbg.location(504,3);
					pushFollow(FOLLOW_body_in_moz_document2061);
					body();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(102);}
			dbg.location(505,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_moz_document2066); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(506, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document"



	// $ANTLR start "moz_document_function"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:508:1: moz_document_function : ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP );
	public final void moz_document_function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "moz_document_function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(508, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:509:2: ( URI | MOZ_URL_PREFIX | MOZ_DOMAIN | MOZ_REGEXP )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(509,2);
			if ( (input.LA(1) >= MOZ_DOMAIN && input.LA(1) <= MOZ_URL_PREFIX)||input.LA(1)==URI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(511, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "moz_document_function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "moz_document_function"



	// $ANTLR start "webkitKeyframes"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:514:1: webkitKeyframes : WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE ;
	public final void webkitKeyframes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(514, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:515:2: ( WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:516:2: WEBKIT_KEYFRAMES_SYM ( ws )? atRuleId ( ws )? LBRACE ( ws )? ( webkitKeyframesBlock ( ws )? )* RBRACE
			{
			dbg.location(516,2);
			match(input,WEBKIT_KEYFRAMES_SYM,FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2103); if (state.failed) return;dbg.location(516,23);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:516:23: ( ws )?
			int alt103=2;
			try { dbg.enterSubRule(103);
			try { dbg.enterDecision(103, decisionCanBacktrack[103]);

			int LA103_0 = input.LA(1);
			if ( (LA103_0==COMMENT||LA103_0==NL||LA103_0==WS) ) {
				alt103=1;
			}
			} finally {dbg.exitDecision(103);}

			switch (alt103) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:516:23: ws
					{
					dbg.location(516,23);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2105);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(103);}
			dbg.location(516,27);
			pushFollow(FOLLOW_atRuleId_in_webkitKeyframes2108);
			atRuleId();
			state._fsp--;
			if (state.failed) return;dbg.location(516,36);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:516:36: ( ws )?
			int alt104=2;
			try { dbg.enterSubRule(104);
			try { dbg.enterDecision(104, decisionCanBacktrack[104]);

			int LA104_0 = input.LA(1);
			if ( (LA104_0==COMMENT||LA104_0==NL||LA104_0==WS) ) {
				alt104=1;
			}
			} finally {dbg.exitDecision(104);}

			switch (alt104) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:516:36: ws
					{
					dbg.location(516,36);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2110);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(104);}
			dbg.location(517,2);
			match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframes2114); if (state.failed) return;dbg.location(517,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:517:9: ( ws )?
			int alt105=2;
			try { dbg.enterSubRule(105);
			try { dbg.enterDecision(105, decisionCanBacktrack[105]);

			int LA105_0 = input.LA(1);
			if ( (LA105_0==COMMENT||LA105_0==NL||LA105_0==WS) ) {
				alt105=1;
			}
			} finally {dbg.exitDecision(105);}

			switch (alt105) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:517:9: ws
					{
					dbg.location(517,9);
					pushFollow(FOLLOW_ws_in_webkitKeyframes2116);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(105);}
			dbg.location(518,3);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:518:3: ( webkitKeyframesBlock ( ws )? )*
			try { dbg.enterSubRule(107);

			loop107:
			while (true) {
				int alt107=2;
				try { dbg.enterDecision(107, decisionCanBacktrack[107]);

				int LA107_0 = input.LA(1);
				if ( (LA107_0==IDENT||LA107_0==PERCENTAGE||LA107_0==SASS_CONTENT) ) {
					alt107=1;
				}

				} finally {dbg.exitDecision(107);}

				switch (alt107) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:518:5: webkitKeyframesBlock ( ws )?
					{
					dbg.location(518,5);
					pushFollow(FOLLOW_webkitKeyframesBlock_in_webkitKeyframes2123);
					webkitKeyframesBlock();
					state._fsp--;
					if (state.failed) return;dbg.location(518,26);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:518:26: ( ws )?
					int alt106=2;
					try { dbg.enterSubRule(106);
					try { dbg.enterDecision(106, decisionCanBacktrack[106]);

					int LA106_0 = input.LA(1);
					if ( (LA106_0==COMMENT||LA106_0==NL||LA106_0==WS) ) {
						alt106=1;
					}
					} finally {dbg.exitDecision(106);}

					switch (alt106) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:518:26: ws
							{
							dbg.location(518,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframes2125);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(106);}

					}
					break;

				default :
					break loop107;
				}
			}
			} finally {dbg.exitSubRule(107);}
			dbg.location(519,2);
			match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframes2132); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(520, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframes"



	// $ANTLR start "webkitKeyframesBlock"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:522:1: webkitKeyframesBlock : ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? );
	public final void webkitKeyframesBlock() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframesBlock");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(522, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:523:2: ( webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE |{...}?{...}? sass_content ( SEMI )? )
			int alt112=2;
			try { dbg.enterDecision(112, decisionCanBacktrack[112]);

			int LA112_0 = input.LA(1);
			if ( (LA112_0==IDENT||LA112_0==PERCENTAGE) ) {
				alt112=1;
			}
			else if ( (LA112_0==SASS_CONTENT) ) {
				alt112=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 112, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(112);}

			switch (alt112) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:524:2: webkitKeyframeSelectors ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(524,2);
					pushFollow(FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock2144);
					webkitKeyframeSelectors();
					state._fsp--;
					if (state.failed) return;dbg.location(524,26);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:524:26: ( ws )?
					int alt108=2;
					try { dbg.enterSubRule(108);
					try { dbg.enterDecision(108, decisionCanBacktrack[108]);

					int LA108_0 = input.LA(1);
					if ( (LA108_0==COMMENT||LA108_0==NL||LA108_0==WS) ) {
						alt108=1;
					}
					} finally {dbg.exitDecision(108);}

					switch (alt108) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:524:26: ws
							{
							dbg.location(524,26);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock2146);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(108);}
					dbg.location(525,2);
					match(input,LBRACE,FOLLOW_LBRACE_in_webkitKeyframesBlock2150); if (state.failed) return;dbg.location(525,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:525:10: ( ws )?
					int alt109=2;
					try { dbg.enterSubRule(109);
					try { dbg.enterDecision(109, decisionCanBacktrack[109]);

					int LA109_0 = input.LA(1);
					if ( (LA109_0==COMMENT||LA109_0==NL||LA109_0==WS) ) {
						alt109=1;
					}
					} finally {dbg.exitDecision(109);}

					switch (alt109) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:525:10: ws
							{
							dbg.location(525,10);
							pushFollow(FOLLOW_ws_in_webkitKeyframesBlock2153);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(109);}
					dbg.location(525,14);
					pushFollow(FOLLOW_syncToFollow_in_webkitKeyframesBlock2156);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(526,3);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:526:3: ( declarations )?
					int alt110=2;
					try { dbg.enterSubRule(110);
					try { dbg.enterDecision(110, decisionCanBacktrack[110]);

					int LA110_0 = input.LA(1);
					if ( ((LA110_0 >= AT_IDENT && LA110_0 <= AT_SIGN)||(LA110_0 >= BOTTOMCENTER_SYM && LA110_0 <= BOTTOMRIGHT_SYM)||(LA110_0 >= CHARSET_SYM && LA110_0 <= COLON)||LA110_0==COUNTER_STYLE_SYM||(LA110_0 >= DCOLON && LA110_0 <= DOT)||LA110_0==FONT_FACE_SYM||(LA110_0 >= GEN && LA110_0 <= GREATER)||(LA110_0 >= HASH && LA110_0 <= HASH_SYMBOL)||LA110_0==IDENT||LA110_0==IMPORT_SYM||(LA110_0 >= LBRACKET && LA110_0 <= LEFTTOP_SYM)||LA110_0==LESS_AND||(LA110_0 >= MEDIA_SYM && LA110_0 <= MOZ_DOCUMENT_SYM)||LA110_0==NAMESPACE_SYM||LA110_0==PAGE_SYM||(LA110_0 >= PIPE && LA110_0 <= PLUS)||(LA110_0 >= RIGHTBOTTOM_SYM && LA110_0 <= RIGHTTOP_SYM)||(LA110_0 >= SASS_AT_ROOT && LA110_0 <= SASS_DEBUG)||(LA110_0 >= SASS_EACH && LA110_0 <= SASS_ELSE)||(LA110_0 >= SASS_ERROR && LA110_0 <= SASS_FUNCTION)||(LA110_0 >= SASS_IF && LA110_0 <= SASS_MIXIN)||(LA110_0 >= SASS_RETURN && LA110_0 <= SEMI)||LA110_0==STAR||LA110_0==SUPPORTS_SYM||LA110_0==TILDE||(LA110_0 >= TOPCENTER_SYM && LA110_0 <= TOPRIGHT_SYM)||LA110_0==VARIABLE||LA110_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt110=1;
					}
					} finally {dbg.exitDecision(110);}

					switch (alt110) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:526:3: declarations
							{
							dbg.location(526,3);
							pushFollow(FOLLOW_declarations_in_webkitKeyframesBlock2160);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(110);}
					dbg.location(527,2);
					match(input,RBRACE,FOLLOW_RBRACE_in_webkitKeyframesBlock2164); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:528:11: {...}?{...}? sass_content ( SEMI )?
					{
					dbg.location(528,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(528,30);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframesBlock", "isScssSource()");
					}dbg.location(528,48);
					pushFollow(FOLLOW_sass_content_in_webkitKeyframesBlock2181);
					sass_content();
					state._fsp--;
					if (state.failed) return;dbg.location(528,61);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:528:61: ( SEMI )?
					int alt111=2;
					try { dbg.enterSubRule(111);
					try { dbg.enterDecision(111, decisionCanBacktrack[111]);

					int LA111_0 = input.LA(1);
					if ( (LA111_0==SEMI) ) {
						alt111=1;
					}
					} finally {dbg.exitDecision(111);}

					switch (alt111) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:528:61: SEMI
							{
							dbg.location(528,61);
							match(input,SEMI,FOLLOW_SEMI_in_webkitKeyframesBlock2183); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(111);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(529, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframesBlock");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframesBlock"



	// $ANTLR start "webkitKeyframeSelectors"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:531:1: webkitKeyframeSelectors : ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* ;
	public final void webkitKeyframeSelectors() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "webkitKeyframeSelectors");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(531, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:532:2: ( ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE ) ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			{
			dbg.location(533,2);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:2: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
			int alt113=3;
			try { dbg.enterSubRule(113);
			try { dbg.enterDecision(113, decisionCanBacktrack[113]);

			int LA113_0 = input.LA(1);
			if ( (LA113_0==IDENT) ) {
				int LA113_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
					alt113=1;
				}
				else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
					alt113=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 113, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA113_0==PERCENTAGE) ) {
				alt113=3;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 113, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(113);}

			switch (alt113) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:4: {...}? IDENT
					{
					dbg.location(533,4);
					if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
					}dbg.location(533,31);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2200); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:39: {...}? IDENT
					{
					dbg.location(533,39);
					if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
					}dbg.location(533,64);
					match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2206); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:72: PERCENTAGE
					{
					dbg.location(533,72);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2210); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(113);}
			dbg.location(533,85);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*
			try { dbg.enterSubRule(117);

			loop117:
			while (true) {
				int alt117=2;
				try { dbg.enterDecision(117, decisionCanBacktrack[117]);

				try {
					isCyclicDecision = true;
					alt117 = dfa117.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(117);}

				switch (alt117) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:87: ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					{
					dbg.location(533,87);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:87: ( ws )?
					int alt114=2;
					try { dbg.enterSubRule(114);
					try { dbg.enterDecision(114, decisionCanBacktrack[114]);

					int LA114_0 = input.LA(1);
					if ( (LA114_0==COMMENT||LA114_0==NL||LA114_0==WS) ) {
						alt114=1;
					}
					} finally {dbg.exitDecision(114);}

					switch (alt114) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:87: ws
							{
							dbg.location(533,87);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors2216);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(114);}
					dbg.location(533,91);
					match(input,COMMA,FOLLOW_COMMA_in_webkitKeyframeSelectors2219); if (state.failed) return;dbg.location(533,97);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:97: ( ws )?
					int alt115=2;
					try { dbg.enterSubRule(115);
					try { dbg.enterDecision(115, decisionCanBacktrack[115]);

					int LA115_0 = input.LA(1);
					if ( (LA115_0==COMMENT||LA115_0==NL||LA115_0==WS) ) {
						alt115=1;
					}
					} finally {dbg.exitDecision(115);}

					switch (alt115) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:97: ws
							{
							dbg.location(533,97);
							pushFollow(FOLLOW_ws_in_webkitKeyframeSelectors2221);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(115);}
					dbg.location(533,101);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:101: ({...}? IDENT |{...}? IDENT | PERCENTAGE )
					int alt116=3;
					try { dbg.enterSubRule(116);
					try { dbg.enterDecision(116, decisionCanBacktrack[116]);

					int LA116_0 = input.LA(1);
					if ( (LA116_0==IDENT) ) {
						int LA116_1 = input.LA(2);
						if ( (evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
							alt116=1;
						}
						else if ( (evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
							alt116=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 116, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

					}
					else if ( (LA116_0==PERCENTAGE) ) {
						alt116=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 116, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(116);}

					switch (alt116) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:103: {...}? IDENT
							{
							dbg.location(533,103);
							if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"from\")");
							}dbg.location(533,130);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2228); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:138: {...}? IDENT
							{
							dbg.location(533,138);
							if ( !(evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "webkitKeyframeSelectors", "tokenNameEquals(\"to\")");
							}dbg.location(533,163);
							match(input,IDENT,FOLLOW_IDENT_in_webkitKeyframeSelectors2234); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:533:171: PERCENTAGE
							{
							dbg.location(533,171);
							match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2238); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(116);}

					}
					break;

				default :
					break loop117;
				}
			}
			} finally {dbg.exitSubRule(117);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(534, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "webkitKeyframeSelectors");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "webkitKeyframeSelectors"



	// $ANTLR start "page"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:536:1: page : PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE ;
	public final void page() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "page");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(536, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:5: ( PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:7: PAGE_SYM ( ws )? ( IDENT ( ws )? )? ( pseudoPage ( ws )? )? LBRACE ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )* RBRACE
			{
			dbg.location(537,7);
			match(input,PAGE_SYM,FOLLOW_PAGE_SYM_in_page2257); if (state.failed) return;dbg.location(537,16);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:16: ( ws )?
			int alt118=2;
			try { dbg.enterSubRule(118);
			try { dbg.enterDecision(118, decisionCanBacktrack[118]);

			int LA118_0 = input.LA(1);
			if ( (LA118_0==COMMENT||LA118_0==NL||LA118_0==WS) ) {
				alt118=1;
			}
			} finally {dbg.exitDecision(118);}

			switch (alt118) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:16: ws
					{
					dbg.location(537,16);
					pushFollow(FOLLOW_ws_in_page2259);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(118);}
			dbg.location(537,20);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:20: ( IDENT ( ws )? )?
			int alt120=2;
			try { dbg.enterSubRule(120);
			try { dbg.enterDecision(120, decisionCanBacktrack[120]);

			int LA120_0 = input.LA(1);
			if ( (LA120_0==IDENT) ) {
				alt120=1;
			}
			} finally {dbg.exitDecision(120);}

			switch (alt120) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:22: IDENT ( ws )?
					{
					dbg.location(537,22);
					match(input,IDENT,FOLLOW_IDENT_in_page2264); if (state.failed) return;dbg.location(537,28);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:28: ( ws )?
					int alt119=2;
					try { dbg.enterSubRule(119);
					try { dbg.enterDecision(119, decisionCanBacktrack[119]);

					int LA119_0 = input.LA(1);
					if ( (LA119_0==COMMENT||LA119_0==NL||LA119_0==WS) ) {
						alt119=1;
					}
					} finally {dbg.exitDecision(119);}

					switch (alt119) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:28: ws
							{
							dbg.location(537,28);
							pushFollow(FOLLOW_ws_in_page2266);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(119);}

					}
					break;

			}
			} finally {dbg.exitSubRule(120);}
			dbg.location(537,35);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:35: ( pseudoPage ( ws )? )?
			int alt122=2;
			try { dbg.enterSubRule(122);
			try { dbg.enterDecision(122, decisionCanBacktrack[122]);

			int LA122_0 = input.LA(1);
			if ( (LA122_0==COLON) ) {
				alt122=1;
			}
			} finally {dbg.exitDecision(122);}

			switch (alt122) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:36: pseudoPage ( ws )?
					{
					dbg.location(537,36);
					pushFollow(FOLLOW_pseudoPage_in_page2273);
					pseudoPage();
					state._fsp--;
					if (state.failed) return;dbg.location(537,47);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:47: ( ws )?
					int alt121=2;
					try { dbg.enterSubRule(121);
					try { dbg.enterDecision(121, decisionCanBacktrack[121]);

					int LA121_0 = input.LA(1);
					if ( (LA121_0==COMMENT||LA121_0==NL||LA121_0==WS) ) {
						alt121=1;
					}
					} finally {dbg.exitDecision(121);}

					switch (alt121) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:537:47: ws
							{
							dbg.location(537,47);
							pushFollow(FOLLOW_ws_in_page2275);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(121);}

					}
					break;

			}
			} finally {dbg.exitSubRule(122);}
			dbg.location(538,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_page2288); if (state.failed) return;dbg.location(538,16);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:538:16: ( ws )?
			int alt123=2;
			try { dbg.enterSubRule(123);
			try { dbg.enterDecision(123, decisionCanBacktrack[123]);

			int LA123_0 = input.LA(1);
			if ( (LA123_0==COMMENT||LA123_0==NL||LA123_0==WS) ) {
				alt123=1;
			}
			} finally {dbg.exitDecision(123);}

			switch (alt123) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:538:16: ws
					{
					dbg.location(538,16);
					pushFollow(FOLLOW_ws_in_page2290);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(123);}
			dbg.location(541,13);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:13: ( ( propertyDeclaration | margin ) ( ws )? )?
			int alt126=2;
			try { dbg.enterSubRule(126);
			try { dbg.enterDecision(126, decisionCanBacktrack[126]);

			int LA126_0 = input.LA(1);
			if ( ((LA126_0 >= AT_IDENT && LA126_0 <= AT_SIGN)||(LA126_0 >= BOTTOMCENTER_SYM && LA126_0 <= BOTTOMRIGHT_SYM)||LA126_0==CHARSET_SYM||LA126_0==COUNTER_STYLE_SYM||LA126_0==FONT_FACE_SYM||LA126_0==GEN||LA126_0==HASH_SYMBOL||LA126_0==IDENT||LA126_0==IMPORT_SYM||(LA126_0 >= LEFTBOTTOM_SYM && LA126_0 <= LEFTTOP_SYM)||(LA126_0 >= MEDIA_SYM && LA126_0 <= MOZ_DOCUMENT_SYM)||LA126_0==NAMESPACE_SYM||LA126_0==PAGE_SYM||(LA126_0 >= RIGHTBOTTOM_SYM && LA126_0 <= RIGHTTOP_SYM)||(LA126_0 >= SASS_AT_ROOT && LA126_0 <= SASS_DEBUG)||(LA126_0 >= SASS_EACH && LA126_0 <= SASS_ELSE)||LA126_0==SASS_EXTEND||(LA126_0 >= SASS_FOR && LA126_0 <= SASS_FUNCTION)||(LA126_0 >= SASS_IF && LA126_0 <= SASS_MIXIN)||(LA126_0 >= SASS_RETURN && LA126_0 <= SASS_WHILE)||LA126_0==STAR||(LA126_0 >= TOPCENTER_SYM && LA126_0 <= TOPRIGHT_SYM)||LA126_0==VARIABLE||LA126_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt126=1;
			}
			} finally {dbg.exitDecision(126);}

			switch (alt126) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:14: ( propertyDeclaration | margin ) ( ws )?
					{
					dbg.location(541,14);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:14: ( propertyDeclaration | margin )
					int alt124=2;
					try { dbg.enterSubRule(124);
					try { dbg.enterDecision(124, decisionCanBacktrack[124]);

					try {
						isCyclicDecision = true;
						alt124 = dfa124.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(124);}

					switch (alt124) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:15: propertyDeclaration
							{
							dbg.location(541,15);
							pushFollow(FOLLOW_propertyDeclaration_in_page2333);
							propertyDeclaration();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:35: margin
							{
							dbg.location(541,35);
							pushFollow(FOLLOW_margin_in_page2335);
							margin();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(124);}
					dbg.location(541,43);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:43: ( ws )?
					int alt125=2;
					try { dbg.enterSubRule(125);
					try { dbg.enterDecision(125, decisionCanBacktrack[125]);

					int LA125_0 = input.LA(1);
					if ( (LA125_0==COMMENT||LA125_0==NL||LA125_0==WS) ) {
						alt125=1;
					}
					} finally {dbg.exitDecision(125);}

					switch (alt125) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:43: ws
							{
							dbg.location(541,43);
							pushFollow(FOLLOW_ws_in_page2338);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(125);}

					}
					break;

			}
			} finally {dbg.exitSubRule(126);}
			dbg.location(541,49);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:49: ( SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )? )*
			try { dbg.enterSubRule(131);

			loop131:
			while (true) {
				int alt131=2;
				try { dbg.enterDecision(131, decisionCanBacktrack[131]);

				int LA131_0 = input.LA(1);
				if ( (LA131_0==SEMI) ) {
					alt131=1;
				}

				} finally {dbg.exitDecision(131);}

				switch (alt131) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:50: SEMI ( ws )? ( ( propertyDeclaration | margin ) ( ws )? )?
					{
					dbg.location(541,50);
					match(input,SEMI,FOLLOW_SEMI_in_page2344); if (state.failed) return;dbg.location(541,55);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:55: ( ws )?
					int alt127=2;
					try { dbg.enterSubRule(127);
					try { dbg.enterDecision(127, decisionCanBacktrack[127]);

					int LA127_0 = input.LA(1);
					if ( (LA127_0==COMMENT||LA127_0==NL||LA127_0==WS) ) {
						alt127=1;
					}
					} finally {dbg.exitDecision(127);}

					switch (alt127) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:55: ws
							{
							dbg.location(541,55);
							pushFollow(FOLLOW_ws_in_page2346);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(127);}
					dbg.location(541,59);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:59: ( ( propertyDeclaration | margin ) ( ws )? )?
					int alt130=2;
					try { dbg.enterSubRule(130);
					try { dbg.enterDecision(130, decisionCanBacktrack[130]);

					int LA130_0 = input.LA(1);
					if ( ((LA130_0 >= AT_IDENT && LA130_0 <= AT_SIGN)||(LA130_0 >= BOTTOMCENTER_SYM && LA130_0 <= BOTTOMRIGHT_SYM)||LA130_0==CHARSET_SYM||LA130_0==COUNTER_STYLE_SYM||LA130_0==FONT_FACE_SYM||LA130_0==GEN||LA130_0==HASH_SYMBOL||LA130_0==IDENT||LA130_0==IMPORT_SYM||(LA130_0 >= LEFTBOTTOM_SYM && LA130_0 <= LEFTTOP_SYM)||(LA130_0 >= MEDIA_SYM && LA130_0 <= MOZ_DOCUMENT_SYM)||LA130_0==NAMESPACE_SYM||LA130_0==PAGE_SYM||(LA130_0 >= RIGHTBOTTOM_SYM && LA130_0 <= RIGHTTOP_SYM)||(LA130_0 >= SASS_AT_ROOT && LA130_0 <= SASS_DEBUG)||(LA130_0 >= SASS_EACH && LA130_0 <= SASS_ELSE)||LA130_0==SASS_EXTEND||(LA130_0 >= SASS_FOR && LA130_0 <= SASS_FUNCTION)||(LA130_0 >= SASS_IF && LA130_0 <= SASS_MIXIN)||(LA130_0 >= SASS_RETURN && LA130_0 <= SASS_WHILE)||LA130_0==STAR||(LA130_0 >= TOPCENTER_SYM && LA130_0 <= TOPRIGHT_SYM)||LA130_0==VARIABLE||LA130_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt130=1;
					}
					} finally {dbg.exitDecision(130);}

					switch (alt130) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:60: ( propertyDeclaration | margin ) ( ws )?
							{
							dbg.location(541,60);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:60: ( propertyDeclaration | margin )
							int alt128=2;
							try { dbg.enterSubRule(128);
							try { dbg.enterDecision(128, decisionCanBacktrack[128]);

							try {
								isCyclicDecision = true;
								alt128 = dfa128.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(128);}

							switch (alt128) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:61: propertyDeclaration
									{
									dbg.location(541,61);
									pushFollow(FOLLOW_propertyDeclaration_in_page2351);
									propertyDeclaration();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:81: margin
									{
									dbg.location(541,81);
									pushFollow(FOLLOW_margin_in_page2353);
									margin();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(128);}
							dbg.location(541,89);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:89: ( ws )?
							int alt129=2;
							try { dbg.enterSubRule(129);
							try { dbg.enterDecision(129, decisionCanBacktrack[129]);

							int LA129_0 = input.LA(1);
							if ( (LA129_0==COMMENT||LA129_0==NL||LA129_0==WS) ) {
								alt129=1;
							}
							} finally {dbg.exitDecision(129);}

							switch (alt129) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:541:89: ws
									{
									dbg.location(541,89);
									pushFollow(FOLLOW_ws_in_page2356);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(129);}

							}
							break;

					}
					} finally {dbg.exitSubRule(130);}

					}
					break;

				default :
					break loop131;
				}
			}
			} finally {dbg.exitSubRule(131);}
			dbg.location(542,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_page2371); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(543, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "page");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "page"



	// $ANTLR start "counterStyle"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:545:1: counterStyle : COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void counterStyle() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "counterStyle");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(545, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:546:5: ( COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:546:7: COUNTER_STYLE_SYM ( ws )? IDENT ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(546,7);
			match(input,COUNTER_STYLE_SYM,FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2388); if (state.failed) return;dbg.location(546,25);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:546:25: ( ws )?
			int alt132=2;
			try { dbg.enterSubRule(132);
			try { dbg.enterDecision(132, decisionCanBacktrack[132]);

			int LA132_0 = input.LA(1);
			if ( (LA132_0==COMMENT||LA132_0==NL||LA132_0==WS) ) {
				alt132=1;
			}
			} finally {dbg.exitDecision(132);}

			switch (alt132) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:546:25: ws
					{
					dbg.location(546,25);
					pushFollow(FOLLOW_ws_in_counterStyle2390);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(132);}
			dbg.location(546,29);
			match(input,IDENT,FOLLOW_IDENT_in_counterStyle2393); if (state.failed) return;dbg.location(546,35);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:546:35: ( ws )?
			int alt133=2;
			try { dbg.enterSubRule(133);
			try { dbg.enterDecision(133, decisionCanBacktrack[133]);

			int LA133_0 = input.LA(1);
			if ( (LA133_0==COMMENT||LA133_0==NL||LA133_0==WS) ) {
				alt133=1;
			}
			} finally {dbg.exitDecision(133);}

			switch (alt133) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:546:35: ws
					{
					dbg.location(546,35);
					pushFollow(FOLLOW_ws_in_counterStyle2395);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(133);}
			dbg.location(547,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_counterStyle2406); if (state.failed) return;dbg.location(547,16);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:547:16: ( ws )?
			int alt134=2;
			try { dbg.enterSubRule(134);
			try { dbg.enterDecision(134, decisionCanBacktrack[134]);

			int LA134_0 = input.LA(1);
			if ( (LA134_0==COMMENT||LA134_0==NL||LA134_0==WS) ) {
				alt134=1;
			}
			} finally {dbg.exitDecision(134);}

			switch (alt134) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:547:16: ws
					{
					dbg.location(547,16);
					pushFollow(FOLLOW_ws_in_counterStyle2408);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(134);}
			dbg.location(547,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_counterStyle2411);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(548,3);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:548:3: ( declarations )?
			int alt135=2;
			try { dbg.enterSubRule(135);
			try { dbg.enterDecision(135, decisionCanBacktrack[135]);

			int LA135_0 = input.LA(1);
			if ( ((LA135_0 >= AT_IDENT && LA135_0 <= AT_SIGN)||(LA135_0 >= BOTTOMCENTER_SYM && LA135_0 <= BOTTOMRIGHT_SYM)||(LA135_0 >= CHARSET_SYM && LA135_0 <= COLON)||LA135_0==COUNTER_STYLE_SYM||(LA135_0 >= DCOLON && LA135_0 <= DOT)||LA135_0==FONT_FACE_SYM||(LA135_0 >= GEN && LA135_0 <= GREATER)||(LA135_0 >= HASH && LA135_0 <= HASH_SYMBOL)||LA135_0==IDENT||LA135_0==IMPORT_SYM||(LA135_0 >= LBRACKET && LA135_0 <= LEFTTOP_SYM)||LA135_0==LESS_AND||(LA135_0 >= MEDIA_SYM && LA135_0 <= MOZ_DOCUMENT_SYM)||LA135_0==NAMESPACE_SYM||LA135_0==PAGE_SYM||(LA135_0 >= PIPE && LA135_0 <= PLUS)||(LA135_0 >= RIGHTBOTTOM_SYM && LA135_0 <= RIGHTTOP_SYM)||(LA135_0 >= SASS_AT_ROOT && LA135_0 <= SASS_DEBUG)||(LA135_0 >= SASS_EACH && LA135_0 <= SASS_ELSE)||(LA135_0 >= SASS_ERROR && LA135_0 <= SASS_FUNCTION)||(LA135_0 >= SASS_IF && LA135_0 <= SASS_MIXIN)||(LA135_0 >= SASS_RETURN && LA135_0 <= SEMI)||LA135_0==STAR||LA135_0==SUPPORTS_SYM||LA135_0==TILDE||(LA135_0 >= TOPCENTER_SYM && LA135_0 <= TOPRIGHT_SYM)||LA135_0==VARIABLE||LA135_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt135=1;
			}
			} finally {dbg.exitDecision(135);}

			switch (alt135) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:548:3: declarations
					{
					dbg.location(548,3);
					pushFollow(FOLLOW_declarations_in_counterStyle2415);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(135);}
			dbg.location(549,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_counterStyle2426); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(550, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "counterStyle");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "counterStyle"



	// $ANTLR start "fontFace"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:552:1: fontFace : FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void fontFace() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fontFace");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(552, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:553:5: ( FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:553:7: FONT_FACE_SYM ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(553,7);
			match(input,FONT_FACE_SYM,FOLLOW_FONT_FACE_SYM_in_fontFace2443); if (state.failed) return;dbg.location(553,21);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:553:21: ( ws )?
			int alt136=2;
			try { dbg.enterSubRule(136);
			try { dbg.enterDecision(136, decisionCanBacktrack[136]);

			int LA136_0 = input.LA(1);
			if ( (LA136_0==COMMENT||LA136_0==NL||LA136_0==WS) ) {
				alt136=1;
			}
			} finally {dbg.exitDecision(136);}

			switch (alt136) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:553:21: ws
					{
					dbg.location(553,21);
					pushFollow(FOLLOW_ws_in_fontFace2445);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(136);}
			dbg.location(554,9);
			match(input,LBRACE,FOLLOW_LBRACE_in_fontFace2456); if (state.failed) return;dbg.location(554,16);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:554:16: ( ws )?
			int alt137=2;
			try { dbg.enterSubRule(137);
			try { dbg.enterDecision(137, decisionCanBacktrack[137]);

			int LA137_0 = input.LA(1);
			if ( (LA137_0==COMMENT||LA137_0==NL||LA137_0==WS) ) {
				alt137=1;
			}
			} finally {dbg.exitDecision(137);}

			switch (alt137) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:554:16: ws
					{
					dbg.location(554,16);
					pushFollow(FOLLOW_ws_in_fontFace2458);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(137);}
			dbg.location(554,20);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_fontFace2461);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(555,3);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:555:3: ( declarations )?
			int alt138=2;
			try { dbg.enterSubRule(138);
			try { dbg.enterDecision(138, decisionCanBacktrack[138]);

			int LA138_0 = input.LA(1);
			if ( ((LA138_0 >= AT_IDENT && LA138_0 <= AT_SIGN)||(LA138_0 >= BOTTOMCENTER_SYM && LA138_0 <= BOTTOMRIGHT_SYM)||(LA138_0 >= CHARSET_SYM && LA138_0 <= COLON)||LA138_0==COUNTER_STYLE_SYM||(LA138_0 >= DCOLON && LA138_0 <= DOT)||LA138_0==FONT_FACE_SYM||(LA138_0 >= GEN && LA138_0 <= GREATER)||(LA138_0 >= HASH && LA138_0 <= HASH_SYMBOL)||LA138_0==IDENT||LA138_0==IMPORT_SYM||(LA138_0 >= LBRACKET && LA138_0 <= LEFTTOP_SYM)||LA138_0==LESS_AND||(LA138_0 >= MEDIA_SYM && LA138_0 <= MOZ_DOCUMENT_SYM)||LA138_0==NAMESPACE_SYM||LA138_0==PAGE_SYM||(LA138_0 >= PIPE && LA138_0 <= PLUS)||(LA138_0 >= RIGHTBOTTOM_SYM && LA138_0 <= RIGHTTOP_SYM)||(LA138_0 >= SASS_AT_ROOT && LA138_0 <= SASS_DEBUG)||(LA138_0 >= SASS_EACH && LA138_0 <= SASS_ELSE)||(LA138_0 >= SASS_ERROR && LA138_0 <= SASS_FUNCTION)||(LA138_0 >= SASS_IF && LA138_0 <= SASS_MIXIN)||(LA138_0 >= SASS_RETURN && LA138_0 <= SEMI)||LA138_0==STAR||LA138_0==SUPPORTS_SYM||LA138_0==TILDE||(LA138_0 >= TOPCENTER_SYM && LA138_0 <= TOPRIGHT_SYM)||LA138_0==VARIABLE||LA138_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt138=1;
			}
			} finally {dbg.exitDecision(138);}

			switch (alt138) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:555:3: declarations
					{
					dbg.location(555,3);
					pushFollow(FOLLOW_declarations_in_fontFace2465);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(138);}
			dbg.location(556,9);
			match(input,RBRACE,FOLLOW_RBRACE_in_fontFace2476); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(557, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fontFace");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fontFace"



	// $ANTLR start "margin"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:559:1: margin : margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE ;
	public final void margin() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(559, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:2: ( margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:4: margin_sym ( ws )? LBRACE ( ws )? syncToDeclarationsRule ( declarations )? RBRACE
			{
			dbg.location(560,4);
			pushFollow(FOLLOW_margin_sym_in_margin2490);
			margin_sym();
			state._fsp--;
			if (state.failed) return;dbg.location(560,15);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:15: ( ws )?
			int alt139=2;
			try { dbg.enterSubRule(139);
			try { dbg.enterDecision(139, decisionCanBacktrack[139]);

			int LA139_0 = input.LA(1);
			if ( (LA139_0==COMMENT||LA139_0==NL||LA139_0==WS) ) {
				alt139=1;
			}
			} finally {dbg.exitDecision(139);}

			switch (alt139) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:15: ws
					{
					dbg.location(560,15);
					pushFollow(FOLLOW_ws_in_margin2492);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(139);}
			dbg.location(560,19);
			match(input,LBRACE,FOLLOW_LBRACE_in_margin2495); if (state.failed) return;dbg.location(560,26);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:26: ( ws )?
			int alt140=2;
			try { dbg.enterSubRule(140);
			try { dbg.enterDecision(140, decisionCanBacktrack[140]);

			int LA140_0 = input.LA(1);
			if ( (LA140_0==COMMENT||LA140_0==NL||LA140_0==WS) ) {
				alt140=1;
			}
			} finally {dbg.exitDecision(140);}

			switch (alt140) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:26: ws
					{
					dbg.location(560,26);
					pushFollow(FOLLOW_ws_in_margin2497);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(140);}
			dbg.location(560,30);
			pushFollow(FOLLOW_syncToDeclarationsRule_in_margin2500);
			syncToDeclarationsRule();
			state._fsp--;
			if (state.failed) return;dbg.location(560,53);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:53: ( declarations )?
			int alt141=2;
			try { dbg.enterSubRule(141);
			try { dbg.enterDecision(141, decisionCanBacktrack[141]);

			int LA141_0 = input.LA(1);
			if ( ((LA141_0 >= AT_IDENT && LA141_0 <= AT_SIGN)||(LA141_0 >= BOTTOMCENTER_SYM && LA141_0 <= BOTTOMRIGHT_SYM)||(LA141_0 >= CHARSET_SYM && LA141_0 <= COLON)||LA141_0==COUNTER_STYLE_SYM||(LA141_0 >= DCOLON && LA141_0 <= DOT)||LA141_0==FONT_FACE_SYM||(LA141_0 >= GEN && LA141_0 <= GREATER)||(LA141_0 >= HASH && LA141_0 <= HASH_SYMBOL)||LA141_0==IDENT||LA141_0==IMPORT_SYM||(LA141_0 >= LBRACKET && LA141_0 <= LEFTTOP_SYM)||LA141_0==LESS_AND||(LA141_0 >= MEDIA_SYM && LA141_0 <= MOZ_DOCUMENT_SYM)||LA141_0==NAMESPACE_SYM||LA141_0==PAGE_SYM||(LA141_0 >= PIPE && LA141_0 <= PLUS)||(LA141_0 >= RIGHTBOTTOM_SYM && LA141_0 <= RIGHTTOP_SYM)||(LA141_0 >= SASS_AT_ROOT && LA141_0 <= SASS_DEBUG)||(LA141_0 >= SASS_EACH && LA141_0 <= SASS_ELSE)||(LA141_0 >= SASS_ERROR && LA141_0 <= SASS_FUNCTION)||(LA141_0 >= SASS_IF && LA141_0 <= SASS_MIXIN)||(LA141_0 >= SASS_RETURN && LA141_0 <= SEMI)||LA141_0==STAR||LA141_0==SUPPORTS_SYM||LA141_0==TILDE||(LA141_0 >= TOPCENTER_SYM && LA141_0 <= TOPRIGHT_SYM)||LA141_0==VARIABLE||LA141_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt141=1;
			}
			} finally {dbg.exitDecision(141);}

			switch (alt141) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:560:53: declarations
					{
					dbg.location(560,53);
					pushFollow(FOLLOW_declarations_in_margin2502);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(141);}
			dbg.location(560,67);
			match(input,RBRACE,FOLLOW_RBRACE_in_margin2505); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(561, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin"



	// $ANTLR start "margin_sym"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:563:1: margin_sym : ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM );
	public final void margin_sym() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "margin_sym");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(563, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:564:2: ( TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(564,2);
			if ( (input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM) ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(581, 7);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "margin_sym");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "margin_sym"



	// $ANTLR start "pseudoPage"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:583:1: pseudoPage : COLON IDENT ;
	public final void pseudoPage() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudoPage");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(583, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:584:5: ( COLON IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:584:7: COLON IDENT
			{
			dbg.location(584,7);
			match(input,COLON,FOLLOW_COLON_in_pseudoPage2714); if (state.failed) return;dbg.location(584,13);
			match(input,IDENT,FOLLOW_IDENT_in_pseudoPage2716); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(585, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudoPage");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudoPage"



	// $ANTLR start "operator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:587:1: operator : ( SOLIDUS | COMMA );
	public final void operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(587, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:588:5: ( SOLIDUS | COMMA )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(588,5);
			if ( input.LA(1)==COMMA||input.LA(1)==SOLIDUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(590, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "operator"



	// $ANTLR start "unaryOperator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:592:1: unaryOperator : ( MINUS | PLUS );
	public final void unaryOperator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "unaryOperator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(592, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:593:5: ( MINUS | PLUS )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(593,5);
			if ( input.LA(1)==MINUS||input.LA(1)==PLUS ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(595, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "unaryOperator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "unaryOperator"



	// $ANTLR start "property"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:597:1: property : ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable );
	public final void property() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "property");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(597, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:598:5: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | VARIABLE | IDENT | GEN |{...}? cp_variable )
			int alt142=6;
			try { dbg.enterDecision(142, decisionCanBacktrack[142]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				switch ( input.LA(2) ) {
				case HASH_SYMBOL:
					{
					alt142=1;
					}
					break;
				case AT_SIGN:
					{
					alt142=2;
					}
					break;
				case COLON:
				case COMMENT:
				case NL:
				case WS:
					{
					alt142=4;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 142, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH_SYMBOL:
				{
				alt142=1;
				}
				break;
			case AT_SIGN:
				{
				alt142=2;
				}
				break;
			case VARIABLE:
				{
				alt142=3;
				}
				break;
			case MINUS:
				{
				int LA142_5 = input.LA(2);
				if ( (LA142_5==HASH_SYMBOL) ) {
					alt142=1;
				}
				else if ( (LA142_5==AT_SIGN) ) {
					alt142=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 142, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				alt142=5;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt142=6;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 142, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(142);}

			switch (alt142) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:602:5: {...}? sass_selector_interpolation_exp
					{
					dbg.location(602,5);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isScssSource()");
					}dbg.location(602,23);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_property2800);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:603:7: {...}? less_selector_interpolation_exp
					{
					dbg.location(603,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isLessSource()");
					}dbg.location(603,25);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_property2810);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:604:7: VARIABLE
					{
					dbg.location(604,7);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_property2818); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:605:7: IDENT
					{
					dbg.location(605,7);
					match(input,IDENT,FOLLOW_IDENT_in_property2826); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:606:7: GEN
					{
					dbg.location(606,7);
					match(input,GEN,FOLLOW_GEN_in_property2834); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:607:7: {...}? cp_variable
					{
					dbg.location(607,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "property", "isCssPreprocessorSource()");
					}dbg.location(607,36);
					pushFollow(FOLLOW_cp_variable_in_property2844);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(COLON));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(609, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "property");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "property"



	// $ANTLR start "sass_map"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:614:1: sass_map : sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* ;
	public final void sass_map() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(614, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:615:5: ( sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:616:5: sass_map_name COLON ( ws )? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			{
			dbg.location(616,5);
			pushFollow(FOLLOW_sass_map_name_in_sass_map2871);
			sass_map_name();
			state._fsp--;
			if (state.failed) return;dbg.location(616,19);
			match(input,COLON,FOLLOW_COLON_in_sass_map2873); if (state.failed) return;dbg.location(616,25);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:616:25: ( ws )?
			int alt143=2;
			try { dbg.enterSubRule(143);
			try { dbg.enterDecision(143, decisionCanBacktrack[143]);

			int LA143_0 = input.LA(1);
			if ( (LA143_0==COMMENT||LA143_0==NL||LA143_0==WS) ) {
				alt143=1;
			}
			} finally {dbg.exitDecision(143);}

			switch (alt143) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:616:25: ws
					{
					dbg.location(616,25);
					pushFollow(FOLLOW_ws_in_sass_map2875);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(143);}
			dbg.location(616,29);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_map2878); if (state.failed) return;dbg.location(616,36);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:616:36: ( ws )?
			int alt144=2;
			try { dbg.enterSubRule(144);
			try { dbg.enterDecision(144, decisionCanBacktrack[144]);

			int LA144_0 = input.LA(1);
			if ( (LA144_0==COMMENT||LA144_0==NL||LA144_0==WS) ) {
				alt144=1;
			}
			} finally {dbg.exitDecision(144);}

			switch (alt144) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:616:36: ws
					{
					dbg.location(616,36);
					pushFollow(FOLLOW_ws_in_sass_map2880);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(144);}
			dbg.location(616,40);
			pushFollow(FOLLOW_syncToFollow_in_sass_map2883);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(618,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:618:9: ( sass_map_pairs )?
			int alt145=2;
			try { dbg.enterSubRule(145);
			try { dbg.enterDecision(145, decisionCanBacktrack[145]);

			int LA145_0 = input.LA(1);
			if ( ((LA145_0 >= AT_IDENT && LA145_0 <= AT_SIGN)||(LA145_0 >= BOTTOMCENTER_SYM && LA145_0 <= BOTTOMRIGHT_SYM)||LA145_0==CHARSET_SYM||LA145_0==COMMA||LA145_0==COUNTER_STYLE_SYM||LA145_0==FONT_FACE_SYM||LA145_0==GEN||LA145_0==HASH_SYMBOL||LA145_0==IDENT||LA145_0==IMPORT_SYM||(LA145_0 >= LEFTBOTTOM_SYM && LA145_0 <= LEFTTOP_SYM)||(LA145_0 >= MEDIA_SYM && LA145_0 <= MOZ_DOCUMENT_SYM)||LA145_0==NAMESPACE_SYM||LA145_0==NUMBER||LA145_0==PAGE_SYM||(LA145_0 >= RIGHTBOTTOM_SYM && LA145_0 <= RIGHTTOP_SYM)||(LA145_0 >= SASS_AT_ROOT && LA145_0 <= SASS_DEBUG)||(LA145_0 >= SASS_EACH && LA145_0 <= SASS_ELSE)||LA145_0==SASS_EXTEND||(LA145_0 >= SASS_FOR && LA145_0 <= SASS_FUNCTION)||(LA145_0 >= SASS_IF && LA145_0 <= SASS_MIXIN)||(LA145_0 >= SASS_RETURN && LA145_0 <= SASS_WHILE)||LA145_0==STRING||(LA145_0 >= TOPCENTER_SYM && LA145_0 <= TOPRIGHT_SYM)||LA145_0==VARIABLE||LA145_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt145=1;
			}
			} finally {dbg.exitDecision(145);}

			switch (alt145) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:618:9: sass_map_pairs
					{
					dbg.location(618,9);
					pushFollow(FOLLOW_sass_map_pairs_in_sass_map2902);
					sass_map_pairs();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(145);}
			dbg.location(619,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_map2909); if (state.failed) return;dbg.location(619,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
			try { dbg.enterSubRule(148);

			loop148:
			while (true) {
				int alt148=3;
				try { dbg.enterDecision(148, decisionCanBacktrack[148]);

				try {
					isCyclicDecision = true;
					alt148 = dfa148.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(148);}

				switch (alt148) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:13: ( ( ws )? SASS_DEFAULT )
					{
					dbg.location(619,13);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:13: ( ( ws )? SASS_DEFAULT )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:14: ( ws )? SASS_DEFAULT
					{
					dbg.location(619,14);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:14: ( ws )?
					int alt146=2;
					try { dbg.enterSubRule(146);
					try { dbg.enterDecision(146, decisionCanBacktrack[146]);

					int LA146_0 = input.LA(1);
					if ( (LA146_0==COMMENT||LA146_0==NL||LA146_0==WS) ) {
						alt146=1;
					}
					} finally {dbg.exitDecision(146);}

					switch (alt146) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:14: ws
							{
							dbg.location(619,14);
							pushFollow(FOLLOW_ws_in_sass_map2913);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(146);}
					dbg.location(619,18);
					match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_sass_map2916); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:34: ( ( ws )? SASS_GLOBAL )
					{
					dbg.location(619,34);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:34: ( ( ws )? SASS_GLOBAL )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:35: ( ws )? SASS_GLOBAL
					{
					dbg.location(619,35);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:35: ( ws )?
					int alt147=2;
					try { dbg.enterSubRule(147);
					try { dbg.enterDecision(147, decisionCanBacktrack[147]);

					int LA147_0 = input.LA(1);
					if ( (LA147_0==COMMENT||LA147_0==NL||LA147_0==WS) ) {
						alt147=1;
					}
					} finally {dbg.exitDecision(147);}

					switch (alt147) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:619:35: ws
							{
							dbg.location(619,35);
							pushFollow(FOLLOW_ws_in_sass_map2922);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(147);}
					dbg.location(619,39);
					match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_sass_map2925); if (state.failed) return;
					}

					}
					break;

				default :
					break loop148;
				}
			}
			} finally {dbg.exitSubRule(148);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(620, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map"



	// $ANTLR start "sass_map_name"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:622:1: sass_map_name : cp_variable ;
	public final void sass_map_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(622, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:623:5: ( cp_variable )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:624:5: cp_variable
			{
			dbg.location(624,5);
			pushFollow(FOLLOW_cp_variable_in_sass_map_name2949);
			cp_variable();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(625, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_name"



	// $ANTLR start "sass_map_pairs"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:627:1: sass_map_pairs : ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ ;
	public final void sass_map_pairs() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pairs");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(627, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:628:5: ( ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:629:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			{
			dbg.location(629,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:629:5: ( ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? ) | ( COMMA ( ws )? ) )+
			int cnt153=0;
			try { dbg.enterSubRule(153);

			loop153:
			while (true) {
				int alt153=3;
				try { dbg.enterDecision(153, decisionCanBacktrack[153]);

				int LA153_0 = input.LA(1);
				if ( ((LA153_0 >= AT_IDENT && LA153_0 <= AT_SIGN)||(LA153_0 >= BOTTOMCENTER_SYM && LA153_0 <= BOTTOMRIGHT_SYM)||LA153_0==CHARSET_SYM||LA153_0==COUNTER_STYLE_SYM||LA153_0==FONT_FACE_SYM||LA153_0==GEN||LA153_0==HASH_SYMBOL||LA153_0==IDENT||LA153_0==IMPORT_SYM||(LA153_0 >= LEFTBOTTOM_SYM && LA153_0 <= LEFTTOP_SYM)||(LA153_0 >= MEDIA_SYM && LA153_0 <= MOZ_DOCUMENT_SYM)||LA153_0==NAMESPACE_SYM||LA153_0==NUMBER||LA153_0==PAGE_SYM||(LA153_0 >= RIGHTBOTTOM_SYM && LA153_0 <= RIGHTTOP_SYM)||(LA153_0 >= SASS_AT_ROOT && LA153_0 <= SASS_DEBUG)||(LA153_0 >= SASS_EACH && LA153_0 <= SASS_ELSE)||LA153_0==SASS_EXTEND||(LA153_0 >= SASS_FOR && LA153_0 <= SASS_FUNCTION)||(LA153_0 >= SASS_IF && LA153_0 <= SASS_MIXIN)||(LA153_0 >= SASS_RETURN && LA153_0 <= SASS_WHILE)||LA153_0==STRING||(LA153_0 >= TOPCENTER_SYM && LA153_0 <= TOPRIGHT_SYM)||LA153_0==VARIABLE||LA153_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt153=1;
				}
				else if ( (LA153_0==COMMA) ) {
					alt153=2;
				}

				} finally {dbg.exitDecision(153);}

				switch (alt153) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					{
					dbg.location(630,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:10: ( sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:12: sass_map_pair ( ( ( ws )? COMMA )=> ( ws )? COMMA )? ( ws )?
					{
					dbg.location(630,12);
					pushFollow(FOLLOW_sass_map_pair_in_sass_map_pairs2983);
					sass_map_pair();
					state._fsp--;
					if (state.failed) return;dbg.location(630,26);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?
					int alt150=2;
					try { dbg.enterSubRule(150);
					try { dbg.enterDecision(150, decisionCanBacktrack[150]);

					try {
						isCyclicDecision = true;
						alt150 = dfa150.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(150);}

					switch (alt150) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:27: ( ( ws )? COMMA )=> ( ws )? COMMA
							{
							dbg.location(630,40);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:40: ( ws )?
							int alt149=2;
							try { dbg.enterSubRule(149);
							try { dbg.enterDecision(149, decisionCanBacktrack[149]);

							int LA149_0 = input.LA(1);
							if ( (LA149_0==COMMENT||LA149_0==NL||LA149_0==WS) ) {
								alt149=1;
							}
							} finally {dbg.exitDecision(149);}

							switch (alt149) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:40: ws
									{
									dbg.location(630,40);
									pushFollow(FOLLOW_ws_in_sass_map_pairs2993);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(149);}
							dbg.location(630,44);
							match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs2996); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(150);}
					dbg.location(630,52);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:52: ( ws )?
					int alt151=2;
					try { dbg.enterSubRule(151);
					try { dbg.enterDecision(151, decisionCanBacktrack[151]);

					int LA151_0 = input.LA(1);
					if ( (LA151_0==COMMENT||LA151_0==NL||LA151_0==WS) ) {
						alt151=1;
					}
					} finally {dbg.exitDecision(151);}

					switch (alt151) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:52: ws
							{
							dbg.location(630,52);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3000);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(151);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:632:10: ( COMMA ( ws )? )
					{
					dbg.location(632,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:632:10: ( COMMA ( ws )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:632:12: COMMA ( ws )?
					{
					dbg.location(632,12);
					match(input,COMMA,FOLLOW_COMMA_in_sass_map_pairs3027); if (state.failed) return;dbg.location(632,18);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:632:18: ( ws )?
					int alt152=2;
					try { dbg.enterSubRule(152);
					try { dbg.enterDecision(152, decisionCanBacktrack[152]);

					int LA152_0 = input.LA(1);
					if ( (LA152_0==COMMENT||LA152_0==NL||LA152_0==WS) ) {
						alt152=1;
					}
					} finally {dbg.exitDecision(152);}

					switch (alt152) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:632:18: ws
							{
							dbg.location(632,18);
							pushFollow(FOLLOW_ws_in_sass_map_pairs3029);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(152);}

					}

					}
					break;

				default :
					if ( cnt153 >= 1 ) break loop153;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(153, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt153++;
			}
			} finally {dbg.exitSubRule(153);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(634, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pairs");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pairs"



	// $ANTLR start "sass_map_pair"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:636:1: sass_map_pair : ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? ;
	public final void sass_map_pair() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_map_pair");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(636, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:637:5: ( ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map ) ( ws )? COLON ( ws )? cp_expression ( ( ws )? prio )?
			{
			dbg.location(638,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:9: ( NUMBER | ( STRING ( ( ws )? STRING )* ) | ( ( function )=> function ) | property | sass_map )
			int alt156=5;
			try { dbg.enterSubRule(156);
			try { dbg.enterDecision(156, decisionCanBacktrack[156]);

			switch ( input.LA(1) ) {
			case NUMBER:
				{
				alt156=1;
				}
				break;
			case STRING:
				{
				alt156=2;
				}
				break;
			case IDENT:
				{
				int LA156_3 = input.LA(2);
				if ( (synpred22_Css3()) ) {
					alt156=3;
				}
				else if ( (true) ) {
					alt156=4;
				}

				}
				break;
			case AT_SIGN:
			case GEN:
			case HASH_SYMBOL:
			case MINUS:
			case VARIABLE:
				{
				alt156=4;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA156_9 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt156=4;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt156=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA156_10 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt156=4;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt156=5;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 156, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 156, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(156);}

			switch (alt156) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:10: NUMBER
					{
					dbg.location(638,10);
					match(input,NUMBER,FOLLOW_NUMBER_in_sass_map_pair3065); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:17: ( STRING ( ( ws )? STRING )* )
					{
					dbg.location(638,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:17: ( STRING ( ( ws )? STRING )* )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:18: STRING ( ( ws )? STRING )*
					{
					dbg.location(638,18);
					match(input,STRING,FOLLOW_STRING_in_sass_map_pair3068); if (state.failed) return;dbg.location(638,25);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:25: ( ( ws )? STRING )*
					try { dbg.enterSubRule(155);

					loop155:
					while (true) {
						int alt155=2;
						try { dbg.enterDecision(155, decisionCanBacktrack[155]);

						try {
							isCyclicDecision = true;
							alt155 = dfa155.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(155);}

						switch (alt155) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:26: ( ws )? STRING
							{
							dbg.location(638,26);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:26: ( ws )?
							int alt154=2;
							try { dbg.enterSubRule(154);
							try { dbg.enterDecision(154, decisionCanBacktrack[154]);

							int LA154_0 = input.LA(1);
							if ( (LA154_0==COMMENT||LA154_0==NL||LA154_0==WS) ) {
								alt154=1;
							}
							} finally {dbg.exitDecision(154);}

							switch (alt154) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:26: ws
									{
									dbg.location(638,26);
									pushFollow(FOLLOW_ws_in_sass_map_pair3071);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(154);}
							dbg.location(638,30);
							match(input,STRING,FOLLOW_STRING_in_sass_map_pair3074); if (state.failed) return;
							}
							break;

						default :
							break loop155;
						}
					}
					} finally {dbg.exitSubRule(155);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:40: ( ( function )=> function )
					{
					dbg.location(638,40);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:40: ( ( function )=> function )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:41: ( function )=> function
					{
					dbg.location(638,53);
					pushFollow(FOLLOW_function_in_sass_map_pair3084);
					function();
					state._fsp--;
					if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:63: property
					{
					dbg.location(638,63);
					pushFollow(FOLLOW_property_in_sass_map_pair3087);
					property();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:72: sass_map
					{
					dbg.location(638,72);
					pushFollow(FOLLOW_sass_map_in_sass_map_pair3089);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(156);}
			dbg.location(638,82);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:82: ( ws )?
			int alt157=2;
			try { dbg.enterSubRule(157);
			try { dbg.enterDecision(157, decisionCanBacktrack[157]);

			int LA157_0 = input.LA(1);
			if ( (LA157_0==COMMENT||LA157_0==NL||LA157_0==WS) ) {
				alt157=1;
			}
			} finally {dbg.exitDecision(157);}

			switch (alt157) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:82: ws
					{
					dbg.location(638,82);
					pushFollow(FOLLOW_ws_in_sass_map_pair3092);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(157);}
			dbg.location(638,86);
			match(input,COLON,FOLLOW_COLON_in_sass_map_pair3095); if (state.failed) return;dbg.location(638,92);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:92: ( ws )?
			int alt158=2;
			try { dbg.enterSubRule(158);
			try { dbg.enterDecision(158, decisionCanBacktrack[158]);

			int LA158_0 = input.LA(1);
			if ( (LA158_0==COMMENT||LA158_0==NL||LA158_0==WS) ) {
				alt158=1;
			}
			} finally {dbg.exitDecision(158);}

			switch (alt158) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:92: ws
					{
					dbg.location(638,92);
					pushFollow(FOLLOW_ws_in_sass_map_pair3097);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(158);}
			dbg.location(638,96);
			pushFollow(FOLLOW_cp_expression_in_sass_map_pair3100);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(638,110);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:110: ( ( ws )? prio )?
			int alt160=2;
			try { dbg.enterSubRule(160);
			try { dbg.enterDecision(160, decisionCanBacktrack[160]);

			try {
				isCyclicDecision = true;
				alt160 = dfa160.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(160);}

			switch (alt160) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:111: ( ws )? prio
					{
					dbg.location(638,111);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:111: ( ws )?
					int alt159=2;
					try { dbg.enterSubRule(159);
					try { dbg.enterDecision(159, decisionCanBacktrack[159]);

					int LA159_0 = input.LA(1);
					if ( (LA159_0==COMMENT||LA159_0==NL||LA159_0==WS) ) {
						alt159=1;
					}
					} finally {dbg.exitDecision(159);}

					switch (alt159) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:111: ws
							{
							dbg.location(638,111);
							pushFollow(FOLLOW_ws_in_sass_map_pair3103);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(159);}
					dbg.location(638,115);
					pushFollow(FOLLOW_prio_in_sass_map_pair3106);
					prio();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(160);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(639, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_map_pair");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_map_pair"



	// $ANTLR start "rule"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:641:1: rule : ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void rule() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "rule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(641, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:642:5: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:643:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(643,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:643:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
			int alt166=3;
			try { dbg.enterSubRule(166);
			try { dbg.enterDecision(166, decisionCanBacktrack[166]);

			try {
				isCyclicDecision = true;
				alt166 = dfa166.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(166);}

			switch (alt166) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:644:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					{
					dbg.location(644,13);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:644:13: ( SASS_AT_ROOT ( ws selectorsGroup )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:644:14: SASS_AT_ROOT ( ws selectorsGroup )?
					{
					dbg.location(644,14);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule3148); if (state.failed) return;dbg.location(644,27);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:644:27: ( ws selectorsGroup )?
					int alt161=2;
					try { dbg.enterSubRule(161);
					try { dbg.enterDecision(161, decisionCanBacktrack[161]);

					try {
						isCyclicDecision = true;
						alt161 = dfa161.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(161);}

					switch (alt161) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:644:28: ws selectorsGroup
							{
							dbg.location(644,28);
							pushFollow(FOLLOW_ws_in_rule3151);
							ws();
							state._fsp--;
							if (state.failed) return;dbg.location(644,31);
							pushFollow(FOLLOW_selectorsGroup_in_rule3153);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(161);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					{
					dbg.location(645,15);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:15: ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:16: SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
					{
					dbg.location(645,16);
					match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_rule3174); if (state.failed) return;dbg.location(645,29);
					pushFollow(FOLLOW_ws_in_rule3176);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(645,32);
					match(input,LPAREN,FOLLOW_LPAREN_in_rule3178); if (state.failed) return;dbg.location(645,39);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:39: ( ws )?
					int alt162=2;
					try { dbg.enterSubRule(162);
					try { dbg.enterDecision(162, decisionCanBacktrack[162]);

					int LA162_0 = input.LA(1);
					if ( (LA162_0==COMMENT||LA162_0==NL||LA162_0==WS) ) {
						alt162=1;
					}
					} finally {dbg.exitDecision(162);}

					switch (alt162) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:39: ws
							{
							dbg.location(645,39);
							pushFollow(FOLLOW_ws_in_rule3180);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(162);}
					dbg.location(645,43);
					if ( !(evalPredicate(tokenNameEquals("without") || tokenNameEquals("with"),"tokenNameEquals(\"without\") || tokenNameEquals(\"with\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "rule", "tokenNameEquals(\"without\") || tokenNameEquals(\"with\")");
					}dbg.location(645,100);
					match(input,IDENT,FOLLOW_IDENT_in_rule3185); if (state.failed) return;dbg.location(645,128);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:128: ( ws )?
					int alt163=2;
					try { dbg.enterSubRule(163);
					try { dbg.enterDecision(163, decisionCanBacktrack[163]);

					int LA163_0 = input.LA(1);
					if ( (LA163_0==COMMENT||LA163_0==NL||LA163_0==WS) ) {
						alt163=1;
					}
					} finally {dbg.exitDecision(163);}

					switch (alt163) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:128: ws
							{
							dbg.location(645,128);
							pushFollow(FOLLOW_ws_in_rule3189);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(163);}
					dbg.location(645,132);
					match(input,COLON,FOLLOW_COLON_in_rule3192); if (state.failed) return;dbg.location(645,138);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:138: ( ws )?
					int alt164=2;
					try { dbg.enterSubRule(164);
					try { dbg.enterDecision(164, decisionCanBacktrack[164]);

					int LA164_0 = input.LA(1);
					if ( (LA164_0==COMMENT||LA164_0==NL||LA164_0==WS) ) {
						alt164=1;
					}
					} finally {dbg.exitDecision(164);}

					switch (alt164) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:138: ws
							{
							dbg.location(645,138);
							pushFollow(FOLLOW_ws_in_rule3194);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(164);}
					dbg.location(645,142);
					match(input,IDENT,FOLLOW_IDENT_in_rule3197); if (state.failed) return;dbg.location(645,148);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:148: ( ws )?
					int alt165=2;
					try { dbg.enterSubRule(165);
					try { dbg.enterDecision(165, decisionCanBacktrack[165]);

					int LA165_0 = input.LA(1);
					if ( (LA165_0==COMMENT||LA165_0==NL||LA165_0==WS) ) {
						alt165=1;
					}
					} finally {dbg.exitDecision(165);}

					switch (alt165) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:645:148: ws
							{
							dbg.location(645,148);
							pushFollow(FOLLOW_ws_in_rule3199);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(165);}
					dbg.location(645,152);
					match(input,RPAREN,FOLLOW_RPAREN_in_rule3202); if (state.failed) return;
					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:646:15: selectorsGroup
					{
					dbg.location(646,15);
					pushFollow(FOLLOW_selectorsGroup_in_rule3220);
					selectorsGroup();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(166);}
			dbg.location(647,11);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:647:11: ( ws )?
			int alt167=2;
			try { dbg.enterSubRule(167);
			try { dbg.enterDecision(167, decisionCanBacktrack[167]);

			int LA167_0 = input.LA(1);
			if ( (LA167_0==COMMENT||LA167_0==NL||LA167_0==WS) ) {
				alt167=1;
			}
			} finally {dbg.exitDecision(167);}

			switch (alt167) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:647:11: ws
					{
					dbg.location(647,11);
					pushFollow(FOLLOW_ws_in_rule3232);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(167);}
			dbg.location(648,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_rule3239); if (state.failed) return;dbg.location(648,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:648:12: ( ws )?
			int alt168=2;
			try { dbg.enterSubRule(168);
			try { dbg.enterDecision(168, decisionCanBacktrack[168]);

			int LA168_0 = input.LA(1);
			if ( (LA168_0==COMMENT||LA168_0==NL||LA168_0==WS) ) {
				alt168=1;
			}
			} finally {dbg.exitDecision(168);}

			switch (alt168) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:648:12: ws
					{
					dbg.location(648,12);
					pushFollow(FOLLOW_ws_in_rule3241);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(168);}
			dbg.location(648,16);
			pushFollow(FOLLOW_syncToFollow_in_rule3244);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(649,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:649:9: ( declarations )?
			int alt169=2;
			try { dbg.enterSubRule(169);
			try { dbg.enterDecision(169, decisionCanBacktrack[169]);

			int LA169_0 = input.LA(1);
			if ( ((LA169_0 >= AT_IDENT && LA169_0 <= AT_SIGN)||(LA169_0 >= BOTTOMCENTER_SYM && LA169_0 <= BOTTOMRIGHT_SYM)||(LA169_0 >= CHARSET_SYM && LA169_0 <= COLON)||LA169_0==COUNTER_STYLE_SYM||(LA169_0 >= DCOLON && LA169_0 <= DOT)||LA169_0==FONT_FACE_SYM||(LA169_0 >= GEN && LA169_0 <= GREATER)||(LA169_0 >= HASH && LA169_0 <= HASH_SYMBOL)||LA169_0==IDENT||LA169_0==IMPORT_SYM||(LA169_0 >= LBRACKET && LA169_0 <= LEFTTOP_SYM)||LA169_0==LESS_AND||(LA169_0 >= MEDIA_SYM && LA169_0 <= MOZ_DOCUMENT_SYM)||LA169_0==NAMESPACE_SYM||LA169_0==PAGE_SYM||(LA169_0 >= PIPE && LA169_0 <= PLUS)||(LA169_0 >= RIGHTBOTTOM_SYM && LA169_0 <= RIGHTTOP_SYM)||(LA169_0 >= SASS_AT_ROOT && LA169_0 <= SASS_DEBUG)||(LA169_0 >= SASS_EACH && LA169_0 <= SASS_ELSE)||(LA169_0 >= SASS_ERROR && LA169_0 <= SASS_FUNCTION)||(LA169_0 >= SASS_IF && LA169_0 <= SASS_MIXIN)||(LA169_0 >= SASS_RETURN && LA169_0 <= SEMI)||LA169_0==STAR||LA169_0==SUPPORTS_SYM||LA169_0==TILDE||(LA169_0 >= TOPCENTER_SYM && LA169_0 <= TOPRIGHT_SYM)||LA169_0==VARIABLE||LA169_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt169=1;
			}
			} finally {dbg.exitDecision(169);}

			switch (alt169) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:649:9: declarations
					{
					dbg.location(649,9);
					pushFollow(FOLLOW_declarations_in_rule3254);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(169);}
			dbg.location(650,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_rule3261); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RBRACE));
			        input.consume(); //consume the RBRACE as well
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(651, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "rule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "rule"



	// $ANTLR start "declarations"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:658:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );
	public final void declarations() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declarations");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(658, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:659:5: ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ )
			int alt183=2;
			try { dbg.enterDecision(183, decisionCanBacktrack[183]);

			try {
				isCyclicDecision = true;
				alt183 = dfa183.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(183);}

			switch (alt183) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:8: ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					{
					dbg.location(660,8);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:8: ( SEMI ( ws )? )*
					try { dbg.enterSubRule(171);

					loop171:
					while (true) {
						int alt171=2;
						try { dbg.enterDecision(171, decisionCanBacktrack[171]);

						int LA171_0 = input.LA(1);
						if ( (LA171_0==SEMI) ) {
							alt171=1;
						}

						} finally {dbg.exitDecision(171);}

						switch (alt171) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:9: SEMI ( ws )?
							{
							dbg.location(660,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations3295); if (state.failed) return;dbg.location(660,14);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:14: ( ws )?
							int alt170=2;
							try { dbg.enterSubRule(170);
							try { dbg.enterDecision(170, decisionCanBacktrack[170]);

							int LA170_0 = input.LA(1);
							if ( (LA170_0==COMMENT||LA170_0==NL||LA170_0==WS) ) {
								alt170=1;
							}
							} finally {dbg.exitDecision(170);}

							switch (alt170) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:14: ws
									{
									dbg.location(660,14);
									pushFollow(FOLLOW_ws_in_declarations3297);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(170);}

							}
							break;

						default :
							break loop171;
						}
					}
					} finally {dbg.exitSubRule(171);}
					dbg.location(660,21);
					pushFollow(FOLLOW_declaration_in_declarations3303);
					declaration();
					state._fsp--;
					if (state.failed) return;dbg.location(660,33);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*
					try { dbg.enterSubRule(176);

					loop176:
					while (true) {
						int alt176=2;
						try { dbg.enterDecision(176, decisionCanBacktrack[176]);

						try {
							isCyclicDecision = true;
							alt176 = dfa176.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(176);}

						switch (alt176) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration
							{
							dbg.location(660,34);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )
							int alt175=2;
							try { dbg.enterSubRule(175);
							try { dbg.enterDecision(175, decisionCanBacktrack[175]);

							try {
								isCyclicDecision = true;
								alt175 = dfa175.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(175);}

							switch (alt175) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:35: ( ( ws )? ( SEMI ( ws )? )+ )
									{
									dbg.location(660,35);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:35: ( ( ws )? ( SEMI ( ws )? )+ )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:36: ( ws )? ( SEMI ( ws )? )+
									{
									dbg.location(660,36);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:36: ( ws )?
									int alt172=2;
									try { dbg.enterSubRule(172);
									try { dbg.enterDecision(172, decisionCanBacktrack[172]);

									int LA172_0 = input.LA(1);
									if ( (LA172_0==COMMENT||LA172_0==NL||LA172_0==WS) ) {
										alt172=1;
									}
									} finally {dbg.exitDecision(172);}

									switch (alt172) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:36: ws
											{
											dbg.location(660,36);
											pushFollow(FOLLOW_ws_in_declarations3308);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(172);}
									dbg.location(660,40);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:40: ( SEMI ( ws )? )+
									int cnt174=0;
									try { dbg.enterSubRule(174);

									loop174:
									while (true) {
										int alt174=2;
										try { dbg.enterDecision(174, decisionCanBacktrack[174]);

										int LA174_0 = input.LA(1);
										if ( (LA174_0==SEMI) ) {
											alt174=1;
										}

										} finally {dbg.exitDecision(174);}

										switch (alt174) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:41: SEMI ( ws )?
											{
											dbg.location(660,41);
											match(input,SEMI,FOLLOW_SEMI_in_declarations3312); if (state.failed) return;dbg.location(660,46);
											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:46: ( ws )?
											int alt173=2;
											try { dbg.enterSubRule(173);
											try { dbg.enterDecision(173, decisionCanBacktrack[173]);

											int LA173_0 = input.LA(1);
											if ( (LA173_0==COMMENT||LA173_0==NL||LA173_0==WS) ) {
												alt173=1;
											}
											} finally {dbg.exitDecision(173);}

											switch (alt173) {
												case 1 :
													dbg.enterAlt(1);

													// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:46: ws
													{
													dbg.location(660,46);
													pushFollow(FOLLOW_ws_in_declarations3314);
													ws();
													state._fsp--;
													if (state.failed) return;
													}
													break;

											}
											} finally {dbg.exitSubRule(173);}

											}
											break;

										default :
											if ( cnt174 >= 1 ) break loop174;
											if (state.backtracking>0) {state.failed=true; return;}
											EarlyExitException eee = new EarlyExitException(174, input);
											dbg.recognitionException(eee);

											throw eee;
										}
										cnt174++;
									}
									} finally {dbg.exitSubRule(174);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:53: ws
									{
									dbg.location(660,53);
									pushFollow(FOLLOW_ws_in_declarations3320);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(175);}
							dbg.location(660,57);
							pushFollow(FOLLOW_declaration_in_declarations3323);
							declaration();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop176;
						}
					}
					} finally {dbg.exitSubRule(176);}
					dbg.location(660,71);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?
					int alt180=3;
					try { dbg.enterSubRule(180);
					try { dbg.enterDecision(180, decisionCanBacktrack[180]);

					try {
						isCyclicDecision = true;
						alt180 = dfa180.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(180);}

					switch (alt180) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:72: ( ( ws )? ( SEMI ( ws )? )+ )
							{
							dbg.location(660,72);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:72: ( ( ws )? ( SEMI ( ws )? )+ )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:73: ( ws )? ( SEMI ( ws )? )+
							{
							dbg.location(660,73);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:73: ( ws )?
							int alt177=2;
							try { dbg.enterSubRule(177);
							try { dbg.enterDecision(177, decisionCanBacktrack[177]);

							int LA177_0 = input.LA(1);
							if ( (LA177_0==COMMENT||LA177_0==NL||LA177_0==WS) ) {
								alt177=1;
							}
							} finally {dbg.exitDecision(177);}

							switch (alt177) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:73: ws
									{
									dbg.location(660,73);
									pushFollow(FOLLOW_ws_in_declarations3329);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(177);}
							dbg.location(660,77);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:77: ( SEMI ( ws )? )+
							int cnt179=0;
							try { dbg.enterSubRule(179);

							loop179:
							while (true) {
								int alt179=2;
								try { dbg.enterDecision(179, decisionCanBacktrack[179]);

								int LA179_0 = input.LA(1);
								if ( (LA179_0==SEMI) ) {
									alt179=1;
								}

								} finally {dbg.exitDecision(179);}

								switch (alt179) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:78: SEMI ( ws )?
									{
									dbg.location(660,78);
									match(input,SEMI,FOLLOW_SEMI_in_declarations3333); if (state.failed) return;dbg.location(660,83);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:83: ( ws )?
									int alt178=2;
									try { dbg.enterSubRule(178);
									try { dbg.enterDecision(178, decisionCanBacktrack[178]);

									int LA178_0 = input.LA(1);
									if ( (LA178_0==COMMENT||LA178_0==NL||LA178_0==WS) ) {
										alt178=1;
									}
									} finally {dbg.exitDecision(178);}

									switch (alt178) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:83: ws
											{
											dbg.location(660,83);
											pushFollow(FOLLOW_ws_in_declarations3335);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(178);}

									}
									break;

								default :
									if ( cnt179 >= 1 ) break loop179;
									if (state.backtracking>0) {state.failed=true; return;}
									EarlyExitException eee = new EarlyExitException(179, input);
									dbg.recognitionException(eee);

									throw eee;
								}
								cnt179++;
							}
							} finally {dbg.exitSubRule(179);}

							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:660:90: ws
							{
							dbg.location(660,90);
							pushFollow(FOLLOW_ws_in_declarations3341);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(180);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:661:8: ( SEMI ( ws )? )+
					{
					dbg.location(661,8);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:661:8: ( SEMI ( ws )? )+
					int cnt182=0;
					try { dbg.enterSubRule(182);

					loop182:
					while (true) {
						int alt182=2;
						try { dbg.enterDecision(182, decisionCanBacktrack[182]);

						int LA182_0 = input.LA(1);
						if ( (LA182_0==SEMI) ) {
							alt182=1;
						}

						} finally {dbg.exitDecision(182);}

						switch (alt182) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:661:9: SEMI ( ws )?
							{
							dbg.location(661,9);
							match(input,SEMI,FOLLOW_SEMI_in_declarations3353); if (state.failed) return;dbg.location(661,14);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:661:14: ( ws )?
							int alt181=2;
							try { dbg.enterSubRule(181);
							try { dbg.enterDecision(181, decisionCanBacktrack[181]);

							int LA181_0 = input.LA(1);
							if ( (LA181_0==COMMENT||LA181_0==NL||LA181_0==WS) ) {
								alt181=1;
							}
							} finally {dbg.exitDecision(181);}

							switch (alt181) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:661:14: ws
									{
									dbg.location(661,14);
									pushFollow(FOLLOW_ws_in_declarations3355);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(181);}

							}
							break;

						default :
							if ( cnt182 >= 1 ) break loop182;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(182, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt182++;
					}
					} finally {dbg.exitSubRule(182);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(662, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declarations");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declarations"



	// $ANTLR start "declaration"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:664:1: declaration : ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN );
	public final void declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(664, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:665:5: ( ( cp_variable_declaration )=> cp_variable_declaration | ( sass_map )=> sass_map | ( sass_nested_properties )=> sass_nested_properties | ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule | ( propertyDeclaration )=> propertyDeclaration | ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration | ( cp_mixin_declaration )=> cp_mixin_declaration | ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )? | ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )? |{...}? at_rule |{...}? sass_control |{...}? sass_extend |{...}? sass_debug |{...}? sass_content |{...}? sass_function_return |{...}? sass_error |{...}? importItem | GEN )
			int alt188=18;
			try { dbg.enterDecision(188, decisionCanBacktrack[188]);

			int LA188_0 = input.LA(1);
			if ( (LA188_0==SASS_AT_ROOT) ) {
				int LA188_1 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_VAR) ) {
				int LA188_2 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred25_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred27_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==IDENT) ) {
				int LA188_3 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt188=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt188=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==HASH_SYMBOL) ) {
				int LA188_4 = input.LA(2);
				if ( ((synpred25_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( ((synpred27_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=5;
				}
				else if ( ((evalPredicate(isScssSource(),"isScssSource()")&&synpred28_Css3())) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==AT_SIGN) ) {
				int LA188_5 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( ((synpred26_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred28_Css3())) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==VARIABLE) ) {
				int LA188_6 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt188=3;
				}
				else if ( (synpred27_Css3()) ) {
					alt188=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==MINUS) ) {
				int LA188_7 = input.LA(2);
				if ( (((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( ((synpred26_Css3()&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt188=4;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))||evalPredicate(isScssSource(),"isScssSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==GEN) ) {
				int LA188_8 = input.LA(2);
				if ( (synpred25_Css3()) ) {
					alt188=3;
				}
				else if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt188=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt188=6;
				}
				else if ( (true) ) {
					alt188=18;
				}

			}
			else if ( (LA188_0==SASS_MIXIN) ) {
				int LA188_9 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( ((synpred29_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=7;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==GREATER||LA188_0==PLUS||LA188_0==TILDE) && (synpred26_Css3())) {
				alt188=4;
			}
			else if ( (LA188_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred26_Css3())) {
				alt188=4;
			}
			else if ( (LA188_0==LESS_AND) ) {
				int LA188_12 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt188=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==HASH) ) {
				int LA188_13 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt188=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==DOT) ) {
				int LA188_14 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred29_Css3())) ) {
					alt188=7;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==DIMENSION) && (synpred26_Css3())) {
				alt188=4;
			}
			else if ( (LA188_0==LBRACKET) && (synpred26_Css3())) {
				alt188=4;
			}
			else if ( (LA188_0==COLON||LA188_0==DCOLON) && (synpred26_Css3())) {
				alt188=4;
			}
			else if ( (LA188_0==STAR) ) {
				int LA188_18 = input.LA(2);
				if ( (synpred26_Css3()) ) {
					alt188=4;
				}
				else if ( (synpred27_Css3()) ) {
					alt188=5;
				}
				else if ( (synpred28_Css3()) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==PIPE) && (synpred26_Css3())) {
				alt188=4;
			}
			else if ( (LA188_0==AT_IDENT) ) {
				int LA188_20 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=8;
				}
				else if ( (((evalPredicate(isLessSource(),"isLessSource()")&&synpred31_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=9;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_INCLUDE) ) {
				int LA188_21 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( ((synpred30_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=8;
				}
				else if ( ((synpred31_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt188=9;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==MEDIA_SYM) ) {
				int LA188_22 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==PAGE_SYM) ) {
				int LA188_23 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==COUNTER_STYLE_SYM) ) {
				int LA188_24 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==FONT_FACE_SYM) ) {
				int LA188_25 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==MOZ_DOCUMENT_SYM) ) {
				int LA188_26 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SUPPORTS_SYM) ) {
				alt188=10;
			}
			else if ( (LA188_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA188_28 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt188=10;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_IF) ) {
				int LA188_29 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 29, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_FOR) ) {
				int LA188_30 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_EACH) ) {
				int LA188_31 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 31, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_WHILE) ) {
				int LA188_32 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=11;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 32, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_EXTEND) ) {
				int LA188_33 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=12;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 33, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_DEBUG||LA188_0==SASS_WARN) ) {
				int LA188_34 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=13;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 34, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_CONTENT) ) {
				int LA188_35 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=14;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 35, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_RETURN) ) {
				int LA188_36 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=15;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 36, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==IMPORT_SYM) ) {
				int LA188_37 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt188=17;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 37, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA188_0==SASS_ERROR) ) {
				alt188=16;
			}
			else if ( ((LA188_0 >= BOTTOMCENTER_SYM && LA188_0 <= BOTTOMRIGHT_SYM)||LA188_0==CHARSET_SYM||(LA188_0 >= LEFTBOTTOM_SYM && LA188_0 <= LEFTTOP_SYM)||LA188_0==NAMESPACE_SYM||(LA188_0 >= RIGHTBOTTOM_SYM && LA188_0 <= RIGHTTOP_SYM)||LA188_0==SASS_ELSE||LA188_0==SASS_FUNCTION||(LA188_0 >= TOPCENTER_SYM && LA188_0 <= TOPRIGHT_SYM)) ) {
				int LA188_39 = input.LA(2);
				if ( ((synpred23_Css3()&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt188=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred24_Css3())) ) {
					alt188=2;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred25_Css3())) ) {
					alt188=3;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred27_Css3())) ) {
					alt188=5;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred28_Css3())) ) {
					alt188=6;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 188, 39, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 188, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(188);}

			switch (alt188) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:666:5: ( cp_variable_declaration )=> cp_variable_declaration
					{
					dbg.location(666,32);
					pushFollow(FOLLOW_cp_variable_declaration_in_declaration3384);
					cp_variable_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:667:7: ( sass_map )=> sass_map
					{
					dbg.location(667,20);
					pushFollow(FOLLOW_sass_map_in_declaration3397);
					sass_map();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:668:7: ( sass_nested_properties )=> sass_nested_properties
					{
					dbg.location(668,33);
					pushFollow(FOLLOW_sass_nested_properties_in_declaration3409);
					sass_nested_properties();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )=> rule
					{
					dbg.location(669,145);
					pushFollow(FOLLOW_rule_in_declaration3472);
					rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:670:7: ( propertyDeclaration )=> propertyDeclaration
					{
					dbg.location(670,30);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration3484);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:672:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )=> propertyDeclaration
					{
					dbg.location(672,67);
					pushFollow(FOLLOW_propertyDeclaration_in_declaration3523);
					propertyDeclaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:673:7: ( cp_mixin_declaration )=> cp_mixin_declaration
					{
					dbg.location(673,31);
					pushFollow(FOLLOW_cp_mixin_declaration_in_declaration3535);
					cp_mixin_declaration();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:7: ( cp_mixin_call )=> cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(674,25);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration3548);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(674,39);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:39: ( ( ws )? IMPORTANT_SYM )?
					int alt185=2;
					try { dbg.enterSubRule(185);
					try { dbg.enterDecision(185, decisionCanBacktrack[185]);

					try {
						isCyclicDecision = true;
						alt185 = dfa185.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(185);}

					switch (alt185) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:40: ( ws )? IMPORTANT_SYM
							{
							dbg.location(674,40);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:40: ( ws )?
							int alt184=2;
							try { dbg.enterSubRule(184);
							try { dbg.enterDecision(184, decisionCanBacktrack[184]);

							int LA184_0 = input.LA(1);
							if ( (LA184_0==COMMENT||LA184_0==NL||LA184_0==WS) ) {
								alt184=1;
							}
							} finally {dbg.exitDecision(184);}

							switch (alt184) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:40: ws
									{
									dbg.location(674,40);
									pushFollow(FOLLOW_ws_in_declaration3551);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(184);}
							dbg.location(674,44);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration3554); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(185);}

					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:7: ( cp_mixin_call )=>{...}? cp_mixin_call ( ( ws )? IMPORTANT_SYM )?
					{
					dbg.location(675,25);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(675,43);
					pushFollow(FOLLOW_cp_mixin_call_in_declaration3571);
					cp_mixin_call();
					state._fsp--;
					if (state.failed) return;dbg.location(675,57);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:57: ( ( ws )? IMPORTANT_SYM )?
					int alt187=2;
					try { dbg.enterSubRule(187);
					try { dbg.enterDecision(187, decisionCanBacktrack[187]);

					try {
						isCyclicDecision = true;
						alt187 = dfa187.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(187);}

					switch (alt187) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:58: ( ws )? IMPORTANT_SYM
							{
							dbg.location(675,58);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:58: ( ws )?
							int alt186=2;
							try { dbg.enterSubRule(186);
							try { dbg.enterDecision(186, decisionCanBacktrack[186]);

							int LA186_0 = input.LA(1);
							if ( (LA186_0==COMMENT||LA186_0==NL||LA186_0==WS) ) {
								alt186=1;
							}
							} finally {dbg.exitDecision(186);}

							switch (alt186) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:58: ws
									{
									dbg.location(675,58);
									pushFollow(FOLLOW_ws_in_declaration3574);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(186);}
							dbg.location(675,62);
							match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_declaration3577); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(187);}

					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:676:7: {...}? at_rule
					{
					dbg.location(676,7);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isCssPreprocessorSource()");
					}dbg.location(676,36);
					pushFollow(FOLLOW_at_rule_in_declaration3593);
					at_rule();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:677:7: {...}? sass_control
					{
					dbg.location(677,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(677,25);
					pushFollow(FOLLOW_sass_control_in_declaration3603);
					sass_control();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:678:7: {...}? sass_extend
					{
					dbg.location(678,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(678,25);
					pushFollow(FOLLOW_sass_extend_in_declaration3613);
					sass_extend();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:679:7: {...}? sass_debug
					{
					dbg.location(679,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(679,25);
					pushFollow(FOLLOW_sass_debug_in_declaration3623);
					sass_debug();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:680:7: {...}? sass_content
					{
					dbg.location(680,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(680,25);
					pushFollow(FOLLOW_sass_content_in_declaration3633);
					sass_content();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:681:7: {...}? sass_function_return
					{
					dbg.location(681,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(681,25);
					pushFollow(FOLLOW_sass_function_return_in_declaration3643);
					sass_function_return();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:682:7: {...}? sass_error
					{
					dbg.location(682,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(682,25);
					pushFollow(FOLLOW_sass_error_in_declaration3653);
					sass_error();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:683:7: {...}? importItem
					{
					dbg.location(683,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "declaration", "isScssSource()");
					}dbg.location(683,25);
					pushFollow(FOLLOW_importItem_in_declaration3663);
					importItem();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:684:7: GEN
					{
					dbg.location(684,7);
					match(input,GEN,FOLLOW_GEN_in_declaration3671); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(SEMI));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(685, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "declaration"



	// $ANTLR start "selectorsGroup"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:691:1: selectorsGroup : selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? ;
	public final void selectorsGroup() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selectorsGroup");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(691, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:692:5: ( selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:9: selector ( ( ws )? COMMA ( ws )? selector )* ({...}? COMMA )?
			{
			dbg.location(693,9);
			pushFollow(FOLLOW_selector_in_selectorsGroup3705);
			selector();
			state._fsp--;
			if (state.failed) return;dbg.location(693,18);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:18: ( ( ws )? COMMA ( ws )? selector )*
			try { dbg.enterSubRule(191);

			loop191:
			while (true) {
				int alt191=2;
				try { dbg.enterDecision(191, decisionCanBacktrack[191]);

				try {
					isCyclicDecision = true;
					alt191 = dfa191.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(191);}

				switch (alt191) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:19: ( ws )? COMMA ( ws )? selector
					{
					dbg.location(693,19);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:19: ( ws )?
					int alt189=2;
					try { dbg.enterSubRule(189);
					try { dbg.enterDecision(189, decisionCanBacktrack[189]);

					int LA189_0 = input.LA(1);
					if ( (LA189_0==COMMENT||LA189_0==NL||LA189_0==WS) ) {
						alt189=1;
					}
					} finally {dbg.exitDecision(189);}

					switch (alt189) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:19: ws
							{
							dbg.location(693,19);
							pushFollow(FOLLOW_ws_in_selectorsGroup3708);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(189);}
					dbg.location(693,23);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup3711); if (state.failed) return;dbg.location(693,29);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:29: ( ws )?
					int alt190=2;
					try { dbg.enterSubRule(190);
					try { dbg.enterDecision(190, decisionCanBacktrack[190]);

					int LA190_0 = input.LA(1);
					if ( (LA190_0==COMMENT||LA190_0==NL||LA190_0==WS) ) {
						alt190=1;
					}
					} finally {dbg.exitDecision(190);}

					switch (alt190) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:29: ws
							{
							dbg.location(693,29);
							pushFollow(FOLLOW_ws_in_selectorsGroup3713);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(190);}
					dbg.location(693,33);
					pushFollow(FOLLOW_selector_in_selectorsGroup3716);
					selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop191;
				}
			}
			} finally {dbg.exitSubRule(191);}
			dbg.location(693,44);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:44: ({...}? COMMA )?
			int alt192=2;
			try { dbg.enterSubRule(192);
			try { dbg.enterDecision(192, decisionCanBacktrack[192]);

			int LA192_0 = input.LA(1);
			if ( (LA192_0==COMMA) ) {
				alt192=1;
			}
			} finally {dbg.exitDecision(192);}

			switch (alt192) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:693:45: {...}? COMMA
					{
					dbg.location(693,45);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selectorsGroup", "isCssPreprocessorSource()");
					}dbg.location(693,74);
					match(input,COMMA,FOLLOW_COMMA_in_selectorsGroup3723); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(192);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(694, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selectorsGroup");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selectorsGroup"



	// $ANTLR start "selector"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:696:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );
	public final void selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(696, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:5: ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator )
			int alt199=2;
			try { dbg.enterDecision(199, decisionCanBacktrack[199]);

			try {
				isCyclicDecision = true;
				alt199 = dfa199.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(199);}

			switch (alt199) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:8: ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					{
					dbg.location(697,8);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:8: ( combinator ( ws )? )?
					int alt194=2;
					try { dbg.enterSubRule(194);
					try { dbg.enterDecision(194, decisionCanBacktrack[194]);

					int LA194_0 = input.LA(1);
					if ( (LA194_0==GREATER||LA194_0==PLUS||LA194_0==TILDE) ) {
						alt194=1;
					}
					} finally {dbg.exitDecision(194);}

					switch (alt194) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:9: combinator ( ws )?
							{
							dbg.location(697,9);
							pushFollow(FOLLOW_combinator_in_selector3744);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(697,20);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:20: ( ws )?
							int alt193=2;
							try { dbg.enterSubRule(193);
							try { dbg.enterDecision(193, decisionCanBacktrack[193]);

							int LA193_0 = input.LA(1);
							if ( (LA193_0==COMMENT||LA193_0==NL||LA193_0==WS) ) {
								alt193=1;
							}
							} finally {dbg.exitDecision(193);}

							switch (alt193) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:20: ws
									{
									dbg.location(697,20);
									pushFollow(FOLLOW_ws_in_selector3746);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(193);}

							}
							break;

					}
					} finally {dbg.exitSubRule(194);}
					dbg.location(697,26);
					pushFollow(FOLLOW_simpleSelectorSequence_in_selector3751);
					simpleSelectorSequence();
					state._fsp--;
					if (state.failed) return;dbg.location(697,49);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*
					try { dbg.enterSubRule(198);

					loop198:
					while (true) {
						int alt198=2;
						try { dbg.enterDecision(198, decisionCanBacktrack[198]);

						try {
							isCyclicDecision = true;
							alt198 = dfa198.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(198);}

						switch (alt198) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:51: ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence
							{
							dbg.location(697,51);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:51: ( ( ( ws )? combinator ( ws )? ) | ws )
							int alt197=2;
							try { dbg.enterSubRule(197);
							try { dbg.enterDecision(197, decisionCanBacktrack[197]);

							try {
								isCyclicDecision = true;
								alt197 = dfa197.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(197);}

							switch (alt197) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:52: ( ( ws )? combinator ( ws )? )
									{
									dbg.location(697,52);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:52: ( ( ws )? combinator ( ws )? )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:53: ( ws )? combinator ( ws )?
									{
									dbg.location(697,53);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:53: ( ws )?
									int alt195=2;
									try { dbg.enterSubRule(195);
									try { dbg.enterDecision(195, decisionCanBacktrack[195]);

									int LA195_0 = input.LA(1);
									if ( (LA195_0==COMMENT||LA195_0==NL||LA195_0==WS) ) {
										alt195=1;
									}
									} finally {dbg.exitDecision(195);}

									switch (alt195) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:53: ws
											{
											dbg.location(697,53);
											pushFollow(FOLLOW_ws_in_selector3757);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(195);}
									dbg.location(697,57);
									pushFollow(FOLLOW_combinator_in_selector3760);
									combinator();
									state._fsp--;
									if (state.failed) return;dbg.location(697,68);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:68: ( ws )?
									int alt196=2;
									try { dbg.enterSubRule(196);
									try { dbg.enterDecision(196, decisionCanBacktrack[196]);

									int LA196_0 = input.LA(1);
									if ( (LA196_0==COMMENT||LA196_0==NL||LA196_0==WS) ) {
										alt196=1;
									}
									} finally {dbg.exitDecision(196);}

									switch (alt196) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:68: ws
											{
											dbg.location(697,68);
											pushFollow(FOLLOW_ws_in_selector3762);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(196);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:697:73: ws
									{
									dbg.location(697,73);
									pushFollow(FOLLOW_ws_in_selector3766);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(197);}
							dbg.location(697,77);
							pushFollow(FOLLOW_simpleSelectorSequence_in_selector3769);
							simpleSelectorSequence();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop198;
						}
					}
					} finally {dbg.exitSubRule(198);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:698:10: {...}? combinator
					{
					dbg.location(698,10);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "selector", "isScssSource()");
					}dbg.location(698,28);
					pushFollow(FOLLOW_combinator_in_selector3784);
					combinator();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(699, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "selector"



	// $ANTLR start "combinator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:701:1: combinator : ( PLUS | GREATER | TILDE );
	public final void combinator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "combinator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(701, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:702:5: ( PLUS | GREATER | TILDE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(702,5);
			if ( input.LA(1)==GREATER||input.LA(1)==PLUS||input.LA(1)==TILDE ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(704, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "combinator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "combinator"



	// $ANTLR start "simpleSelectorSequence"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:706:1: simpleSelectorSequence : ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* );
	public final void simpleSelectorSequence() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "simpleSelectorSequence");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(706, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:707:2: ( ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )* | ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )* )
			int alt208=2;
			try { dbg.enterDecision(208, decisionCanBacktrack[208]);

			int LA208_0 = input.LA(1);
			if ( (LA208_0==AT_SIGN||LA208_0==COLON||(LA208_0 >= DCOLON && LA208_0 <= DOT)||(LA208_0 >= HASH && LA208_0 <= HASH_SYMBOL)||LA208_0==LBRACKET||LA208_0==MINUS||LA208_0==SASS_EXTEND_ONLY_SELECTOR) ) {
				alt208=1;
			}
			else if ( (LA208_0==LESS_AND) ) {
				int LA208_2 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt208=1;
				}
				else if ( (synpred33_Css3()) ) {
					alt208=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 208, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA208_0==IDENT) ) {
				int LA208_3 = input.LA(2);
				if ( (LA208_3==HASH_SYMBOL) ) {
					int LA208_7 = input.LA(3);
					if ( (LA208_7==LBRACE) ) {
						alt208=1;
					}
					else if ( (LA208_7==NAME) && (synpred33_Css3())) {
						alt208=2;
					}
					else if ( (LA208_7==IDENT||LA208_7==MINUS) && (synpred33_Css3())) {
						alt208=2;
					}
					else if ( (LA208_7==AT_SIGN) && (synpred33_Css3())) {
						alt208=2;
					}

				}
				else if ( (LA208_3==AT_SIGN) ) {
					alt208=1;
				}
				else if ( (LA208_3==PIPE) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==COMMENT||LA208_3==NL||LA208_3==WS) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==SASS_EXTEND_ONLY_SELECTOR) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==LESS_AND) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==HASH) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==DOT) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==DIMENSION) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==LBRACKET) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==COLON||LA208_3==DCOLON) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==GREATER||LA208_3==PLUS||LA208_3==TILDE) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==COMMA) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==LBRACE) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==RPAREN) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==SEMI) && (synpred33_Css3())) {
					alt208=2;
				}
				else if ( (LA208_3==RBRACE) && (synpred33_Css3())) {
					alt208=2;
				}

			}
			else if ( (LA208_0==STAR) && (synpred33_Css3())) {
				alt208=2;
			}
			else if ( (LA208_0==PIPE) && (synpred33_Css3())) {
				alt208=2;
			}
			else if ( (LA208_0==GEN) && (synpred33_Css3())) {
				alt208=2;
			}

			} finally {dbg.exitDecision(208);}

			switch (alt208) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:708:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					{
					dbg.location(708,9);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:708:9: ( elementSubsequent |{...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
					int alt200=3;
					try { dbg.enterSubRule(200);
					try { dbg.enterDecision(200, decisionCanBacktrack[200]);

					switch ( input.LA(1) ) {
					case COLON:
					case DCOLON:
					case DIMENSION:
					case DOT:
					case HASH:
					case LBRACKET:
					case LESS_AND:
					case SASS_EXTEND_ONLY_SELECTOR:
						{
						alt200=1;
						}
						break;
					case HASH_SYMBOL:
						{
						int LA200_2 = input.LA(2);
						if ( (LA200_2==LBRACE) ) {
							alt200=2;
						}
						else if ( (LA200_2==AT_SIGN||LA200_2==IDENT||LA200_2==MINUS||LA200_2==NAME) ) {
							alt200=1;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 200, 2, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case IDENT:
					case MINUS:
						{
						int LA200_3 = input.LA(2);
						if ( (LA200_3==HASH_SYMBOL) ) {
							alt200=2;
						}
						else if ( (LA200_3==AT_SIGN) ) {
							alt200=3;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 200, 3, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case AT_SIGN:
						{
						alt200=3;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 200, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(200);}

					switch (alt200) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:708:10: elementSubsequent
							{
							dbg.location(708,10);
							pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3836);
							elementSubsequent();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:708:30: {...}? sass_selector_interpolation_exp
							{
							dbg.location(708,30);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
							}dbg.location(708,48);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence3842);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:11: {...}? less_selector_interpolation_exp
							{
							dbg.location(709,11);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
							}dbg.location(709,29);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence3856);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(200);}
					dbg.location(709,64);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:64: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) ) )*
					try { dbg.enterSubRule(204);

					loop204:
					while (true) {
						int alt204=2;
						try { dbg.enterDecision(204, decisionCanBacktrack[204]);

						int LA204_0 = input.LA(1);
						if ( (LA204_0==COMMENT||LA204_0==NL||LA204_0==WS) ) {
							int LA204_1 = input.LA(2);
							if ( (synpred32_Css3()) ) {
								alt204=1;
							}

						}
						else if ( (LA204_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==LESS_AND) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==HASH) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==HASH_SYMBOL) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==DOT) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==DIMENSION) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==LBRACKET) && (synpred32_Css3())) {
							alt204=1;
						}
						else if ( (LA204_0==COLON||LA204_0==DCOLON) && (synpred32_Css3())) {
							alt204=1;
						}

						} finally {dbg.exitDecision(204);}

						switch (alt204) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:65: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							{
							dbg.location(709,79);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )
							int alt203=2;
							try { dbg.enterSubRule(203);
							try { dbg.enterDecision(203, decisionCanBacktrack[203]);

							try {
								isCyclicDecision = true;
								alt203 = dfa203.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(203);}

							switch (alt203) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:80: ( ( ws )? elementSubsequent )
									{
									dbg.location(709,80);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:80: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:81: ( ws )? elementSubsequent
									{
									dbg.location(709,81);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:81: ( ws )?
									int alt201=2;
									try { dbg.enterSubRule(201);
									try { dbg.enterDecision(201, decisionCanBacktrack[201]);

									int LA201_0 = input.LA(1);
									if ( (LA201_0==COMMENT||LA201_0==NL||LA201_0==WS) ) {
										alt201=1;
									}
									} finally {dbg.exitDecision(201);}

									switch (alt201) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:81: ws
											{
											dbg.location(709,81);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence3871);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(201);}
									dbg.location(709,85);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3874);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									{
									dbg.location(709,105);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:105: ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:106: ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									{
									dbg.location(709,106);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence3879);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(709,109);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:109: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp )
									int alt202=2;
									try { dbg.enterSubRule(202);
									try { dbg.enterDecision(202, decisionCanBacktrack[202]);

									switch ( input.LA(1) ) {
									case IDENT:
									case MINUS:
										{
										int LA202_1 = input.LA(2);
										if ( (LA202_1==HASH_SYMBOL) ) {
											alt202=1;
										}
										else if ( (LA202_1==AT_SIGN) ) {
											alt202=2;
										}

										else {
											if (state.backtracking>0) {state.failed=true; return;}
											int nvaeMark = input.mark();
											try {
												input.consume();
												NoViableAltException nvae =
													new NoViableAltException("", 202, 1, input);
												dbg.recognitionException(nvae);
												throw nvae;
											} finally {
												input.rewind(nvaeMark);
											}
										}

										}
										break;
									case HASH_SYMBOL:
										{
										alt202=1;
										}
										break;
									case AT_SIGN:
										{
										alt202=2;
										}
										break;
									default:
										if (state.backtracking>0) {state.failed=true; return;}
										NoViableAltException nvae =
											new NoViableAltException("", 202, 0, input);
										dbg.recognitionException(nvae);
										throw nvae;
									}
									} finally {dbg.exitDecision(202);}

									switch (alt202) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:110: {...}? sass_selector_interpolation_exp
											{
											dbg.location(709,110);
											if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
											}dbg.location(709,128);
											pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence3884);
											sass_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;
										case 2 :
											dbg.enterAlt(2);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:162: {...}? less_selector_interpolation_exp
											{
											dbg.location(709,162);
											if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
												if (state.backtracking>0) {state.failed=true; return;}
												throw new FailedPredicateException(input, "simpleSelectorSequence", "isLessSource()");
											}dbg.location(709,180);
											pushFollow(FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence3890);
											less_selector_interpolation_exp();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(202);}

									}

									}
									break;

							}
							} finally {dbg.exitSubRule(203);}

							}
							break;

						default :
							break loop204;
						}
					}
					} finally {dbg.exitSubRule(204);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:4: ( typeSelector )=> typeSelector ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					{
					dbg.location(710,20);
					pushFollow(FOLLOW_typeSelector_in_simpleSelectorSequence3904);
					typeSelector();
					state._fsp--;
					if (state.failed) return;dbg.location(710,33);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:33: ( ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp ) )*
					try { dbg.enterSubRule(207);

					loop207:
					while (true) {
						int alt207=2;
						try { dbg.enterDecision(207, decisionCanBacktrack[207]);

						int LA207_0 = input.LA(1);
						if ( (LA207_0==COMMENT||LA207_0==NL||LA207_0==WS) ) {
							int LA207_1 = input.LA(2);
							if ( (synpred34_Css3()) ) {
								alt207=1;
							}

						}
						else if ( (LA207_0==SASS_EXTEND_ONLY_SELECTOR) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==LESS_AND) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==HASH) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==HASH_SYMBOL) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==DOT) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==DIMENSION) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==LBRACKET) && (synpred34_Css3())) {
							alt207=1;
						}
						else if ( (LA207_0==COLON||LA207_0==DCOLON) && (synpred34_Css3())) {
							alt207=1;
						}

						} finally {dbg.exitDecision(207);}

						switch (alt207) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:34: ( ( ws )? esPred )=> ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							{
							dbg.location(710,48);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )
							int alt206=2;
							try { dbg.enterSubRule(206);
							try { dbg.enterDecision(206, decisionCanBacktrack[206]);

							try {
								isCyclicDecision = true;
								alt206 = dfa206.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(206);}

							switch (alt206) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:49: ( ( ws )? elementSubsequent )
									{
									dbg.location(710,49);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:49: ( ( ws )? elementSubsequent )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:50: ( ws )? elementSubsequent
									{
									dbg.location(710,50);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:50: ( ws )?
									int alt205=2;
									try { dbg.enterSubRule(205);
									try { dbg.enterDecision(205, decisionCanBacktrack[205]);

									int LA205_0 = input.LA(1);
									if ( (LA205_0==COMMENT||LA205_0==NL||LA205_0==WS) ) {
										alt205=1;
									}
									} finally {dbg.exitDecision(205);}

									switch (alt205) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:50: ws
											{
											dbg.location(710,50);
											pushFollow(FOLLOW_ws_in_simpleSelectorSequence3916);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(205);}
									dbg.location(710,54);
									pushFollow(FOLLOW_elementSubsequent_in_simpleSelectorSequence3919);
									elementSubsequent();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:75: {...}? ws sass_selector_interpolation_exp
									{
									dbg.location(710,75);
									if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
										if (state.backtracking>0) {state.failed=true; return;}
										throw new FailedPredicateException(input, "simpleSelectorSequence", "isScssSource()");
									}dbg.location(710,93);
									pushFollow(FOLLOW_ws_in_simpleSelectorSequence3926);
									ws();
									state._fsp--;
									if (state.failed) return;dbg.location(710,96);
									pushFollow(FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence3928);
									sass_selector_interpolation_exp();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(206);}

							}
							break;

						default :
							break loop207;
						}
					}
					} finally {dbg.exitSubRule(207);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			            reportError(rce);
			            consumeUntil(input, BitSet.of(LBRACE));
			        
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(711, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "simpleSelectorSequence");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "simpleSelectorSequence"



	// $ANTLR start "esPred"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:718:1: esPred : ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND );
	public final void esPred() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "esPred");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(718, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:5: ( HASH_SYMBOL | HASH | DOT | LBRACKET | COLON | DCOLON | SASS_EXTEND_ONLY_SELECTOR |{...}? LESS_AND )
			int alt209=8;
			try { dbg.enterDecision(209, decisionCanBacktrack[209]);

			switch ( input.LA(1) ) {
			case HASH_SYMBOL:
				{
				alt209=1;
				}
				break;
			case HASH:
				{
				alt209=2;
				}
				break;
			case DOT:
				{
				alt209=3;
				}
				break;
			case LBRACKET:
				{
				alt209=4;
				}
				break;
			case COLON:
				{
				alt209=5;
				}
				break;
			case DCOLON:
				{
				alt209=6;
				}
				break;
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt209=7;
				}
				break;
			case LESS_AND:
				{
				alt209=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 209, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(209);}

			switch (alt209) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:7: HASH_SYMBOL
					{
					dbg.location(719,7);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_esPred3953); if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:21: HASH
					{
					dbg.location(719,21);
					match(input,HASH,FOLLOW_HASH_in_esPred3957); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:28: DOT
					{
					dbg.location(719,28);
					match(input,DOT,FOLLOW_DOT_in_esPred3961); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:34: LBRACKET
					{
					dbg.location(719,34);
					match(input,LBRACKET,FOLLOW_LBRACKET_in_esPred3965); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:45: COLON
					{
					dbg.location(719,45);
					match(input,COLON,FOLLOW_COLON_in_esPred3969); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:53: DCOLON
					{
					dbg.location(719,53);
					match(input,DCOLON,FOLLOW_DCOLON_in_esPred3973); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:62: SASS_EXTEND_ONLY_SELECTOR
					{
					dbg.location(719,62);
					match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred3977); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:719:90: {...}? LESS_AND
					{
					dbg.location(719,90);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "esPred", "isCssPreprocessorSource()");
					}dbg.location(719,119);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_esPred3983); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(720, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "esPred");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "esPred"



	// $ANTLR start "typeSelector"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:722:1: typeSelector options {k=2; } : ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName ;
	public final void typeSelector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "typeSelector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(722, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:3: ( ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )? elementName
			{
			dbg.location(724,6);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:6: ( ( ( IDENT | STAR )? PIPE )=> namespacePrefix )?
			int alt210=2;
			try { dbg.enterSubRule(210);
			try { dbg.enterDecision(210, decisionCanBacktrack[210]);

			int LA210_0 = input.LA(1);
			if ( (LA210_0==IDENT) ) {
				int LA210_1 = input.LA(2);
				if ( (LA210_1==PIPE) && (synpred35_Css3())) {
					alt210=1;
				}
			}
			else if ( (LA210_0==STAR) ) {
				int LA210_2 = input.LA(2);
				if ( (LA210_2==PIPE) && (synpred35_Css3())) {
					alt210=1;
				}
			}
			else if ( (LA210_0==PIPE) && (synpred35_Css3())) {
				alt210=1;
			}
			} finally {dbg.exitDecision(210);}

			switch (alt210) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:7: ( ( IDENT | STAR )? PIPE )=> namespacePrefix
					{
					dbg.location(724,31);
					pushFollow(FOLLOW_namespacePrefix_in_typeSelector4025);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(210);}
			dbg.location(724,49);
			pushFollow(FOLLOW_elementName_in_typeSelector4029);
			elementName();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(725, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "typeSelector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "typeSelector"



	// $ANTLR start "namespacePrefix"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:727:1: namespacePrefix : ( namespacePrefixName | STAR )? PIPE ;
	public final void namespacePrefix() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "namespacePrefix");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(727, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:728:3: ( ( namespacePrefixName | STAR )? PIPE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:728:5: ( namespacePrefixName | STAR )? PIPE
			{
			dbg.location(728,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:728:5: ( namespacePrefixName | STAR )?
			int alt211=3;
			try { dbg.enterSubRule(211);
			try { dbg.enterDecision(211, decisionCanBacktrack[211]);

			int LA211_0 = input.LA(1);
			if ( (LA211_0==IDENT) ) {
				alt211=1;
			}
			else if ( (LA211_0==STAR) ) {
				alt211=2;
			}
			} finally {dbg.exitDecision(211);}

			switch (alt211) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:728:7: namespacePrefixName
					{
					dbg.location(728,7);
					pushFollow(FOLLOW_namespacePrefixName_in_namespacePrefix4044);
					namespacePrefixName();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:728:29: STAR
					{
					dbg.location(728,29);
					match(input,STAR,FOLLOW_STAR_in_namespacePrefix4048); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(211);}
			dbg.location(728,36);
			match(input,PIPE,FOLLOW_PIPE_in_namespacePrefix4052); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(729, 2);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "namespacePrefix");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "namespacePrefix"



	// $ANTLR start "elementSubsequent"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:732:1: elementSubsequent : ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) ;
	public final void elementSubsequent() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementSubsequent");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(732, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:733:5: ( ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:734:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			{
			dbg.location(734,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:734:5: ({...}? sass_extend_only_selector |{...}? LESS_AND ( IDENT | NUMBER )* |{...}? LESS_AND less_selector_interpolation_exp | cssId | cssClass | slAttribute | pseudo )
			int alt213=7;
			try { dbg.enterSubRule(213);
			try { dbg.enterDecision(213, decisionCanBacktrack[213]);

			switch ( input.LA(1) ) {
			case SASS_EXTEND_ONLY_SELECTOR:
				{
				alt213=1;
				}
				break;
			case LESS_AND:
				{
				switch ( input.LA(2) ) {
				case IDENT:
					{
					int LA213_7 = input.LA(3);
					if ( ((LA213_7 >= COLON && LA213_7 <= COMMENT)||(LA213_7 >= DCOLON && LA213_7 <= DOT)||LA213_7==GREATER||(LA213_7 >= HASH && LA213_7 <= HASH_SYMBOL)||LA213_7==IDENT||(LA213_7 >= LBRACE && LA213_7 <= LBRACKET)||LA213_7==LESS_AND||LA213_7==NL||LA213_7==NUMBER||LA213_7==PLUS||LA213_7==RBRACE||LA213_7==RPAREN||LA213_7==SASS_EXTEND_ONLY_SELECTOR||LA213_7==SEMI||LA213_7==TILDE||LA213_7==WS) ) {
						alt213=2;
					}
					else if ( (LA213_7==AT_SIGN) ) {
						alt213=3;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						int nvaeMark = input.mark();
						try {
							for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
								input.consume();
							}
							NoViableAltException nvae =
								new NoViableAltException("", 213, 7, input);
							dbg.recognitionException(nvae);
							throw nvae;
						} finally {
							input.rewind(nvaeMark);
						}
					}

					}
					break;
				case COLON:
				case COMMA:
				case COMMENT:
				case DCOLON:
				case DIMENSION:
				case DOT:
				case GREATER:
				case HASH:
				case HASH_SYMBOL:
				case LBRACE:
				case LBRACKET:
				case LESS_AND:
				case NL:
				case NUMBER:
				case PLUS:
				case RBRACE:
				case RPAREN:
				case SASS_EXTEND_ONLY_SELECTOR:
				case SEMI:
				case TILDE:
				case WS:
					{
					alt213=2;
					}
					break;
				case AT_SIGN:
				case MINUS:
					{
					alt213=3;
					}
					break;
				default:
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 213, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}
				}
				break;
			case HASH:
			case HASH_SYMBOL:
				{
				alt213=4;
				}
				break;
			case DIMENSION:
			case DOT:
				{
				alt213=5;
				}
				break;
			case LBRACKET:
				{
				alt213=6;
				}
				break;
			case COLON:
			case DCOLON:
				{
				alt213=7;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 213, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(213);}

			switch (alt213) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:735:9: {...}? sass_extend_only_selector
					{
					dbg.location(735,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isScssSource()");
					}dbg.location(735,27);
					pushFollow(FOLLOW_sass_extend_only_selector_in_elementSubsequent4084);
					sass_extend_only_selector();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:736:11: {...}? LESS_AND ( IDENT | NUMBER )*
					{
					dbg.location(736,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isCssPreprocessorSource()");
					}dbg.location(736,40);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent4098); if (state.failed) return;dbg.location(736,49);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:736:49: ( IDENT | NUMBER )*
					try { dbg.enterSubRule(212);

					loop212:
					while (true) {
						int alt212=2;
						try { dbg.enterDecision(212, decisionCanBacktrack[212]);

						int LA212_0 = input.LA(1);
						if ( (LA212_0==IDENT||LA212_0==NUMBER) ) {
							alt212=1;
						}

						} finally {dbg.exitDecision(212);}

						switch (alt212) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
							{
							dbg.location(736,49);
							if ( input.LA(1)==IDENT||input.LA(1)==NUMBER ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							break loop212;
						}
					}
					} finally {dbg.exitSubRule(212);}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:737:11: {...}? LESS_AND less_selector_interpolation_exp
					{
					dbg.location(737,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "elementSubsequent", "isLessSource()");
					}dbg.location(737,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_elementSubsequent4121); if (state.failed) return;dbg.location(737,38);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_elementSubsequent4123);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:738:8: cssId
					{
					dbg.location(738,8);
					pushFollow(FOLLOW_cssId_in_elementSubsequent4132);
					cssId();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:739:8: cssClass
					{
					dbg.location(739,8);
					pushFollow(FOLLOW_cssClass_in_elementSubsequent4141);
					cssClass();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:740:11: slAttribute
					{
					dbg.location(740,11);
					pushFollow(FOLLOW_slAttribute_in_elementSubsequent4153);
					slAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:741:11: pseudo
					{
					dbg.location(741,11);
					pushFollow(FOLLOW_pseudo_in_elementSubsequent4165);
					pseudo();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(213);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(743, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementSubsequent");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementSubsequent"



	// $ANTLR start "cssId"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:746:1: cssId : ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) );
	public final void cssId() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssId");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(746, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:747:5: ( HASH ({...}? sass_selector_interpolation_exp )? | ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) ) )
			int alt216=2;
			try { dbg.enterDecision(216, decisionCanBacktrack[216]);

			int LA216_0 = input.LA(1);
			if ( (LA216_0==HASH) ) {
				alt216=1;
			}
			else if ( (LA216_0==HASH_SYMBOL) ) {
				alt216=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 216, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(216);}

			switch (alt216) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:747:7: HASH ({...}? sass_selector_interpolation_exp )?
					{
					dbg.location(747,7);
					match(input,HASH,FOLLOW_HASH_in_cssId4189); if (state.failed) return;dbg.location(747,12);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:747:12: ({...}? sass_selector_interpolation_exp )?
					int alt214=2;
					try { dbg.enterSubRule(214);
					try { dbg.enterDecision(214, decisionCanBacktrack[214]);

					int LA214_0 = input.LA(1);
					if ( (LA214_0==IDENT||LA214_0==MINUS) ) {
						alt214=1;
					}
					else if ( (LA214_0==HASH_SYMBOL) ) {
						int LA214_2 = input.LA(2);
						if ( (LA214_2==LBRACE) ) {
							alt214=1;
						}
					}
					} finally {dbg.exitDecision(214);}

					switch (alt214) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:747:13: {...}? sass_selector_interpolation_exp
							{
							dbg.location(747,13);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isScssSource()");
							}dbg.location(747,31);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssId4194);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(214);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:749:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					{
					dbg.location(749,9);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:749:9: ( HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp ) )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:749:11: HASH_SYMBOL ( NAME |{...}? less_selector_interpolation_exp )
					{
					dbg.location(749,11);
					match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_cssId4216); if (state.failed) return;dbg.location(750,13);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:750:13: ( NAME |{...}? less_selector_interpolation_exp )
					int alt215=2;
					try { dbg.enterSubRule(215);
					try { dbg.enterDecision(215, decisionCanBacktrack[215]);

					int LA215_0 = input.LA(1);
					if ( (LA215_0==NAME) ) {
						alt215=1;
					}
					else if ( (LA215_0==AT_SIGN||LA215_0==IDENT||LA215_0==MINUS) ) {
						alt215=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 215, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(215);}

					switch (alt215) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:750:15: NAME
							{
							dbg.location(750,15);
							match(input,NAME,FOLLOW_NAME_in_cssId4232); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:751:17: {...}? less_selector_interpolation_exp
							{
							dbg.location(751,17);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssId", "isLessSource()");
							}dbg.location(751,35);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssId4252);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(215);}

					}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(754, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssId");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssId"



	// $ANTLR start "cssClass"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:760:1: cssClass : ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION );
	public final void cssClass() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cssClass");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(760, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:761:5: ( ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) ) |{...}? DIMENSION )
			int alt218=2;
			try { dbg.enterDecision(218, decisionCanBacktrack[218]);

			int LA218_0 = input.LA(1);
			if ( (LA218_0==DOT) ) {
				alt218=1;
			}
			else if ( (LA218_0==DIMENSION) ) {
				alt218=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 218, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(218);}

			switch (alt218) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:761:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					{
					dbg.location(761,7);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:761:7: ( DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN ) )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:761:8: DOT ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					{
					dbg.location(761,8);
					match(input,DOT,FOLLOW_DOT_in_cssClass4304); if (state.failed) return;dbg.location(762,9);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:762:9: ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp | IDENT | NOT | GEN )
					int alt217=5;
					try { dbg.enterSubRule(217);
					try { dbg.enterDecision(217, decisionCanBacktrack[217]);

					switch ( input.LA(1) ) {
					case IDENT:
						{
						switch ( input.LA(2) ) {
						case HASH_SYMBOL:
							{
							int LA217_7 = input.LA(3);
							if ( (LA217_7==LBRACE) ) {
								alt217=1;
							}
							else if ( (LA217_7==AT_SIGN||LA217_7==IDENT||LA217_7==MINUS||LA217_7==NAME) ) {
								alt217=3;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								int nvaeMark = input.mark();
								try {
									for (int nvaeConsume = 0; nvaeConsume < 3 - 1; nvaeConsume++) {
										input.consume();
									}
									NoViableAltException nvae =
										new NoViableAltException("", 217, 7, input);
									dbg.recognitionException(nvae);
									throw nvae;
								} finally {
									input.rewind(nvaeMark);
								}
							}

							}
							break;
						case AT_SIGN:
							{
							alt217=2;
							}
							break;
						case COLON:
						case COMMA:
						case COMMENT:
						case DCOLON:
						case DIMENSION:
						case DOT:
						case GREATER:
						case HASH:
						case LBRACE:
						case LBRACKET:
						case LESS_AND:
						case NL:
						case PLUS:
						case RBRACE:
						case RPAREN:
						case SASS_EXTEND_ONLY_SELECTOR:
						case SEMI:
						case TILDE:
						case WS:
							{
							alt217=3;
							}
							break;
						default:
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 217, 1, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}
						}
						break;
					case HASH_SYMBOL:
						{
						alt217=1;
						}
						break;
					case AT_SIGN:
						{
						alt217=2;
						}
						break;
					case MINUS:
						{
						int LA217_4 = input.LA(2);
						if ( (LA217_4==HASH_SYMBOL) ) {
							alt217=1;
						}
						else if ( (LA217_4==AT_SIGN) ) {
							alt217=2;
						}

						else {
							if (state.backtracking>0) {state.failed=true; return;}
							int nvaeMark = input.mark();
							try {
								input.consume();
								NoViableAltException nvae =
									new NoViableAltException("", 217, 4, input);
								dbg.recognitionException(nvae);
								throw nvae;
							} finally {
								input.rewind(nvaeMark);
							}
						}

						}
						break;
					case NOT:
						{
						alt217=4;
						}
						break;
					case GEN:
						{
						alt217=5;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 217, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(217);}

					switch (alt217) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:763:14: {...}? sass_selector_interpolation_exp
							{
							dbg.location(763,14);
							if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isScssSource()");
							}dbg.location(763,33);
							pushFollow(FOLLOW_sass_selector_interpolation_exp_in_cssClass4332);
							sass_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:764:15: {...}? less_selector_interpolation_exp
							{
							dbg.location(764,15);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "cssClass", "isLessSource()");
							}dbg.location(764,33);
							pushFollow(FOLLOW_less_selector_interpolation_exp_in_cssClass4350);
							less_selector_interpolation_exp();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:765:15: IDENT
							{
							dbg.location(765,15);
							match(input,IDENT,FOLLOW_IDENT_in_cssClass4366); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:766:15: NOT
							{
							dbg.location(766,15);
							match(input,NOT,FOLLOW_NOT_in_cssClass4382); if (state.failed) return;
							}
							break;
						case 5 :
							dbg.enterAlt(5);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:767:15: GEN
							{
							dbg.location(767,15);
							match(input,GEN,FOLLOW_GEN_in_cssClass4398); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(217);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:769:11: {...}? DIMENSION
					{
					dbg.location(769,11);
					if ( !(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cssClass", "tokenNameStartsWith(\".\")");
					}dbg.location(769,39);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_cssClass4422); if (state.failed) return;
					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(WS, IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(770, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cssClass");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cssClass"



	// $ANTLR start "elementName"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:777:1: elementName : ( IDENT | GEN | LESS_AND | STAR );
	public final void elementName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "elementName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(777, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:778:5: ( IDENT | GEN | LESS_AND | STAR )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(778,5);
			if ( input.LA(1)==GEN||input.LA(1)==IDENT||input.LA(1)==LESS_AND||input.LA(1)==STAR ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(779, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "elementName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "elementName"



	// $ANTLR start "slAttribute"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:781:1: slAttribute : LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET ;
	public final void slAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(781, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:782:5: ( LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:782:7: LBRACKET ( namespacePrefix )? ( ws )? slAttributeName ( ws )? ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )? RBRACKET
			{
			dbg.location(782,7);
			match(input,LBRACKET,FOLLOW_LBRACKET_in_slAttribute4478); if (state.failed) return;dbg.location(783,6);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:783:6: ( namespacePrefix )?
			int alt219=2;
			try { dbg.enterSubRule(219);
			try { dbg.enterDecision(219, decisionCanBacktrack[219]);

			int LA219_0 = input.LA(1);
			if ( (LA219_0==IDENT) ) {
				int LA219_1 = input.LA(2);
				if ( (LA219_1==PIPE) ) {
					alt219=1;
				}
			}
			else if ( (LA219_0==PIPE||LA219_0==STAR) ) {
				alt219=1;
			}
			} finally {dbg.exitDecision(219);}

			switch (alt219) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:783:6: namespacePrefix
					{
					dbg.location(783,6);
					pushFollow(FOLLOW_namespacePrefix_in_slAttribute4485);
					namespacePrefix();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(219);}
			dbg.location(783,23);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:783:23: ( ws )?
			int alt220=2;
			try { dbg.enterSubRule(220);
			try { dbg.enterDecision(220, decisionCanBacktrack[220]);

			int LA220_0 = input.LA(1);
			if ( (LA220_0==COMMENT||LA220_0==NL||LA220_0==WS) ) {
				alt220=1;
			}
			} finally {dbg.exitDecision(220);}

			switch (alt220) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:783:23: ws
					{
					dbg.location(783,23);
					pushFollow(FOLLOW_ws_in_slAttribute4488);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(220);}
			dbg.location(784,9);
			pushFollow(FOLLOW_slAttributeName_in_slAttribute4499);
			slAttributeName();
			state._fsp--;
			if (state.failed) return;dbg.location(784,25);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:784:25: ( ws )?
			int alt221=2;
			try { dbg.enterSubRule(221);
			try { dbg.enterDecision(221, decisionCanBacktrack[221]);

			int LA221_0 = input.LA(1);
			if ( (LA221_0==COMMENT||LA221_0==NL||LA221_0==WS) ) {
				alt221=1;
			}
			} finally {dbg.exitDecision(221);}

			switch (alt221) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:784:25: ws
					{
					dbg.location(784,25);
					pushFollow(FOLLOW_ws_in_slAttribute4501);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(221);}
			dbg.location(786,13);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:786:13: ( ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )? )?
			int alt224=2;
			try { dbg.enterSubRule(224);
			try { dbg.enterDecision(224, decisionCanBacktrack[224]);

			int LA224_0 = input.LA(1);
			if ( (LA224_0==BEGINS||LA224_0==CONTAINS||LA224_0==DASHMATCH||LA224_0==ENDS||LA224_0==INCLUDES||LA224_0==OPEQ) ) {
				alt224=1;
			}
			} finally {dbg.exitDecision(224);}

			switch (alt224) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:787:17: ( OPEQ | INCLUDES | DASHMATCH | BEGINS | ENDS | CONTAINS ) ( ws )? slAttributeValue ( ws )?
					{
					dbg.location(787,17);
					if ( input.LA(1)==BEGINS||input.LA(1)==CONTAINS||input.LA(1)==DASHMATCH||input.LA(1)==ENDS||input.LA(1)==INCLUDES||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(795,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:795:17: ( ws )?
					int alt222=2;
					try { dbg.enterSubRule(222);
					try { dbg.enterDecision(222, decisionCanBacktrack[222]);

					int LA222_0 = input.LA(1);
					if ( (LA222_0==COMMENT||LA222_0==NL||LA222_0==WS) ) {
						alt222=1;
					}
					} finally {dbg.exitDecision(222);}

					switch (alt222) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:795:17: ws
							{
							dbg.location(795,17);
							pushFollow(FOLLOW_ws_in_slAttribute4715);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(222);}
					dbg.location(796,17);
					pushFollow(FOLLOW_slAttributeValue_in_slAttribute4734);
					slAttributeValue();
					state._fsp--;
					if (state.failed) return;dbg.location(797,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:797:17: ( ws )?
					int alt223=2;
					try { dbg.enterSubRule(223);
					try { dbg.enterDecision(223, decisionCanBacktrack[223]);

					int LA223_0 = input.LA(1);
					if ( (LA223_0==COMMENT||LA223_0==NL||LA223_0==WS) ) {
						alt223=1;
					}
					} finally {dbg.exitDecision(223);}

					switch (alt223) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:797:17: ws
							{
							dbg.location(797,17);
							pushFollow(FOLLOW_ws_in_slAttribute4752);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(223);}

					}
					break;

			}
			} finally {dbg.exitSubRule(224);}
			dbg.location(800,7);
			match(input,RBRACKET,FOLLOW_RBRACKET_in_slAttribute4777); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(IDENT, LBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(801, 0);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttribute"



	// $ANTLR start "slAttributeName"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:808:1: slAttributeName : IDENT ;
	public final void slAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(808, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:809:2: ( IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:809:4: IDENT
			{
			dbg.location(809,4);
			match(input,IDENT,FOLLOW_IDENT_in_slAttributeName4793); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(810, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeName"



	// $ANTLR start "slAttributeValue"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:812:1: slAttributeValue : ( IDENT | STRING ) ;
	public final void slAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "slAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(812, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:813:2: ( ( IDENT | STRING ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(813,2);
			if ( input.LA(1)==IDENT||input.LA(1)==STRING ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(818, 8);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "slAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "slAttributeValue"



	// $ANTLR start "pseudo"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:820:1: pseudo : ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) ;
	public final void pseudo() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "pseudo");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(820, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:821:5: ( ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:821:7: ( COLON | DCOLON ) ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			{
			dbg.location(821,7);
			if ( input.LA(1)==COLON||input.LA(1)==DCOLON ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(822,14);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:822:14: ( ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? ) |{...}? sass_interpolation_expression_var | ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN ) | ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN ) )
			int alt237=4;
			try { dbg.enterSubRule(237);
			try { dbg.enterDecision(237, decisionCanBacktrack[237]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA237_1 = input.LA(2);
				if ( (!(evalPredicate((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()")),""))) ) {
					alt237=1;
				}
				else if ( ((evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt237=4;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 237, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				alt237=2;
				}
				break;
			case NOT:
				{
				alt237=3;
				}
				break;
			case GEN:
				{
				alt237=1;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 237, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(237);}

			switch (alt237) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:823:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					{
					dbg.location(823,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:823:17: ( ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:824:21: ( IDENT | GEN ) ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					{
					dbg.location(824,21);
					if ( input.LA(1)==GEN||input.LA(1)==IDENT ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(825,21);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:825:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?
					int alt229=2;
					try { dbg.enterSubRule(229);
					try { dbg.enterDecision(229, decisionCanBacktrack[229]);

					try {
						isCyclicDecision = true;
						alt229 = dfa229.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(229);}

					switch (alt229) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:25: ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN
							{
							dbg.location(826,25);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:25: ( ws )?
							int alt225=2;
							try { dbg.enterSubRule(225);
							try { dbg.enterDecision(225, decisionCanBacktrack[225]);

							int LA225_0 = input.LA(1);
							if ( (LA225_0==COMMENT||LA225_0==NL||LA225_0==WS) ) {
								alt225=1;
							}
							} finally {dbg.exitDecision(225);}

							switch (alt225) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:25: ws
									{
									dbg.location(826,25);
									pushFollow(FOLLOW_ws_in_pseudo4985);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(225);}
							dbg.location(826,29);
							match(input,LPAREN,FOLLOW_LPAREN_in_pseudo4988); if (state.failed) return;dbg.location(826,36);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:36: ( ws )?
							int alt226=2;
							try { dbg.enterSubRule(226);
							try { dbg.enterDecision(226, decisionCanBacktrack[226]);

							int LA226_0 = input.LA(1);
							if ( (LA226_0==COMMENT||LA226_0==NL||LA226_0==WS) ) {
								alt226=1;
							}
							} finally {dbg.exitDecision(226);}

							switch (alt226) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:36: ws
									{
									dbg.location(826,36);
									pushFollow(FOLLOW_ws_in_pseudo4990);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(226);}
							dbg.location(826,40);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:40: ( ( expression ( ws )? ) | STAR )?
							int alt228=3;
							try { dbg.enterSubRule(228);
							try { dbg.enterDecision(228, decisionCanBacktrack[228]);

							int LA228_0 = input.LA(1);
							if ( ((LA228_0 >= ANGLE && LA228_0 <= AT_SIGN)||(LA228_0 >= BOTTOMCENTER_SYM && LA228_0 <= BOTTOMRIGHT_SYM)||LA228_0==CHARSET_SYM||LA228_0==COUNTER_STYLE_SYM||LA228_0==DIMENSION||LA228_0==EMS||LA228_0==EXS||(LA228_0 >= FONT_FACE_SYM && LA228_0 <= FREQ)||LA228_0==GEN||(LA228_0 >= HASH && LA228_0 <= HASH_SYMBOL)||LA228_0==IDENT||LA228_0==IMPORT_SYM||(LA228_0 >= LEFTBOTTOM_SYM && LA228_0 <= LENGTH)||(LA228_0 >= LESS_AND && LA228_0 <= LESS_JS_STRING)||(LA228_0 >= MEDIA_SYM && LA228_0 <= MOZ_DOCUMENT_SYM)||LA228_0==NAMESPACE_SYM||LA228_0==NUMBER||(LA228_0 >= PAGE_SYM && LA228_0 <= PERCENTAGE_SYMBOL)||LA228_0==PLUS||(LA228_0 >= REM && LA228_0 <= RIGHTTOP_SYM)||(LA228_0 >= SASS_AT_ROOT && LA228_0 <= SASS_DEBUG)||(LA228_0 >= SASS_EACH && LA228_0 <= SASS_ELSE)||LA228_0==SASS_EXTEND||(LA228_0 >= SASS_FOR && LA228_0 <= SASS_FUNCTION)||(LA228_0 >= SASS_IF && LA228_0 <= SASS_MIXIN)||(LA228_0 >= SASS_RETURN && LA228_0 <= SASS_WHILE)||LA228_0==STRING||(LA228_0 >= TILDE && LA228_0 <= TOPRIGHT_SYM)||LA228_0==URI||LA228_0==VARIABLE||LA228_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt228=1;
							}
							else if ( (LA228_0==STAR) ) {
								alt228=2;
							}
							} finally {dbg.exitDecision(228);}

							switch (alt228) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:42: ( expression ( ws )? )
									{
									dbg.location(826,42);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:42: ( expression ( ws )? )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:43: expression ( ws )?
									{
									dbg.location(826,43);
									pushFollow(FOLLOW_expression_in_pseudo4996);
									expression();
									state._fsp--;
									if (state.failed) return;dbg.location(826,54);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:54: ( ws )?
									int alt227=2;
									try { dbg.enterSubRule(227);
									try { dbg.enterDecision(227, decisionCanBacktrack[227]);

									int LA227_0 = input.LA(1);
									if ( (LA227_0==COMMENT||LA227_0==NL||LA227_0==WS) ) {
										alt227=1;
									}
									} finally {dbg.exitDecision(227);}

									switch (alt227) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:54: ws
											{
											dbg.location(826,54);
											pushFollow(FOLLOW_ws_in_pseudo4998);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(227);}

									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:826:61: STAR
									{
									dbg.location(826,61);
									match(input,STAR,FOLLOW_STAR_in_pseudo5004); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(228);}
							dbg.location(826,69);
							match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5009); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(229);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:829:19: {...}? sass_interpolation_expression_var
					{
					dbg.location(829,19);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isScssSource()");
					}dbg.location(829,37);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_pseudo5072);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN )
					{
					dbg.location(831,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:17: ( NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:19: NOT ( ws )? LPAREN ( ws )? ( simpleSelectorSequence ( ws )? )? RPAREN
					{
					dbg.location(831,19);
					match(input,NOT,FOLLOW_NOT_in_pseudo5110); if (state.failed) return;dbg.location(831,23);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:23: ( ws )?
					int alt230=2;
					try { dbg.enterSubRule(230);
					try { dbg.enterDecision(230, decisionCanBacktrack[230]);

					int LA230_0 = input.LA(1);
					if ( (LA230_0==COMMENT||LA230_0==NL||LA230_0==WS) ) {
						alt230=1;
					}
					} finally {dbg.exitDecision(230);}

					switch (alt230) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:23: ws
							{
							dbg.location(831,23);
							pushFollow(FOLLOW_ws_in_pseudo5112);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(230);}
					dbg.location(831,27);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5115); if (state.failed) return;dbg.location(831,34);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:34: ( ws )?
					int alt231=2;
					try { dbg.enterSubRule(231);
					try { dbg.enterDecision(231, decisionCanBacktrack[231]);

					int LA231_0 = input.LA(1);
					if ( (LA231_0==COMMENT||LA231_0==NL||LA231_0==WS) ) {
						alt231=1;
					}
					} finally {dbg.exitDecision(231);}

					switch (alt231) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:34: ws
							{
							dbg.location(831,34);
							pushFollow(FOLLOW_ws_in_pseudo5117);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(231);}
					dbg.location(831,38);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:38: ( simpleSelectorSequence ( ws )? )?
					int alt233=2;
					try { dbg.enterSubRule(233);
					try { dbg.enterDecision(233, decisionCanBacktrack[233]);

					int LA233_0 = input.LA(1);
					if ( (LA233_0==AT_SIGN||LA233_0==COLON||(LA233_0 >= DCOLON && LA233_0 <= DOT)||LA233_0==GEN||(LA233_0 >= HASH && LA233_0 <= HASH_SYMBOL)||LA233_0==IDENT||LA233_0==LBRACKET||LA233_0==LESS_AND||LA233_0==MINUS||LA233_0==PIPE||LA233_0==SASS_EXTEND_ONLY_SELECTOR||LA233_0==STAR) ) {
						alt233=1;
					}
					} finally {dbg.exitDecision(233);}

					switch (alt233) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:39: simpleSelectorSequence ( ws )?
							{
							dbg.location(831,39);
							pushFollow(FOLLOW_simpleSelectorSequence_in_pseudo5121);
							simpleSelectorSequence();
							state._fsp--;
							if (state.failed) return;dbg.location(831,62);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:62: ( ws )?
							int alt232=2;
							try { dbg.enterSubRule(232);
							try { dbg.enterDecision(232, decisionCanBacktrack[232]);

							int LA232_0 = input.LA(1);
							if ( (LA232_0==COMMENT||LA232_0==NL||LA232_0==WS) ) {
								alt232=1;
							}
							} finally {dbg.exitDecision(232);}

							switch (alt232) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:831:62: ws
									{
									dbg.location(831,62);
									pushFollow(FOLLOW_ws_in_pseudo5123);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(232);}

							}
							break;

					}
					} finally {dbg.exitSubRule(233);}
					dbg.location(831,68);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5128); if (state.failed) return;
					}

					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:17: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					{
					dbg.location(833,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:17: ({...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:18: {...}?{...}? IDENT ( ws )? LPAREN ( ws )? ( selectorsGroup )? RPAREN
					{
					dbg.location(833,18);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "isLessSource()");
					}dbg.location(833,36);
					if ( !(evalPredicate(tokenNameEquals("extend"),"tokenNameEquals(\"extend\")")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "pseudo", "tokenNameEquals(\"extend\")");
					}dbg.location(833,65);
					match(input,IDENT,FOLLOW_IDENT_in_pseudo5172); if (state.failed) return;dbg.location(833,71);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:71: ( ws )?
					int alt234=2;
					try { dbg.enterSubRule(234);
					try { dbg.enterDecision(234, decisionCanBacktrack[234]);

					int LA234_0 = input.LA(1);
					if ( (LA234_0==COMMENT||LA234_0==NL||LA234_0==WS) ) {
						alt234=1;
					}
					} finally {dbg.exitDecision(234);}

					switch (alt234) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:71: ws
							{
							dbg.location(833,71);
							pushFollow(FOLLOW_ws_in_pseudo5174);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(234);}
					dbg.location(833,75);
					match(input,LPAREN,FOLLOW_LPAREN_in_pseudo5177); if (state.failed) return;dbg.location(833,82);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:82: ( ws )?
					int alt235=2;
					try { dbg.enterSubRule(235);
					try { dbg.enterDecision(235, decisionCanBacktrack[235]);

					int LA235_0 = input.LA(1);
					if ( (LA235_0==COMMENT||LA235_0==NL||LA235_0==WS) ) {
						alt235=1;
					}
					} finally {dbg.exitDecision(235);}

					switch (alt235) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:82: ws
							{
							dbg.location(833,82);
							pushFollow(FOLLOW_ws_in_pseudo5179);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(235);}
					dbg.location(833,86);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:86: ( selectorsGroup )?
					int alt236=2;
					try { dbg.enterSubRule(236);
					try { dbg.enterDecision(236, decisionCanBacktrack[236]);

					int LA236_0 = input.LA(1);
					if ( (LA236_0==AT_SIGN||LA236_0==COLON||(LA236_0 >= DCOLON && LA236_0 <= DOT)||(LA236_0 >= GEN && LA236_0 <= GREATER)||(LA236_0 >= HASH && LA236_0 <= HASH_SYMBOL)||LA236_0==IDENT||LA236_0==LBRACKET||LA236_0==LESS_AND||LA236_0==MINUS||(LA236_0 >= PIPE && LA236_0 <= PLUS)||LA236_0==SASS_EXTEND_ONLY_SELECTOR||LA236_0==STAR||LA236_0==TILDE) ) {
						alt236=1;
					}
					} finally {dbg.exitDecision(236);}

					switch (alt236) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:833:86: selectorsGroup
							{
							dbg.location(833,86);
							pushFollow(FOLLOW_selectorsGroup_in_pseudo5182);
							selectorsGroup();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(236);}
					dbg.location(833,102);
					match(input,RPAREN,FOLLOW_RPAREN_in_pseudo5185); if (state.failed) return;
					}

					}
					break;

			}
			} finally {dbg.exitSubRule(237);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(835, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "pseudo");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "pseudo"



	// $ANTLR start "propertyDeclaration"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:837:1: propertyDeclaration : ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? );
	public final void propertyDeclaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyDeclaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(837, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:838:5: ({...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue | ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )? )
			int alt246=2;
			try { dbg.enterDecision(246, decisionCanBacktrack[246]);

			switch ( input.LA(1) ) {
			case STAR:
				{
				int LA246_1 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt246=1;
				}
				else if ( (true) ) {
					alt246=2;
				}

				}
				break;
			case IDENT:
				{
				int LA246_2 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt246=1;
				}
				else if ( (true) ) {
					alt246=2;
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA246_3 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt246=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt246=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 246, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA246_4 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt246=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt246=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 246, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA246_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt246=1;
				}
				else if ( (true) ) {
					alt246=2;
				}

				}
				break;
			case MINUS:
				{
				int LA246_6 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&(evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")))) ) {
					alt246=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt246=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 246, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA246_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt246=1;
				}
				else if ( (true) ) {
					alt246=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA246_8 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt246=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt246=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 246, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA246_9 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt246=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt246=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 246, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 246, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(246);}

			switch (alt246) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:1: {...}? ( STAR )? property ( ws )? COLON ( ws )? cp_propertyValue
					{
					dbg.location(839,1);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "propertyDeclaration", "isCssPreprocessorSource()");
					}dbg.location(839,30);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:30: ( STAR )?
					int alt238=2;
					try { dbg.enterSubRule(238);
					try { dbg.enterDecision(238, decisionCanBacktrack[238]);

					int LA238_0 = input.LA(1);
					if ( (LA238_0==STAR) ) {
						alt238=1;
					}
					} finally {dbg.exitDecision(238);}

					switch (alt238) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:30: STAR
							{
							dbg.location(839,30);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration5221); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(238);}
					dbg.location(839,36);
					pushFollow(FOLLOW_property_in_propertyDeclaration5224);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(839,45);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:45: ( ws )?
					int alt239=2;
					try { dbg.enterSubRule(239);
					try { dbg.enterDecision(239, decisionCanBacktrack[239]);

					int LA239_0 = input.LA(1);
					if ( (LA239_0==COMMENT||LA239_0==NL||LA239_0==WS) ) {
						alt239=1;
					}
					} finally {dbg.exitDecision(239);}

					switch (alt239) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:45: ws
							{
							dbg.location(839,45);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5226);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(239);}
					dbg.location(839,49);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration5229); if (state.failed) return;dbg.location(839,55);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:55: ( ws )?
					int alt240=2;
					try { dbg.enterSubRule(240);
					try { dbg.enterDecision(240, decisionCanBacktrack[240]);

					int LA240_0 = input.LA(1);
					if ( (LA240_0==COMMENT||LA240_0==NL||LA240_0==WS) ) {
						alt240=1;
					}
					} finally {dbg.exitDecision(240);}

					switch (alt240) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:839:55: ws
							{
							dbg.location(839,55);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5231);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(240);}
					dbg.location(839,59);
					pushFollow(FOLLOW_cp_propertyValue_in_propertyDeclaration5234);
					cp_propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:7: ( STAR )? property ( ws )? COLON ( ws )? propertyValue ( ( ws )? prio )?
					{
					dbg.location(840,7);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:7: ( STAR )?
					int alt241=2;
					try { dbg.enterSubRule(241);
					try { dbg.enterDecision(241, decisionCanBacktrack[241]);

					int LA241_0 = input.LA(1);
					if ( (LA241_0==STAR) ) {
						alt241=1;
					}
					} finally {dbg.exitDecision(241);}

					switch (alt241) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:7: STAR
							{
							dbg.location(840,7);
							match(input,STAR,FOLLOW_STAR_in_propertyDeclaration5243); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(241);}
					dbg.location(840,13);
					pushFollow(FOLLOW_property_in_propertyDeclaration5246);
					property();
					state._fsp--;
					if (state.failed) return;dbg.location(840,22);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:22: ( ws )?
					int alt242=2;
					try { dbg.enterSubRule(242);
					try { dbg.enterDecision(242, decisionCanBacktrack[242]);

					int LA242_0 = input.LA(1);
					if ( (LA242_0==COMMENT||LA242_0==NL||LA242_0==WS) ) {
						alt242=1;
					}
					} finally {dbg.exitDecision(242);}

					switch (alt242) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:22: ws
							{
							dbg.location(840,22);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5248);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(242);}
					dbg.location(840,26);
					match(input,COLON,FOLLOW_COLON_in_propertyDeclaration5251); if (state.failed) return;dbg.location(840,32);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:32: ( ws )?
					int alt243=2;
					try { dbg.enterSubRule(243);
					try { dbg.enterDecision(243, decisionCanBacktrack[243]);

					int LA243_0 = input.LA(1);
					if ( (LA243_0==COMMENT||LA243_0==NL||LA243_0==WS) ) {
						alt243=1;
					}
					} finally {dbg.exitDecision(243);}

					switch (alt243) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:32: ws
							{
							dbg.location(840,32);
							pushFollow(FOLLOW_ws_in_propertyDeclaration5253);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(243);}
					dbg.location(840,36);
					pushFollow(FOLLOW_propertyValue_in_propertyDeclaration5256);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(840,50);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:50: ( ( ws )? prio )?
					int alt245=2;
					try { dbg.enterSubRule(245);
					try { dbg.enterDecision(245, decisionCanBacktrack[245]);

					try {
						isCyclicDecision = true;
						alt245 = dfa245.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(245);}

					switch (alt245) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:51: ( ws )? prio
							{
							dbg.location(840,51);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:51: ( ws )?
							int alt244=2;
							try { dbg.enterSubRule(244);
							try { dbg.enterDecision(244, decisionCanBacktrack[244]);

							int LA244_0 = input.LA(1);
							if ( (LA244_0==COMMENT||LA244_0==NL||LA244_0==WS) ) {
								alt244=1;
							}
							} finally {dbg.exitDecision(244);}

							switch (alt244) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:840:51: ws
									{
									dbg.location(840,51);
									pushFollow(FOLLOW_ws_in_propertyDeclaration5259);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(244);}
							dbg.location(840,55);
							pushFollow(FOLLOW_prio_in_propertyDeclaration5262);
							prio();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(245);}

					}
					break;

			}
		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        //recovery: if an mismatched token occures inside a declaration is found,
			        //then skip all tokens until an end of the rule is found represented by right curly brace
			        consumeUntil(input, BitSet.of(SEMI, RBRACE));
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(842, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyDeclaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyDeclaration"



	// $ANTLR start "cp_propertyValue"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:851:1: cp_propertyValue : ({...}? cp_expression_list | propertyValue );
	public final void cp_propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(851, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:852:5: ({...}? cp_expression_list | propertyValue )
			int alt247=2;
			try { dbg.enterDecision(247, decisionCanBacktrack[247]);

			switch ( input.LA(1) ) {
			case IMPORTANT_SYM:
			case LBRACE:
			case LPAREN:
			case NOT:
				{
				alt247=1;
				}
				break;
			case MINUS:
			case PLUS:
				{
				int LA247_3 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case IDENT:
				{
				int LA247_4 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case VARIABLE:
				{
				int LA247_5 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case NUMBER:
				{
				int LA247_6 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA247_7 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case LENGTH:
				{
				int LA247_8 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case EMS:
				{
				int LA247_9 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case REM:
				{
				int LA247_10 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case EXS:
				{
				int LA247_11 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case ANGLE:
				{
				int LA247_12 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case TIME:
				{
				int LA247_13 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case FREQ:
				{
				int LA247_14 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case RESOLUTION:
				{
				int LA247_15 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case DIMENSION:
				{
				int LA247_16 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case STRING:
				{
				int LA247_17 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case TILDE:
				{
				int LA247_18 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA247_19 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case GEN:
				{
				int LA247_20 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case URI:
				{
				int LA247_21 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case HASH:
				{
				int LA247_22 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (true) ) {
					alt247=2;
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA247_23 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt247=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt247=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA247_24 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt247=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt247=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA247_25 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt247=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt247=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA247_26 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt247=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt247=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA247_27 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt247=1;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt247=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA247_28 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt247=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 247, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 247, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(247);}

			switch (alt247) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:853:5: {...}? cp_expression_list
					{
					dbg.location(853,5);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_propertyValue", "isCssPreprocessorSource()");
					}dbg.location(853,34);
					pushFollow(FOLLOW_cp_expression_list_in_cp_propertyValue5302);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:854:7: propertyValue
					{
					dbg.location(854,7);
					pushFollow(FOLLOW_propertyValue_in_cp_propertyValue5310);
					propertyValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(855, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_propertyValue"



	// $ANTLR start "propertyValue"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:857:1: propertyValue : expression ;
	public final void propertyValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "propertyValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(857, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:858:2: ( expression )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:859:9: expression
			{
			dbg.location(859,9);
			pushFollow(FOLLOW_expression_in_propertyValue5332);
			expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(860, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "propertyValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "propertyValue"



	// $ANTLR start "expressionPredicate"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:863:1: expressionPredicate options {k=1; } : (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) ;
	public final void expressionPredicate() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expressionPredicate");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(863, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:865:5: ( (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:866:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+ ( SEMI | RBRACE )
			{
			dbg.location(866,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:866:5: (~ ( AT_IDENT | STAR | SOLIDUS | LBRACE | SEMI | RBRACE | SASS_VAR ) )+
			int cnt248=0;
			try { dbg.enterSubRule(248);

			loop248:
			while (true) {
				int alt248=2;
				try { dbg.enterDecision(248, decisionCanBacktrack[248]);

				int LA248_0 = input.LA(1);
				if ( ((LA248_0 >= A && LA248_0 <= ANGLE)||(LA248_0 >= AT_SIGN && LA248_0 <= L)||(LA248_0 >= LBRACKET && LA248_0 <= R)||(LA248_0 >= RBRACKET && LA248_0 <= SASS_RETURN)||(LA248_0 >= SASS_WARN && LA248_0 <= SASS_WHILE)||(LA248_0 >= STRING && LA248_0 <= Z)) ) {
					alt248=1;
				}

				} finally {dbg.exitDecision(248);}

				switch (alt248) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
					{
					dbg.location(866,5);
					if ( (input.LA(1) >= A && input.LA(1) <= ANGLE)||(input.LA(1) >= AT_SIGN && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_RETURN)||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= STRING && input.LA(1) <= Z) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt248 >= 1 ) break loop248;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(248, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt248++;
			}
			} finally {dbg.exitSubRule(248);}
			dbg.location(866,76);
			if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(867, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expressionPredicate");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expressionPredicate"



	// $ANTLR start "syncToDeclarationsRule"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:871:1: syncToDeclarationsRule :;
	public final void syncToDeclarationsRule() throws RecognitionException {

		        //why sync to DOT? - LESS allows class rules nested
		        syncToSet(BitSet.of(IDENT, RBRACE, STAR, DOT));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToDeclarationsRule");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(871, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:876:6: ()
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:877:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(877, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToDeclarationsRule");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToDeclarationsRule"



	// $ANTLR start "syncTo_RBRACE"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:879:1: syncTo_RBRACE :;
	public final void syncTo_RBRACE() throws RecognitionException {

		        syncToRBRACE(1); //initial nest == 1
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_RBRACE");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(879, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:883:6: ()
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:884:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(884, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_RBRACE");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_RBRACE"



	// $ANTLR start "syncTo_SEMI"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:886:1: syncTo_SEMI : SEMI ;
	public final void syncTo_SEMI() throws RecognitionException {

		        syncToSet(BitSet.of(SEMI));
		    
		try { dbg.enterRule(getGrammarFileName(), "syncTo_SEMI");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(886, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:890:6: ( SEMI )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:891:13: SEMI
			{
			dbg.location(891,13);
			match(input,SEMI,FOLLOW_SEMI_in_syncTo_SEMI5502); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(892, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncTo_SEMI");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncTo_SEMI"



	// $ANTLR start "syncToFollow"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:895:1: syncToFollow :;
	public final void syncToFollow() throws RecognitionException {

		        syncToSet();
		    
		try { dbg.enterRule(getGrammarFileName(), "syncToFollow");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(895, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:899:6: ()
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:900:6: 
			{
			}

		}
		finally {
			// do for sure before leaving
		}
		dbg.location(900, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "syncToFollow");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "syncToFollow"



	// $ANTLR start "prio"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:902:1: prio : IMPORTANT_SYM ;
	public final void prio() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "prio");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(902, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:903:5: ( IMPORTANT_SYM )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:903:7: IMPORTANT_SYM
			{
			dbg.location(903,7);
			match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_prio5547); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(904, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "prio");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "prio"



	// $ANTLR start "expression"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:906:1: expression : term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* ;
	public final void expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(906, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:5: ( term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:7: term ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			{
			dbg.location(907,7);
			pushFollow(FOLLOW_term_in_expression5564);
			term();
			state._fsp--;
			if (state.failed) return;dbg.location(907,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*
			try { dbg.enterSubRule(252);

			loop252:
			while (true) {
				int alt252=2;
				try { dbg.enterDecision(252, decisionCanBacktrack[252]);

				try {
					isCyclicDecision = true;
					alt252 = dfa252.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(252);}

				switch (alt252) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term
					{
					dbg.location(907,66);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:66: ( ws | ( ( ws )? operator ( ws )? ) |)
					int alt251=3;
					try { dbg.enterSubRule(251);
					try { dbg.enterDecision(251, decisionCanBacktrack[251]);

					try {
						isCyclicDecision = true;
						alt251 = dfa251.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(251);}

					switch (alt251) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:68: ws
							{
							dbg.location(907,68);
							pushFollow(FOLLOW_ws_in_expression5596);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:73: ( ( ws )? operator ( ws )? )
							{
							dbg.location(907,73);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:73: ( ( ws )? operator ( ws )? )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:74: ( ws )? operator ( ws )?
							{
							dbg.location(907,74);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:74: ( ws )?
							int alt249=2;
							try { dbg.enterSubRule(249);
							try { dbg.enterDecision(249, decisionCanBacktrack[249]);

							int LA249_0 = input.LA(1);
							if ( (LA249_0==COMMENT||LA249_0==NL||LA249_0==WS) ) {
								alt249=1;
							}
							} finally {dbg.exitDecision(249);}

							switch (alt249) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:74: ws
									{
									dbg.location(907,74);
									pushFollow(FOLLOW_ws_in_expression5601);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(249);}
							dbg.location(907,78);
							pushFollow(FOLLOW_operator_in_expression5604);
							operator();
							state._fsp--;
							if (state.failed) return;dbg.location(907,87);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:87: ( ws )?
							int alt250=2;
							try { dbg.enterSubRule(250);
							try { dbg.enterDecision(250, decisionCanBacktrack[250]);

							int LA250_0 = input.LA(1);
							if ( (LA250_0==COMMENT||LA250_0==NL||LA250_0==WS) ) {
								alt250=1;
							}
							} finally {dbg.exitDecision(250);}

							switch (alt250) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:87: ws
									{
									dbg.location(907,87);
									pushFollow(FOLLOW_ws_in_expression5606);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(250);}

							}

							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:107: 
							{
							}
							break;

					}
					} finally {dbg.exitSubRule(251);}
					dbg.location(907,109);
					pushFollow(FOLLOW_term_in_expression5615);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop252;
				}
			}
			} finally {dbg.exitSubRule(252);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(908, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "expression"



	// $ANTLR start "term"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:910:1: term : ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) ;
	public final void term() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "term");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(910, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:911:5: ( ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:912:5: ( unaryOperator ( ws )? )? ( ( functionName ( ws )? LPAREN )=> function | VARIABLE | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			{
			dbg.location(912,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:912:5: ( unaryOperator ( ws )? )?
			int alt254=2;
			try { dbg.enterSubRule(254);
			try { dbg.enterDecision(254, decisionCanBacktrack[254]);

			int LA254_0 = input.LA(1);
			if ( (LA254_0==MINUS||LA254_0==PLUS) ) {
				alt254=1;
			}
			} finally {dbg.exitDecision(254);}

			switch (alt254) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:912:7: unaryOperator ( ws )?
					{
					dbg.location(912,7);
					pushFollow(FOLLOW_unaryOperator_in_term5640);
					unaryOperator();
					state._fsp--;
					if (state.failed) return;dbg.location(912,21);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:912:21: ( ws )?
					int alt253=2;
					try { dbg.enterSubRule(253);
					try { dbg.enterDecision(253, decisionCanBacktrack[253]);

					int LA253_0 = input.LA(1);
					if ( (LA253_0==COMMENT||LA253_0==NL||LA253_0==WS) ) {
						alt253=1;
					}
					} finally {dbg.exitDecision(253);}

					switch (alt253) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:912:21: ws
							{
							dbg.location(912,21);
							pushFollow(FOLLOW_ws_in_term5642);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(253);}

					}
					break;

			}
			} finally {dbg.exitSubRule(254);}
			dbg.location(913,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:913:5: ( ( functionName ( ws )? LPAREN )=> function | VARIABLE | IDENT | NUMBER | PERCENTAGE | LENGTH | EMS | REM | EXS | ANGLE | TIME | FREQ | RESOLUTION | DIMENSION | STRING | TILDE ( STRING | LESS_JS_STRING ) | LESS_JS_STRING | GEN | URI | hexColor |{...}? cp_variable |{...}? LESS_AND |{...}? sass_interpolation_expression_var |{...}? less_selector_interpolation |{...}? cp_term_symbol )
			int alt255=25;
			try { dbg.enterSubRule(255);
			try { dbg.enterDecision(255, decisionCanBacktrack[255]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA255_1 = input.LA(2);
				if ( (synpred37_Css3()) ) {
					alt255=1;
				}
				else if ( (true) ) {
					alt255=3;
				}

				}
				break;
			case VARIABLE:
				{
				alt255=2;
				}
				break;
			case NUMBER:
				{
				alt255=4;
				}
				break;
			case PERCENTAGE:
				{
				alt255=5;
				}
				break;
			case LENGTH:
				{
				alt255=6;
				}
				break;
			case EMS:
				{
				alt255=7;
				}
				break;
			case REM:
				{
				alt255=8;
				}
				break;
			case EXS:
				{
				alt255=9;
				}
				break;
			case ANGLE:
				{
				alt255=10;
				}
				break;
			case TIME:
				{
				alt255=11;
				}
				break;
			case FREQ:
				{
				alt255=12;
				}
				break;
			case RESOLUTION:
				{
				alt255=13;
				}
				break;
			case DIMENSION:
				{
				alt255=14;
				}
				break;
			case STRING:
				{
				alt255=15;
				}
				break;
			case TILDE:
				{
				alt255=16;
				}
				break;
			case LESS_JS_STRING:
				{
				alt255=17;
				}
				break;
			case GEN:
				{
				alt255=18;
				}
				break;
			case URI:
				{
				alt255=19;
				}
				break;
			case HASH:
				{
				alt255=20;
				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_VAR:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				alt255=21;
				}
				break;
			case LESS_AND:
				{
				alt255=22;
				}
				break;
			case HASH_SYMBOL:
				{
				alt255=23;
				}
				break;
			case AT_SIGN:
				{
				alt255=24;
				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				alt255=25;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 255, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(255);}

			switch (alt255) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:914:9: ( functionName ( ws )? LPAREN )=> function
					{
					dbg.location(914,36);
					pushFollow(FOLLOW_function_in_term5671);
					function();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:915:11: VARIABLE
					{
					dbg.location(915,11);
					match(input,VARIABLE,FOLLOW_VARIABLE_in_term5684); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:916:11: IDENT
					{
					dbg.location(916,11);
					match(input,IDENT,FOLLOW_IDENT_in_term5696); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:917:11: NUMBER
					{
					dbg.location(917,11);
					match(input,NUMBER,FOLLOW_NUMBER_in_term5708); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:918:11: PERCENTAGE
					{
					dbg.location(918,11);
					match(input,PERCENTAGE,FOLLOW_PERCENTAGE_in_term5720); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:919:11: LENGTH
					{
					dbg.location(919,11);
					match(input,LENGTH,FOLLOW_LENGTH_in_term5732); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:920:11: EMS
					{
					dbg.location(920,11);
					match(input,EMS,FOLLOW_EMS_in_term5744); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:921:11: REM
					{
					dbg.location(921,11);
					match(input,REM,FOLLOW_REM_in_term5756); if (state.failed) return;
					}
					break;
				case 9 :
					dbg.enterAlt(9);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:922:11: EXS
					{
					dbg.location(922,11);
					match(input,EXS,FOLLOW_EXS_in_term5768); if (state.failed) return;
					}
					break;
				case 10 :
					dbg.enterAlt(10);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:923:11: ANGLE
					{
					dbg.location(923,11);
					match(input,ANGLE,FOLLOW_ANGLE_in_term5780); if (state.failed) return;
					}
					break;
				case 11 :
					dbg.enterAlt(11);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:924:11: TIME
					{
					dbg.location(924,11);
					match(input,TIME,FOLLOW_TIME_in_term5792); if (state.failed) return;
					}
					break;
				case 12 :
					dbg.enterAlt(12);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:925:11: FREQ
					{
					dbg.location(925,11);
					match(input,FREQ,FOLLOW_FREQ_in_term5804); if (state.failed) return;
					}
					break;
				case 13 :
					dbg.enterAlt(13);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:926:11: RESOLUTION
					{
					dbg.location(926,11);
					match(input,RESOLUTION,FOLLOW_RESOLUTION_in_term5816); if (state.failed) return;
					}
					break;
				case 14 :
					dbg.enterAlt(14);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:927:11: DIMENSION
					{
					dbg.location(927,11);
					match(input,DIMENSION,FOLLOW_DIMENSION_in_term5828); if (state.failed) return;
					}
					break;
				case 15 :
					dbg.enterAlt(15);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:928:11: STRING
					{
					dbg.location(928,11);
					match(input,STRING,FOLLOW_STRING_in_term5845); if (state.failed) return;
					}
					break;
				case 16 :
					dbg.enterAlt(16);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:929:11: TILDE ( STRING | LESS_JS_STRING )
					{
					dbg.location(929,11);
					match(input,TILDE,FOLLOW_TILDE_in_term5857); if (state.failed) return;dbg.location(929,17);
					if ( input.LA(1)==LESS_JS_STRING||input.LA(1)==STRING ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 17 :
					dbg.enterAlt(17);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:930:11: LESS_JS_STRING
					{
					dbg.location(930,11);
					match(input,LESS_JS_STRING,FOLLOW_LESS_JS_STRING_in_term5880); if (state.failed) return;
					}
					break;
				case 18 :
					dbg.enterAlt(18);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:931:11: GEN
					{
					dbg.location(931,11);
					match(input,GEN,FOLLOW_GEN_in_term5895); if (state.failed) return;
					}
					break;
				case 19 :
					dbg.enterAlt(19);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:932:11: URI
					{
					dbg.location(932,11);
					match(input,URI,FOLLOW_URI_in_term5907); if (state.failed) return;
					}
					break;
				case 20 :
					dbg.enterAlt(20);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:933:11: hexColor
					{
					dbg.location(933,11);
					pushFollow(FOLLOW_hexColor_in_term5919);
					hexColor();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 21 :
					dbg.enterAlt(21);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:934:11: {...}? cp_variable
					{
					dbg.location(934,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(934,40);
					pushFollow(FOLLOW_cp_variable_in_term5933);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 22 :
					dbg.enterAlt(22);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:935:11: {...}? LESS_AND
					{
					dbg.location(935,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(935,29);
					match(input,LESS_AND,FOLLOW_LESS_AND_in_term5947); if (state.failed) return;
					}
					break;
				case 23 :
					dbg.enterAlt(23);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:936:11: {...}? sass_interpolation_expression_var
					{
					dbg.location(936,11);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isScssSource()");
					}dbg.location(936,29);
					pushFollow(FOLLOW_sass_interpolation_expression_var_in_term5961);
					sass_interpolation_expression_var();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 24 :
					dbg.enterAlt(24);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:937:11: {...}? less_selector_interpolation
					{
					dbg.location(937,11);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isLessSource()");
					}dbg.location(937,29);
					pushFollow(FOLLOW_less_selector_interpolation_in_term5975);
					less_selector_interpolation();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 25 :
					dbg.enterAlt(25);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:938:11: {...}? cp_term_symbol
					{
					dbg.location(938,11);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "term", "isCssPreprocessorSource()");
					}dbg.location(938,40);
					pushFollow(FOLLOW_cp_term_symbol_in_term5989);
					cp_term_symbol();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(255);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(940, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "term");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "term"



	// $ANTLR start "cp_term_symbol"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:945:1: cp_term_symbol : PERCENTAGE_SYMBOL ;
	public final void cp_term_symbol() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_term_symbol");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(945, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:946:5: ( PERCENTAGE_SYMBOL )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:946:7: PERCENTAGE_SYMBOL
			{
			dbg.location(946,7);
			match(input,PERCENTAGE_SYMBOL,FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol6016); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(947, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_term_symbol");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_term_symbol"



	// $ANTLR start "function"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:949:1: function : functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN ;
	public final void function() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "function");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(949, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:950:2: ( functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:950:5: functionName ( ws )? LPAREN ( ws )? ( fnAttributes |) RPAREN
			{
			dbg.location(950,5);
			pushFollow(FOLLOW_functionName_in_function6032);
			functionName();
			state._fsp--;
			if (state.failed) return;dbg.location(950,18);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:950:18: ( ws )?
			int alt256=2;
			try { dbg.enterSubRule(256);
			try { dbg.enterDecision(256, decisionCanBacktrack[256]);

			int LA256_0 = input.LA(1);
			if ( (LA256_0==COMMENT||LA256_0==NL||LA256_0==WS) ) {
				alt256=1;
			}
			} finally {dbg.exitDecision(256);}

			switch (alt256) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:950:18: ws
					{
					dbg.location(950,18);
					pushFollow(FOLLOW_ws_in_function6034);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(256);}
			dbg.location(951,3);
			match(input,LPAREN,FOLLOW_LPAREN_in_function6039); if (state.failed) return;dbg.location(951,10);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:951:10: ( ws )?
			int alt257=2;
			try { dbg.enterSubRule(257);
			try { dbg.enterDecision(257, decisionCanBacktrack[257]);

			int LA257_0 = input.LA(1);
			if ( (LA257_0==COMMENT||LA257_0==NL||LA257_0==WS) ) {
				alt257=1;
			}
			} finally {dbg.exitDecision(257);}

			switch (alt257) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:951:10: ws
					{
					dbg.location(951,10);
					pushFollow(FOLLOW_ws_in_function6041);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(257);}
			dbg.location(952,3);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:952:3: ( fnAttributes |)
			int alt258=2;
			try { dbg.enterSubRule(258);
			try { dbg.enterDecision(258, decisionCanBacktrack[258]);

			int LA258_0 = input.LA(1);
			if ( ((LA258_0 >= ANGLE && LA258_0 <= AT_SIGN)||(LA258_0 >= BOTTOMCENTER_SYM && LA258_0 <= BOTTOMRIGHT_SYM)||LA258_0==CHARSET_SYM||LA258_0==COUNTER_STYLE_SYM||LA258_0==DIMENSION||LA258_0==EMS||LA258_0==EXS||(LA258_0 >= FONT_FACE_SYM && LA258_0 <= FREQ)||LA258_0==GEN||(LA258_0 >= HASH && LA258_0 <= HASH_SYMBOL)||(LA258_0 >= IDENT && LA258_0 <= IMPORT_SYM)||LA258_0==LBRACE||(LA258_0 >= LEFTBOTTOM_SYM && LA258_0 <= LENGTH)||(LA258_0 >= LESS_AND && LA258_0 <= LESS_JS_STRING)||LA258_0==LPAREN||(LA258_0 >= MEDIA_SYM && LA258_0 <= MOZ_DOCUMENT_SYM)||LA258_0==NAMESPACE_SYM||(LA258_0 >= NOT && LA258_0 <= NUMBER)||(LA258_0 >= PAGE_SYM && LA258_0 <= PERCENTAGE_SYMBOL)||LA258_0==PLUS||(LA258_0 >= REM && LA258_0 <= RIGHTTOP_SYM)||(LA258_0 >= SASS_AT_ROOT && LA258_0 <= SASS_DEBUG)||(LA258_0 >= SASS_EACH && LA258_0 <= SASS_ELSE)||LA258_0==SASS_EXTEND||(LA258_0 >= SASS_FOR && LA258_0 <= SASS_FUNCTION)||(LA258_0 >= SASS_IF && LA258_0 <= SASS_MIXIN)||(LA258_0 >= SASS_RETURN && LA258_0 <= SASS_WHILE)||LA258_0==STRING||(LA258_0 >= TILDE && LA258_0 <= TOPRIGHT_SYM)||LA258_0==URI||LA258_0==VARIABLE||LA258_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt258=1;
			}
			else if ( (LA258_0==RPAREN) ) {
				alt258=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 258, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(258);}

			switch (alt258) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:953:21: fnAttributes
					{
					dbg.location(953,21);
					pushFollow(FOLLOW_fnAttributes_in_function6068);
					fnAttributes();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:955:3: 
					{
					}
					break;

			}
			} finally {dbg.exitSubRule(258);}
			dbg.location(956,3);
			match(input,RPAREN,FOLLOW_RPAREN_in_function6099); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        consumeUntil(input, BitSet.of(RPAREN, SEMI, RBRACE));

		}

		finally {
			// do for sure before leaving
		}
		dbg.location(957, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "function");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "function"



	// $ANTLR start "functionName"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:963:1: functionName : ( IDENT COLON )? IDENT ( DOT IDENT )* ;
	public final void functionName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "functionName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(963, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:967:2: ( ( IDENT COLON )? IDENT ( DOT IDENT )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:968:9: ( IDENT COLON )? IDENT ( DOT IDENT )*
			{
			dbg.location(968,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:968:9: ( IDENT COLON )?
			int alt259=2;
			try { dbg.enterSubRule(259);
			try { dbg.enterDecision(259, decisionCanBacktrack[259]);

			int LA259_0 = input.LA(1);
			if ( (LA259_0==IDENT) ) {
				int LA259_1 = input.LA(2);
				if ( (LA259_1==COLON) ) {
					alt259=1;
				}
			}
			} finally {dbg.exitDecision(259);}

			switch (alt259) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:968:10: IDENT COLON
					{
					dbg.location(968,10);
					match(input,IDENT,FOLLOW_IDENT_in_functionName6151); if (state.failed) return;dbg.location(968,16);
					match(input,COLON,FOLLOW_COLON_in_functionName6153); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(259);}
			dbg.location(968,24);
			match(input,IDENT,FOLLOW_IDENT_in_functionName6157); if (state.failed) return;dbg.location(968,30);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:968:30: ( DOT IDENT )*
			try { dbg.enterSubRule(260);

			loop260:
			while (true) {
				int alt260=2;
				try { dbg.enterDecision(260, decisionCanBacktrack[260]);

				int LA260_0 = input.LA(1);
				if ( (LA260_0==DOT) ) {
					alt260=1;
				}

				} finally {dbg.exitDecision(260);}

				switch (alt260) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:968:31: DOT IDENT
					{
					dbg.location(968,31);
					match(input,DOT,FOLLOW_DOT_in_functionName6160); if (state.failed) return;dbg.location(968,35);
					match(input,IDENT,FOLLOW_IDENT_in_functionName6162); if (state.failed) return;
					}
					break;

				default :
					break loop260;
				}
			}
			} finally {dbg.exitSubRule(260);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(969, 5);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "functionName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "functionName"



	// $ANTLR start "fnAttributes"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:971:1: fnAttributes : fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? ;
	public final void fnAttributes() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributes");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(971, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:972:5: ( fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:5: fnAttribute ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )* ( ws )?
			{
			dbg.location(973,5);
			pushFollow(FOLLOW_fnAttribute_in_fnAttributes6186);
			fnAttribute();
			state._fsp--;
			if (state.failed) return;dbg.location(973,17);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*
			try { dbg.enterSubRule(264);

			loop264:
			while (true) {
				int alt264=2;
				try { dbg.enterDecision(264, decisionCanBacktrack[264]);

				try {
					isCyclicDecision = true;
					alt264 = dfa264.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(264);}

				switch (alt264) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:18: ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute
					{
					dbg.location(973,18);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:18: ( ws )?
					int alt261=2;
					try { dbg.enterSubRule(261);
					try { dbg.enterDecision(261, decisionCanBacktrack[261]);

					int LA261_0 = input.LA(1);
					if ( (LA261_0==COMMENT||LA261_0==NL||LA261_0==WS) ) {
						alt261=1;
					}
					} finally {dbg.exitDecision(261);}

					switch (alt261) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:18: ws
							{
							dbg.location(973,18);
							pushFollow(FOLLOW_ws_in_fnAttributes6189);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(261);}
					dbg.location(973,22);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:22: ( COMMA |{...}? SEMI )
					int alt262=2;
					try { dbg.enterSubRule(262);
					try { dbg.enterDecision(262, decisionCanBacktrack[262]);

					int LA262_0 = input.LA(1);
					if ( (LA262_0==COMMA) ) {
						alt262=1;
					}
					else if ( (LA262_0==SEMI) ) {
						alt262=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 262, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(262);}

					switch (alt262) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:23: COMMA
							{
							dbg.location(973,23);
							match(input,COMMA,FOLLOW_COMMA_in_fnAttributes6193); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:31: {...}? SEMI
							{
							dbg.location(973,31);
							if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "fnAttributes", "isLessSource()");
							}dbg.location(973,49);
							match(input,SEMI,FOLLOW_SEMI_in_fnAttributes6199); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(262);}
					dbg.location(973,55);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:55: ( ws )?
					int alt263=2;
					try { dbg.enterSubRule(263);
					try { dbg.enterDecision(263, decisionCanBacktrack[263]);

					int LA263_0 = input.LA(1);
					if ( (LA263_0==COMMENT||LA263_0==NL||LA263_0==WS) ) {
						alt263=1;
					}
					} finally {dbg.exitDecision(263);}

					switch (alt263) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:55: ws
							{
							dbg.location(973,55);
							pushFollow(FOLLOW_ws_in_fnAttributes6202);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(263);}
					dbg.location(973,59);
					pushFollow(FOLLOW_fnAttribute_in_fnAttributes6205);
					fnAttribute();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop264;
				}
			}
			} finally {dbg.exitSubRule(264);}
			dbg.location(973,73);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:73: ( ws )?
			int alt265=2;
			try { dbg.enterSubRule(265);
			try { dbg.enterDecision(265, decisionCanBacktrack[265]);

			int LA265_0 = input.LA(1);
			if ( (LA265_0==COMMENT||LA265_0==NL||LA265_0==WS) ) {
				alt265=1;
			}
			} finally {dbg.exitDecision(265);}

			switch (alt265) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:973:73: ws
					{
					dbg.location(973,73);
					pushFollow(FOLLOW_ws_in_fnAttributes6209);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(265);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(974, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributes");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributes"



	// $ANTLR start "fnAttribute"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:976:1: fnAttribute : ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression );
	public final void fnAttribute() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttribute");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(976, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:977:2: ( ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue | ( cp_expression )=> cp_expression | expression )
			int alt268=3;
			try { dbg.enterDecision(268, decisionCanBacktrack[268]);

			int LA268_0 = input.LA(1);
			if ( (LA268_0==IDENT) ) {
				int LA268_1 = input.LA(2);
				if ( (synpred38_Css3()) ) {
					alt268=1;
				}
				else if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==AT_IDENT||(LA268_0 >= BOTTOMCENTER_SYM && LA268_0 <= BOTTOMRIGHT_SYM)||LA268_0==CHARSET_SYM||LA268_0==COUNTER_STYLE_SYM||LA268_0==FONT_FACE_SYM||LA268_0==IMPORT_SYM||(LA268_0 >= LEFTBOTTOM_SYM && LA268_0 <= LEFTTOP_SYM)||LA268_0==MEDIA_SYM||LA268_0==MOZ_DOCUMENT_SYM||LA268_0==NAMESPACE_SYM||LA268_0==PAGE_SYM||(LA268_0 >= RIGHTBOTTOM_SYM && LA268_0 <= RIGHTTOP_SYM)||(LA268_0 >= SASS_AT_ROOT && LA268_0 <= SASS_DEBUG)||(LA268_0 >= SASS_EACH && LA268_0 <= SASS_ELSE)||LA268_0==SASS_EXTEND||(LA268_0 >= SASS_FOR && LA268_0 <= SASS_FUNCTION)||(LA268_0 >= SASS_IF && LA268_0 <= SASS_MIXIN)||LA268_0==SASS_RETURN||(LA268_0 >= SASS_WARN && LA268_0 <= SASS_WHILE)||(LA268_0 >= TOPCENTER_SYM && LA268_0 <= TOPRIGHT_SYM)||LA268_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA268_2 = input.LA(2);
				if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt268=1;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred39_Css3())) ) {
					alt268=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt268=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA268_0==SASS_VAR) ) {
				int LA268_3 = input.LA(2);
				if ( (((synpred38_Css3()&&evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"))&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt268=1;
				}
				else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred39_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt268=2;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt268=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA268_0==LBRACE) && (synpred39_Css3())) {
				alt268=2;
			}
			else if ( (LA268_0==NOT) && (synpred39_Css3())) {
				alt268=2;
			}
			else if ( (LA268_0==MINUS||LA268_0==PLUS) ) {
				int LA268_6 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==VARIABLE) ) {
				int LA268_7 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==NUMBER) ) {
				int LA268_8 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==PERCENTAGE) ) {
				int LA268_9 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==LENGTH) ) {
				int LA268_10 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==EMS) ) {
				int LA268_11 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==REM) ) {
				int LA268_12 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==EXS) ) {
				int LA268_13 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==ANGLE) ) {
				int LA268_14 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==TIME) ) {
				int LA268_15 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==FREQ) ) {
				int LA268_16 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==RESOLUTION) ) {
				int LA268_17 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==DIMENSION) ) {
				int LA268_18 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==STRING) ) {
				int LA268_19 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==TILDE) ) {
				int LA268_20 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==LESS_JS_STRING) ) {
				int LA268_21 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==GEN) ) {
				int LA268_22 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==URI) ) {
				int LA268_23 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==HASH) ) {
				int LA268_24 = input.LA(2);
				if ( (synpred39_Css3()) ) {
					alt268=2;
				}
				else if ( (true) ) {
					alt268=3;
				}

			}
			else if ( (LA268_0==LESS_AND) ) {
				int LA268_25 = input.LA(2);
				if ( ((synpred39_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt268=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt268=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA268_0==HASH_SYMBOL) ) {
				int LA268_26 = input.LA(2);
				if ( ((synpred39_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt268=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt268=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA268_0==AT_SIGN) ) {
				int LA268_27 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred39_Css3())) ) {
					alt268=2;
				}
				else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt268=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 27, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA268_0==PERCENTAGE_SYMBOL) ) {
				int LA268_28 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred39_Css3())) ) {
					alt268=2;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt268=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 268, 28, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA268_0==IMPORTANT_SYM) && (synpred39_Css3())) {
				alt268=2;
			}
			else if ( (LA268_0==LPAREN) && (synpred39_Css3())) {
				alt268=2;
			}

			} finally {dbg.exitDecision(268);}

			switch (alt268) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )=> fnAttributeName ( ws )? ( OPEQ | COLON ) ( ws )? fnAttributeValue
					{
					dbg.location(978,46);
					pushFollow(FOLLOW_fnAttributeName_in_fnAttribute6246);
					fnAttributeName();
					state._fsp--;
					if (state.failed) return;dbg.location(978,62);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:62: ( ws )?
					int alt266=2;
					try { dbg.enterSubRule(266);
					try { dbg.enterDecision(266, decisionCanBacktrack[266]);

					int LA266_0 = input.LA(1);
					if ( (LA266_0==COMMENT||LA266_0==NL||LA266_0==WS) ) {
						alt266=1;
					}
					} finally {dbg.exitDecision(266);}

					switch (alt266) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:62: ws
							{
							dbg.location(978,62);
							pushFollow(FOLLOW_ws_in_fnAttribute6248);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(266);}
					dbg.location(978,66);
					if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(978,79);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:79: ( ws )?
					int alt267=2;
					try { dbg.enterSubRule(267);
					try { dbg.enterDecision(267, decisionCanBacktrack[267]);

					int LA267_0 = input.LA(1);
					if ( (LA267_0==COMMENT||LA267_0==NL||LA267_0==WS) ) {
						alt267=1;
					}
					} finally {dbg.exitDecision(267);}

					switch (alt267) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:79: ws
							{
							dbg.location(978,79);
							pushFollow(FOLLOW_ws_in_fnAttribute6257);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(267);}
					dbg.location(978,83);
					pushFollow(FOLLOW_fnAttributeValue_in_fnAttribute6260);
					fnAttributeValue();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:979:11: ( cp_expression )=> cp_expression
					{
					dbg.location(979,29);
					pushFollow(FOLLOW_cp_expression_in_fnAttribute6277);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:980:11: expression
					{
					dbg.location(980,11);
					pushFollow(FOLLOW_expression_in_fnAttribute6289);
					expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(981, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttribute");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttribute"



	// $ANTLR start "fnAttributeName"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:983:1: fnAttributeName : ( IDENT ( DOT IDENT )* |{...}? cp_variable );
	public final void fnAttributeName() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeName");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(983, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:984:2: ( IDENT ( DOT IDENT )* |{...}? cp_variable )
			int alt270=2;
			try { dbg.enterDecision(270, decisionCanBacktrack[270]);

			int LA270_0 = input.LA(1);
			if ( (LA270_0==IDENT) ) {
				alt270=1;
			}
			else if ( (LA270_0==AT_IDENT||(LA270_0 >= BOTTOMCENTER_SYM && LA270_0 <= BOTTOMRIGHT_SYM)||LA270_0==CHARSET_SYM||LA270_0==COUNTER_STYLE_SYM||LA270_0==FONT_FACE_SYM||LA270_0==IMPORT_SYM||(LA270_0 >= LEFTBOTTOM_SYM && LA270_0 <= LEFTTOP_SYM)||LA270_0==MEDIA_SYM||LA270_0==MOZ_DOCUMENT_SYM||LA270_0==NAMESPACE_SYM||LA270_0==PAGE_SYM||(LA270_0 >= RIGHTBOTTOM_SYM && LA270_0 <= RIGHTTOP_SYM)||(LA270_0 >= SASS_AT_ROOT && LA270_0 <= SASS_DEBUG)||(LA270_0 >= SASS_EACH && LA270_0 <= SASS_ELSE)||LA270_0==SASS_EXTEND||(LA270_0 >= SASS_FOR && LA270_0 <= SASS_FUNCTION)||(LA270_0 >= SASS_IF && LA270_0 <= SASS_MIXIN)||(LA270_0 >= SASS_RETURN && LA270_0 <= SASS_WHILE)||(LA270_0 >= TOPCENTER_SYM && LA270_0 <= TOPRIGHT_SYM)||LA270_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt270=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 270, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(270);}

			switch (alt270) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:985:13: IDENT ( DOT IDENT )*
					{
					dbg.location(985,13);
					match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName6312); if (state.failed) return;dbg.location(985,19);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:985:19: ( DOT IDENT )*
					try { dbg.enterSubRule(269);

					loop269:
					while (true) {
						int alt269=2;
						try { dbg.enterDecision(269, decisionCanBacktrack[269]);

						int LA269_0 = input.LA(1);
						if ( (LA269_0==DOT) ) {
							alt269=1;
						}

						} finally {dbg.exitDecision(269);}

						switch (alt269) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:985:20: DOT IDENT
							{
							dbg.location(985,20);
							match(input,DOT,FOLLOW_DOT_in_fnAttributeName6315); if (state.failed) return;dbg.location(985,24);
							match(input,IDENT,FOLLOW_IDENT_in_fnAttributeName6317); if (state.failed) return;
							}
							break;

						default :
							break loop269;
						}
					}
					} finally {dbg.exitSubRule(269);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:986:15: {...}? cp_variable
					{
					dbg.location(986,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeName", "isCssPreprocessorSource()");
					}dbg.location(986,44);
					pushFollow(FOLLOW_cp_variable_in_fnAttributeName6337);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(987, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeName");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeName"



	// $ANTLR start "fnAttributeValue"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:989:1: fnAttributeValue : ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression );
	public final void fnAttributeValue() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "fnAttributeValue");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(989, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:990:2: ( term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )* |{...}? cp_math_expression )
			int alt275=2;
			try { dbg.enterDecision(275, decisionCanBacktrack[275]);

			switch ( input.LA(1) ) {
			case MINUS:
			case PLUS:
				{
				int LA275_1 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IDENT:
				{
				int LA275_2 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case VARIABLE:
				{
				int LA275_3 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 3, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case NUMBER:
				{
				int LA275_4 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 4, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE:
				{
				int LA275_5 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 5, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LENGTH:
				{
				int LA275_6 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 6, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EMS:
				{
				int LA275_7 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 7, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case REM:
				{
				int LA275_8 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 8, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case EXS:
				{
				int LA275_9 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 9, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case ANGLE:
				{
				int LA275_10 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 10, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TIME:
				{
				int LA275_11 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 11, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case FREQ:
				{
				int LA275_12 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 12, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case RESOLUTION:
				{
				int LA275_13 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 13, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case DIMENSION:
				{
				int LA275_14 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 14, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case STRING:
				{
				int LA275_15 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 15, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case TILDE:
				{
				int LA275_16 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 16, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_JS_STRING:
				{
				int LA275_17 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 17, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case GEN:
				{
				int LA275_18 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 18, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case URI:
				{
				int LA275_19 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 19, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH:
				{
				int LA275_20 = input.LA(2);
				if ( (!(evalPredicate(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()"),""))) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 20, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_IDENT:
			case BOTTOMCENTER_SYM:
			case BOTTOMLEFTCORNER_SYM:
			case BOTTOMLEFT_SYM:
			case BOTTOMRIGHTCORNER_SYM:
			case BOTTOMRIGHT_SYM:
			case CHARSET_SYM:
			case COUNTER_STYLE_SYM:
			case FONT_FACE_SYM:
			case IMPORT_SYM:
			case LEFTBOTTOM_SYM:
			case LEFTMIDDLE_SYM:
			case LEFTTOP_SYM:
			case MEDIA_SYM:
			case MOZ_DOCUMENT_SYM:
			case NAMESPACE_SYM:
			case PAGE_SYM:
			case RIGHTBOTTOM_SYM:
			case RIGHTMIDDLE_SYM:
			case RIGHTTOP_SYM:
			case SASS_AT_ROOT:
			case SASS_CONTENT:
			case SASS_DEBUG:
			case SASS_EACH:
			case SASS_ELSE:
			case SASS_EXTEND:
			case SASS_FOR:
			case SASS_FUNCTION:
			case SASS_IF:
			case SASS_INCLUDE:
			case SASS_MIXIN:
			case SASS_RETURN:
			case SASS_WARN:
			case SASS_WHILE:
			case TOPCENTER_SYM:
			case TOPLEFTCORNER_SYM:
			case TOPLEFT_SYM:
			case TOPRIGHTCORNER_SYM:
			case TOPRIGHT_SYM:
			case WEBKIT_KEYFRAMES_SYM:
				{
				int LA275_21 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt275=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 21, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case SASS_VAR:
				{
				int LA275_22 = input.LA(2);
				if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt275=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 22, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case LESS_AND:
				{
				int LA275_23 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt275=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 23, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case HASH_SYMBOL:
				{
				int LA275_24 = input.LA(2);
				if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt275=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 24, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case AT_SIGN:
				{
				int LA275_25 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt275=1;
				}
				else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 25, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case PERCENTAGE_SYMBOL:
				{
				int LA275_26 = input.LA(2);
				if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=1;
				}
				else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
					alt275=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 275, 26, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case IMPORTANT_SYM:
			case LPAREN:
				{
				alt275=2;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 275, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(275);}

			switch (alt275) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:13: term ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					{
					dbg.location(991,13);
					pushFollow(FOLLOW_term_in_fnAttributeValue6360);
					term();
					state._fsp--;
					if (state.failed) return;dbg.location(991,18);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*
					try { dbg.enterSubRule(274);

					loop274:
					while (true) {
						int alt274=2;
						try { dbg.enterDecision(274, decisionCanBacktrack[274]);

						try {
							isCyclicDecision = true;
							alt274 = dfa274.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(274);}

						switch (alt274) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
							{
							dbg.location(991,71);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
							int alt273=3;
							try { dbg.enterSubRule(273);
							try { dbg.enterDecision(273, decisionCanBacktrack[273]);

							try {
								isCyclicDecision = true;
								alt273 = dfa273.predict(input);
							}
							catch (NoViableAltException nvae) {
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(273);}

							switch (alt273) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:73: ws
									{
									dbg.location(991,73);
									pushFollow(FOLLOW_ws_in_fnAttributeValue6392);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:78: ( ( ws )? SOLIDUS ( ws )? )
									{
									dbg.location(991,78);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:78: ( ( ws )? SOLIDUS ( ws )? )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:79: ( ws )? SOLIDUS ( ws )?
									{
									dbg.location(991,79);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:79: ( ws )?
									int alt271=2;
									try { dbg.enterSubRule(271);
									try { dbg.enterDecision(271, decisionCanBacktrack[271]);

									int LA271_0 = input.LA(1);
									if ( (LA271_0==COMMENT||LA271_0==NL||LA271_0==WS) ) {
										alt271=1;
									}
									} finally {dbg.exitDecision(271);}

									switch (alt271) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:79: ws
											{
											dbg.location(991,79);
											pushFollow(FOLLOW_ws_in_fnAttributeValue6397);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(271);}
									dbg.location(991,83);
									match(input,SOLIDUS,FOLLOW_SOLIDUS_in_fnAttributeValue6400); if (state.failed) return;dbg.location(991,91);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:91: ( ws )?
									int alt272=2;
									try { dbg.enterSubRule(272);
									try { dbg.enterDecision(272, decisionCanBacktrack[272]);

									int LA272_0 = input.LA(1);
									if ( (LA272_0==COMMENT||LA272_0==NL||LA272_0==WS) ) {
										alt272=1;
									}
									} finally {dbg.exitDecision(272);}

									switch (alt272) {
										case 1 :
											dbg.enterAlt(1);

											// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:91: ws
											{
											dbg.location(991,91);
											pushFollow(FOLLOW_ws_in_fnAttributeValue6402);
											ws();
											state._fsp--;
											if (state.failed) return;
											}
											break;

									}
									} finally {dbg.exitSubRule(272);}

									}

									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:111: 
									{
									}
									break;

							}
							} finally {dbg.exitSubRule(273);}
							dbg.location(991,113);
							pushFollow(FOLLOW_term_in_fnAttributeValue6411);
							term();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop274;
						}
					}
					} finally {dbg.exitSubRule(274);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:992:15: {...}? cp_math_expression
					{
					dbg.location(992,15);
					if ( !(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "fnAttributeValue", "isCssPreprocessorSource()");
					}dbg.location(992,44);
					pushFollow(FOLLOW_cp_math_expression_in_fnAttributeValue6432);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(993, 1);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "fnAttributeValue");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "fnAttributeValue"



	// $ANTLR start "hexColor"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:995:1: hexColor : HASH ;
	public final void hexColor() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "hexColor");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(995, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:996:5: ( HASH )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:996:7: HASH
			{
			dbg.location(996,7);
			match(input,HASH,FOLLOW_HASH_in_hexColor6446); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(997, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "hexColor");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "hexColor"



	// $ANTLR start "ws"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:999:1: ws : ( WS | NL | COMMENT )+ ;
	public final void ws() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "ws");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(999, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1000:5: ( ( WS | NL | COMMENT )+ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1000:7: ( WS | NL | COMMENT )+
			{
			dbg.location(1000,7);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1000:7: ( WS | NL | COMMENT )+
			int cnt276=0;
			try { dbg.enterSubRule(276);

			loop276:
			while (true) {
				int alt276=2;
				try { dbg.enterDecision(276, decisionCanBacktrack[276]);

				int LA276_0 = input.LA(1);
				if ( (LA276_0==COMMENT||LA276_0==NL||LA276_0==WS) ) {
					alt276=1;
				}

				} finally {dbg.exitDecision(276);}

				switch (alt276) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
					{
					dbg.location(1000,7);
					if ( input.LA(1)==COMMENT||input.LA(1)==NL||input.LA(1)==WS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

				default :
					if ( cnt276 >= 1 ) break loop276;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(276, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt276++;
			}
			} finally {dbg.exitSubRule(276);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1001, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "ws");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "ws"



	// $ANTLR start "cp_variable_declaration"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1006:1: cp_variable_declaration : ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* );
	public final void cp_variable_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1006, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1007:5: ({...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list |{...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )* )
			int alt284=2;
			try { dbg.enterDecision(284, decisionCanBacktrack[284]);

			int LA284_0 = input.LA(1);
			if ( (LA284_0==AT_IDENT||(LA284_0 >= BOTTOMCENTER_SYM && LA284_0 <= BOTTOMRIGHT_SYM)||LA284_0==CHARSET_SYM||LA284_0==COUNTER_STYLE_SYM||LA284_0==FONT_FACE_SYM||LA284_0==IMPORT_SYM||(LA284_0 >= LEFTBOTTOM_SYM && LA284_0 <= LEFTTOP_SYM)||LA284_0==MEDIA_SYM||LA284_0==MOZ_DOCUMENT_SYM||LA284_0==NAMESPACE_SYM||LA284_0==PAGE_SYM||(LA284_0 >= RIGHTBOTTOM_SYM && LA284_0 <= RIGHTTOP_SYM)||(LA284_0 >= SASS_AT_ROOT && LA284_0 <= SASS_DEBUG)||(LA284_0 >= SASS_EACH && LA284_0 <= SASS_ELSE)||LA284_0==SASS_EXTEND||(LA284_0 >= SASS_FOR && LA284_0 <= SASS_FUNCTION)||(LA284_0 >= SASS_IF && LA284_0 <= SASS_MIXIN)||LA284_0==SASS_RETURN||(LA284_0 >= SASS_WARN && LA284_0 <= SASS_WHILE)||(LA284_0 >= TOPCENTER_SYM && LA284_0 <= TOPRIGHT_SYM)||LA284_0==WEBKIT_KEYFRAMES_SYM) ) {
				int LA284_1 = input.LA(2);
				if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
					alt284=1;
				}
				else if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt284=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 284, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}
			else if ( (LA284_0==SASS_VAR) ) {
				int LA284_2 = input.LA(2);
				if ( ((evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt284=1;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt284=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 284, 2, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 284, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(284);}

			switch (alt284) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1008:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list
					{
					dbg.location(1008,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isLessSource()");
					}dbg.location(1008,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration6506);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1008,39);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1008:39: ( ws )?
					int alt277=2;
					try { dbg.enterSubRule(277);
					try { dbg.enterDecision(277, decisionCanBacktrack[277]);

					int LA277_0 = input.LA(1);
					if ( (LA277_0==COMMENT||LA277_0==NL||LA277_0==WS) ) {
						alt277=1;
					}
					} finally {dbg.exitDecision(277);}

					switch (alt277) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1008:39: ws
							{
							dbg.location(1008,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration6508);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(277);}
					dbg.location(1008,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration6511); if (state.failed) return;dbg.location(1008,49);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1008:49: ( ws )?
					int alt278=2;
					try { dbg.enterSubRule(278);
					try { dbg.enterDecision(278, decisionCanBacktrack[278]);

					int LA278_0 = input.LA(1);
					if ( (LA278_0==COMMENT||LA278_0==NL||LA278_0==WS) ) {
						alt278=1;
					}
					} finally {dbg.exitDecision(278);}

					switch (alt278) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1008:49: ws
							{
							dbg.location(1008,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration6513);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(278);}
					dbg.location(1008,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration6516);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:9: {...}? cp_variable ( ws )? COLON ( ws )? cp_expression_list ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					{
					dbg.location(1010,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable_declaration", "isScssSource()");
					}dbg.location(1010,27);
					pushFollow(FOLLOW_cp_variable_in_cp_variable_declaration6538);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1010,39);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:39: ( ws )?
					int alt279=2;
					try { dbg.enterSubRule(279);
					try { dbg.enterDecision(279, decisionCanBacktrack[279]);

					int LA279_0 = input.LA(1);
					if ( (LA279_0==COMMENT||LA279_0==NL||LA279_0==WS) ) {
						alt279=1;
					}
					} finally {dbg.exitDecision(279);}

					switch (alt279) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:39: ws
							{
							dbg.location(1010,39);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration6540);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(279);}
					dbg.location(1010,43);
					match(input,COLON,FOLLOW_COLON_in_cp_variable_declaration6543); if (state.failed) return;dbg.location(1010,49);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:49: ( ws )?
					int alt280=2;
					try { dbg.enterSubRule(280);
					try { dbg.enterDecision(280, decisionCanBacktrack[280]);

					int LA280_0 = input.LA(1);
					if ( (LA280_0==COMMENT||LA280_0==NL||LA280_0==WS) ) {
						alt280=1;
					}
					} finally {dbg.exitDecision(280);}

					switch (alt280) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:49: ws
							{
							dbg.location(1010,49);
							pushFollow(FOLLOW_ws_in_cp_variable_declaration6545);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(280);}
					dbg.location(1010,53);
					pushFollow(FOLLOW_cp_expression_list_in_cp_variable_declaration6548);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1010,72);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*
					try { dbg.enterSubRule(283);

					loop283:
					while (true) {
						int alt283=3;
						try { dbg.enterDecision(283, decisionCanBacktrack[283]);

						try {
							isCyclicDecision = true;
							alt283 = dfa283.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(283);}

						switch (alt283) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:73: ( ( ws )? SASS_DEFAULT )
							{
							dbg.location(1010,73);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:73: ( ( ws )? SASS_DEFAULT )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:74: ( ws )? SASS_DEFAULT
							{
							dbg.location(1010,74);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:74: ( ws )?
							int alt281=2;
							try { dbg.enterSubRule(281);
							try { dbg.enterDecision(281, decisionCanBacktrack[281]);

							int LA281_0 = input.LA(1);
							if ( (LA281_0==COMMENT||LA281_0==NL||LA281_0==WS) ) {
								alt281=1;
							}
							} finally {dbg.exitDecision(281);}

							switch (alt281) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:74: ws
									{
									dbg.location(1010,74);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration6552);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(281);}
							dbg.location(1010,78);
							match(input,SASS_DEFAULT,FOLLOW_SASS_DEFAULT_in_cp_variable_declaration6555); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:94: ( ( ws )? SASS_GLOBAL )
							{
							dbg.location(1010,94);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:94: ( ( ws )? SASS_GLOBAL )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:95: ( ws )? SASS_GLOBAL
							{
							dbg.location(1010,95);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:95: ( ws )?
							int alt282=2;
							try { dbg.enterSubRule(282);
							try { dbg.enterDecision(282, decisionCanBacktrack[282]);

							int LA282_0 = input.LA(1);
							if ( (LA282_0==COMMENT||LA282_0==NL||LA282_0==WS) ) {
								alt282=1;
							}
							} finally {dbg.exitDecision(282);}

							switch (alt282) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1010:95: ws
									{
									dbg.location(1010,95);
									pushFollow(FOLLOW_ws_in_cp_variable_declaration6561);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(282);}
							dbg.location(1010,99);
							match(input,SASS_GLOBAL,FOLLOW_SASS_GLOBAL_in_cp_variable_declaration6564); if (state.failed) return;
							}

							}
							break;

						default :
							break loop283;
						}
					}
					} finally {dbg.exitSubRule(283);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1011, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable_declaration"



	// $ANTLR start "cp_variable"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1014:1: cp_variable : ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT ) |{...}? ( SASS_VAR ) );
	public final void cp_variable() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_variable");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1014, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1015:5: ({...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT ) |{...}? ( SASS_VAR ) )
			int alt285=2;
			try { dbg.enterDecision(285, decisionCanBacktrack[285]);

			int LA285_0 = input.LA(1);
			if ( (LA285_0==AT_IDENT||(LA285_0 >= BOTTOMCENTER_SYM && LA285_0 <= BOTTOMRIGHT_SYM)||LA285_0==CHARSET_SYM||LA285_0==COUNTER_STYLE_SYM||LA285_0==FONT_FACE_SYM||LA285_0==IMPORT_SYM||(LA285_0 >= LEFTBOTTOM_SYM && LA285_0 <= LEFTTOP_SYM)||LA285_0==MEDIA_SYM||LA285_0==MOZ_DOCUMENT_SYM||LA285_0==NAMESPACE_SYM||LA285_0==PAGE_SYM||(LA285_0 >= RIGHTBOTTOM_SYM && LA285_0 <= RIGHTTOP_SYM)||(LA285_0 >= SASS_AT_ROOT && LA285_0 <= SASS_DEBUG)||(LA285_0 >= SASS_EACH && LA285_0 <= SASS_ELSE)||LA285_0==SASS_EXTEND||(LA285_0 >= SASS_FOR && LA285_0 <= SASS_FUNCTION)||(LA285_0 >= SASS_IF && LA285_0 <= SASS_MIXIN)||LA285_0==SASS_RETURN||(LA285_0 >= SASS_WARN && LA285_0 <= SASS_WHILE)||(LA285_0 >= TOPCENTER_SYM && LA285_0 <= TOPRIGHT_SYM)||LA285_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt285=1;
			}
			else if ( (LA285_0==SASS_VAR) ) {
				alt285=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 285, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(285);}

			switch (alt285) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1017:9: {...}? ( AT_IDENT | IMPORT_SYM | PAGE_SYM | MEDIA_SYM | NAMESPACE_SYM | CHARSET_SYM | COUNTER_STYLE_SYM | FONT_FACE_SYM | TOPLEFTCORNER_SYM | TOPLEFT_SYM | TOPCENTER_SYM | TOPRIGHT_SYM | TOPRIGHTCORNER_SYM | BOTTOMLEFTCORNER_SYM | BOTTOMLEFT_SYM | BOTTOMCENTER_SYM | BOTTOMRIGHT_SYM | BOTTOMRIGHTCORNER_SYM | LEFTTOP_SYM | LEFTMIDDLE_SYM | LEFTBOTTOM_SYM | RIGHTTOP_SYM | RIGHTMIDDLE_SYM | RIGHTBOTTOM_SYM | MOZ_DOCUMENT_SYM | WEBKIT_KEYFRAMES_SYM | SASS_CONTENT | SASS_MIXIN | SASS_INCLUDE | SASS_EXTEND | SASS_DEBUG | SASS_WARN | SASS_IF | SASS_ELSE | SASS_FOR | SASS_FUNCTION | SASS_RETURN | SASS_EACH | SASS_WHILE | SASS_AT_ROOT )
					{
					dbg.location(1017,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isLessSource()");
					}dbg.location(1017,27);
					if ( input.LA(1)==AT_IDENT||(input.LA(1) >= BOTTOMCENTER_SYM && input.LA(1) <= BOTTOMRIGHT_SYM)||input.LA(1)==CHARSET_SYM||input.LA(1)==COUNTER_STYLE_SYM||input.LA(1)==FONT_FACE_SYM||input.LA(1)==IMPORT_SYM||(input.LA(1) >= LEFTBOTTOM_SYM && input.LA(1) <= LEFTTOP_SYM)||input.LA(1)==MEDIA_SYM||input.LA(1)==MOZ_DOCUMENT_SYM||input.LA(1)==NAMESPACE_SYM||input.LA(1)==PAGE_SYM||(input.LA(1) >= RIGHTBOTTOM_SYM && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= SASS_AT_ROOT && input.LA(1) <= SASS_DEBUG)||(input.LA(1) >= SASS_EACH && input.LA(1) <= SASS_ELSE)||input.LA(1)==SASS_EXTEND||(input.LA(1) >= SASS_FOR && input.LA(1) <= SASS_FUNCTION)||(input.LA(1) >= SASS_IF && input.LA(1) <= SASS_MIXIN)||input.LA(1)==SASS_RETURN||(input.LA(1) >= SASS_WARN && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= TOPCENTER_SYM && input.LA(1) <= TOPRIGHT_SYM)||input.LA(1)==WEBKIT_KEYFRAMES_SYM ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1019:9: {...}? ( SASS_VAR )
					{
					dbg.location(1019,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_variable", "isScssSource()");
					}dbg.location(1019,27);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1019:27: ( SASS_VAR )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1019:29: SASS_VAR
					{
					dbg.location(1019,29);
					match(input,SASS_VAR,FOLLOW_SASS_VAR_in_cp_variable6788); if (state.failed) return;
					}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1020, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_variable");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_variable"



	// $ANTLR start "cp_expression_list"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1023:1: cp_expression_list : ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* ;
	public final void cp_expression_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1023, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1024:5: ( ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1025:5: ( cp_expression )=> cp_expression ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			{
			dbg.location(1025,24);
			pushFollow(FOLLOW_cp_expression_in_cp_expression_list6818);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1026,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*
			try { dbg.enterSubRule(288);

			loop288:
			while (true) {
				int alt288=2;
				try { dbg.enterDecision(288, decisionCanBacktrack[288]);

				try {
					isCyclicDecision = true;
					alt288 = dfa288.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(288);}

				switch (alt288) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:6: ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression
					{
					dbg.location(1026,37);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:37: ( ws )?
					int alt286=2;
					try { dbg.enterSubRule(286);
					try { dbg.enterDecision(286, decisionCanBacktrack[286]);

					int LA286_0 = input.LA(1);
					if ( (LA286_0==COMMENT||LA286_0==NL||LA286_0==WS) ) {
						alt286=1;
					}
					} finally {dbg.exitDecision(286);}

					switch (alt286) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:37: ws
							{
							dbg.location(1026,37);
							pushFollow(FOLLOW_ws_in_cp_expression_list6837);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(286);}
					dbg.location(1026,41);
					match(input,COMMA,FOLLOW_COMMA_in_cp_expression_list6840); if (state.failed) return;dbg.location(1026,47);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:47: ( ws )?
					int alt287=2;
					try { dbg.enterSubRule(287);
					try { dbg.enterDecision(287, decisionCanBacktrack[287]);

					int LA287_0 = input.LA(1);
					if ( (LA287_0==COMMENT||LA287_0==NL||LA287_0==WS) ) {
						alt287=1;
					}
					} finally {dbg.exitDecision(287);}

					switch (alt287) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:47: ws
							{
							dbg.location(1026,47);
							pushFollow(FOLLOW_ws_in_cp_expression_list6842);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(287);}
					dbg.location(1026,51);
					pushFollow(FOLLOW_cp_expression_in_cp_expression_list6845);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop288;
				}
			}
			} finally {dbg.exitSubRule(288);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1027, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_list"



	// $ANTLR start "cp_expression"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1039:1: cp_expression : ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN );
	public final void cp_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1039, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1040:5: ({...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ) | ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* ) |{...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN )
			int alt297=3;
			try { dbg.enterDecision(297, decisionCanBacktrack[297]);

			int LA297_0 = input.LA(1);
			if ( (LA297_0==LBRACE) ) {
				alt297=1;
			}
			else if ( (LA297_0==NOT) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==MINUS||LA297_0==PLUS) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==IDENT) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==VARIABLE) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==NUMBER) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==PERCENTAGE) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==LENGTH) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==EMS) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==REM) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==EXS) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==ANGLE) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==TIME) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==FREQ) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==RESOLUTION) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==DIMENSION) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==STRING) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==TILDE) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==LESS_JS_STRING) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==GEN) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==URI) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==HASH) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==AT_IDENT||(LA297_0 >= BOTTOMCENTER_SYM && LA297_0 <= BOTTOMRIGHT_SYM)||LA297_0==CHARSET_SYM||LA297_0==COUNTER_STYLE_SYM||LA297_0==FONT_FACE_SYM||LA297_0==IMPORT_SYM||(LA297_0 >= LEFTBOTTOM_SYM && LA297_0 <= LEFTTOP_SYM)||LA297_0==MEDIA_SYM||LA297_0==MOZ_DOCUMENT_SYM||LA297_0==NAMESPACE_SYM||LA297_0==PAGE_SYM||(LA297_0 >= RIGHTBOTTOM_SYM && LA297_0 <= RIGHTTOP_SYM)||(LA297_0 >= SASS_AT_ROOT && LA297_0 <= SASS_DEBUG)||(LA297_0 >= SASS_EACH && LA297_0 <= SASS_ELSE)||LA297_0==SASS_EXTEND||(LA297_0 >= SASS_FOR && LA297_0 <= SASS_FUNCTION)||(LA297_0 >= SASS_IF && LA297_0 <= SASS_MIXIN)||LA297_0==SASS_RETURN||(LA297_0 >= SASS_WARN && LA297_0 <= SASS_WHILE)||(LA297_0 >= TOPCENTER_SYM && LA297_0 <= TOPRIGHT_SYM)||LA297_0==WEBKIT_KEYFRAMES_SYM) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==SASS_VAR) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==LESS_AND) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==HASH_SYMBOL) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==AT_SIGN) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==PERCENTAGE_SYMBOL) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==IMPORTANT_SYM) && (synpred43_Css3())) {
				alt297=2;
			}
			else if ( (LA297_0==LPAREN) ) {
				int LA297_30 = input.LA(2);
				if ( (synpred43_Css3()) ) {
					alt297=2;
				}
				else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {
					alt297=3;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 297, 30, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 297, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(297);}

			switch (alt297) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:5: {...}? ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					{
					dbg.location(1041,5);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isLessSource()");
					}dbg.location(1041,23);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:23: ( LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:24: LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
					{
					dbg.location(1041,24);
					match(input,LBRACE,FOLLOW_LBRACE_in_cp_expression6881); if (state.failed) return;dbg.location(1041,31);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:31: ( ws )?
					int alt289=2;
					try { dbg.enterSubRule(289);
					try { dbg.enterDecision(289, decisionCanBacktrack[289]);

					int LA289_0 = input.LA(1);
					if ( (LA289_0==COMMENT||LA289_0==NL||LA289_0==WS) ) {
						alt289=1;
					}
					} finally {dbg.exitDecision(289);}

					switch (alt289) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:31: ws
							{
							dbg.location(1041,31);
							pushFollow(FOLLOW_ws_in_cp_expression6883);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(289);}
					dbg.location(1041,35);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression6886);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1041,48);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:48: ( declarations )?
					int alt290=2;
					try { dbg.enterSubRule(290);
					try { dbg.enterDecision(290, decisionCanBacktrack[290]);

					int LA290_0 = input.LA(1);
					if ( ((LA290_0 >= AT_IDENT && LA290_0 <= AT_SIGN)||(LA290_0 >= BOTTOMCENTER_SYM && LA290_0 <= BOTTOMRIGHT_SYM)||(LA290_0 >= CHARSET_SYM && LA290_0 <= COLON)||LA290_0==COUNTER_STYLE_SYM||(LA290_0 >= DCOLON && LA290_0 <= DOT)||LA290_0==FONT_FACE_SYM||(LA290_0 >= GEN && LA290_0 <= GREATER)||(LA290_0 >= HASH && LA290_0 <= HASH_SYMBOL)||LA290_0==IDENT||LA290_0==IMPORT_SYM||(LA290_0 >= LBRACKET && LA290_0 <= LEFTTOP_SYM)||LA290_0==LESS_AND||(LA290_0 >= MEDIA_SYM && LA290_0 <= MOZ_DOCUMENT_SYM)||LA290_0==NAMESPACE_SYM||LA290_0==PAGE_SYM||(LA290_0 >= PIPE && LA290_0 <= PLUS)||(LA290_0 >= RIGHTBOTTOM_SYM && LA290_0 <= RIGHTTOP_SYM)||(LA290_0 >= SASS_AT_ROOT && LA290_0 <= SASS_DEBUG)||(LA290_0 >= SASS_EACH && LA290_0 <= SASS_ELSE)||(LA290_0 >= SASS_ERROR && LA290_0 <= SASS_FUNCTION)||(LA290_0 >= SASS_IF && LA290_0 <= SASS_MIXIN)||(LA290_0 >= SASS_RETURN && LA290_0 <= SEMI)||LA290_0==STAR||LA290_0==SUPPORTS_SYM||LA290_0==TILDE||(LA290_0 >= TOPCENTER_SYM && LA290_0 <= TOPRIGHT_SYM)||LA290_0==VARIABLE||LA290_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt290=1;
					}
					} finally {dbg.exitDecision(290);}

					switch (alt290) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1041:48: declarations
							{
							dbg.location(1041,48);
							pushFollow(FOLLOW_declarations_in_cp_expression6888);
							declarations();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(290);}
					dbg.location(1041,62);
					match(input,RBRACE,FOLLOW_RBRACE_in_cp_expression6891); if (state.failed) return;
					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1042:7: ( cp_expression_atom )=> ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					{
					dbg.location(1042,31);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1042:31: ( cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )* )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1042:32: cp_expression_atom ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					{
					dbg.location(1042,32);
					pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6907);
					cp_expression_atom();
					state._fsp--;
					if (state.failed) return;dbg.location(1043,5);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1043:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*
					try { dbg.enterSubRule(294);

					loop294:
					while (true) {
						int alt294=3;
						try { dbg.enterDecision(294, decisionCanBacktrack[294]);

						try {
							isCyclicDecision = true;
							alt294 = dfa294.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(294);}

						switch (alt294) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:9: ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom
							{
							dbg.location(1044,39);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:39: ( ( ws )? cp_expression_operator ( ws )? )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:40: ( ws )? cp_expression_operator ( ws )?
							{
							dbg.location(1044,40);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:40: ( ws )?
							int alt291=2;
							try { dbg.enterSubRule(291);
							try { dbg.enterDecision(291, decisionCanBacktrack[291]);

							int LA291_0 = input.LA(1);
							if ( (LA291_0==COMMENT||LA291_0==NL||LA291_0==WS) ) {
								alt291=1;
							}
							} finally {dbg.exitDecision(291);}

							switch (alt291) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:40: ws
									{
									dbg.location(1044,40);
									pushFollow(FOLLOW_ws_in_cp_expression6931);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(291);}
							dbg.location(1044,44);
							pushFollow(FOLLOW_cp_expression_operator_in_cp_expression6934);
							cp_expression_operator();
							state._fsp--;
							if (state.failed) return;dbg.location(1044,67);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:67: ( ws )?
							int alt292=2;
							try { dbg.enterSubRule(292);
							try { dbg.enterDecision(292, decisionCanBacktrack[292]);

							int LA292_0 = input.LA(1);
							if ( (LA292_0==COMMENT||LA292_0==NL||LA292_0==WS) ) {
								alt292=1;
							}
							} finally {dbg.exitDecision(292);}

							switch (alt292) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:67: ws
									{
									dbg.location(1044,67);
									pushFollow(FOLLOW_ws_in_cp_expression6936);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(292);}

							}
							dbg.location(1044,72);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6940);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:11: ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom
							{
							dbg.location(1045,37);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:37: ( ws )?
							int alt293=2;
							try { dbg.enterSubRule(293);
							try { dbg.enterDecision(293, decisionCanBacktrack[293]);

							int LA293_0 = input.LA(1);
							if ( (LA293_0==COMMENT||LA293_0==NL||LA293_0==WS) ) {
								alt293=1;
							}
							} finally {dbg.exitDecision(293);}

							switch (alt293) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:37: ws
									{
									dbg.location(1045,37);
									pushFollow(FOLLOW_ws_in_cp_expression6959);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(293);}
							dbg.location(1045,41);
							pushFollow(FOLLOW_cp_expression_atom_in_cp_expression6962);
							cp_expression_atom();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop294;
						}
					}
					} finally {dbg.exitSubRule(294);}

					}

					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1047:7: {...}? LPAREN ( ws )? syncToFollow ( sass_map_pairs )? RPAREN
					{
					dbg.location(1047,7);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_expression", "isScssSource()");
					}dbg.location(1047,25);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression6980); if (state.failed) return;dbg.location(1047,32);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1047:32: ( ws )?
					int alt295=2;
					try { dbg.enterSubRule(295);
					try { dbg.enterDecision(295, decisionCanBacktrack[295]);

					int LA295_0 = input.LA(1);
					if ( (LA295_0==COMMENT||LA295_0==NL||LA295_0==WS) ) {
						alt295=1;
					}
					} finally {dbg.exitDecision(295);}

					switch (alt295) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1047:32: ws
							{
							dbg.location(1047,32);
							pushFollow(FOLLOW_ws_in_cp_expression6982);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(295);}
					dbg.location(1047,36);
					pushFollow(FOLLOW_syncToFollow_in_cp_expression6985);
					syncToFollow();
					state._fsp--;
					if (state.failed) return;dbg.location(1047,49);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1047:49: ( sass_map_pairs )?
					int alt296=2;
					try { dbg.enterSubRule(296);
					try { dbg.enterDecision(296, decisionCanBacktrack[296]);

					int LA296_0 = input.LA(1);
					if ( ((LA296_0 >= AT_IDENT && LA296_0 <= AT_SIGN)||(LA296_0 >= BOTTOMCENTER_SYM && LA296_0 <= BOTTOMRIGHT_SYM)||LA296_0==CHARSET_SYM||LA296_0==COMMA||LA296_0==COUNTER_STYLE_SYM||LA296_0==FONT_FACE_SYM||LA296_0==GEN||LA296_0==HASH_SYMBOL||LA296_0==IDENT||LA296_0==IMPORT_SYM||(LA296_0 >= LEFTBOTTOM_SYM && LA296_0 <= LEFTTOP_SYM)||(LA296_0 >= MEDIA_SYM && LA296_0 <= MOZ_DOCUMENT_SYM)||LA296_0==NAMESPACE_SYM||LA296_0==NUMBER||LA296_0==PAGE_SYM||(LA296_0 >= RIGHTBOTTOM_SYM && LA296_0 <= RIGHTTOP_SYM)||(LA296_0 >= SASS_AT_ROOT && LA296_0 <= SASS_DEBUG)||(LA296_0 >= SASS_EACH && LA296_0 <= SASS_ELSE)||LA296_0==SASS_EXTEND||(LA296_0 >= SASS_FOR && LA296_0 <= SASS_FUNCTION)||(LA296_0 >= SASS_IF && LA296_0 <= SASS_MIXIN)||(LA296_0 >= SASS_RETURN && LA296_0 <= SASS_WHILE)||LA296_0==STRING||(LA296_0 >= TOPCENTER_SYM && LA296_0 <= TOPRIGHT_SYM)||LA296_0==VARIABLE||LA296_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt296=1;
					}
					} finally {dbg.exitDecision(296);}

					switch (alt296) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1047:49: sass_map_pairs
							{
							dbg.location(1047,49);
							pushFollow(FOLLOW_sass_map_pairs_in_cp_expression6987);
							sass_map_pairs();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(296);}
					dbg.location(1047,65);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression6990); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1048, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression"



	// $ANTLR start "cp_expression_operator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1050:1: cp_expression_operator : ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ );
	public final void cp_expression_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1050, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1051:5: ( key_or | key_and | CP_EQ | CP_NOT_EQ | LESS | LESS_OR_EQ | GREATER | GREATER_OR_EQ )
			int alt298=8;
			try { dbg.enterDecision(298, decisionCanBacktrack[298]);

			switch ( input.LA(1) ) {
			case IDENT:
				{
				int LA298_1 = input.LA(2);
				if ( (evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
					alt298=1;
				}
				else if ( (evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
					alt298=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					int nvaeMark = input.mark();
					try {
						input.consume();
						NoViableAltException nvae =
							new NoViableAltException("", 298, 1, input);
						dbg.recognitionException(nvae);
						throw nvae;
					} finally {
						input.rewind(nvaeMark);
					}
				}

				}
				break;
			case CP_EQ:
				{
				alt298=3;
				}
				break;
			case CP_NOT_EQ:
				{
				alt298=4;
				}
				break;
			case LESS:
				{
				alt298=5;
				}
				break;
			case LESS_OR_EQ:
				{
				alt298=6;
				}
				break;
			case GREATER:
				{
				alt298=7;
				}
				break;
			case GREATER_OR_EQ:
				{
				alt298=8;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 298, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(298);}

			switch (alt298) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:5: key_or
					{
					dbg.location(1052,5);
					pushFollow(FOLLOW_key_or_in_cp_expression_operator7011);
					key_or();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:14: key_and
					{
					dbg.location(1052,14);
					pushFollow(FOLLOW_key_and_in_cp_expression_operator7015);
					key_and();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:25: CP_EQ
					{
					dbg.location(1052,25);
					match(input,CP_EQ,FOLLOW_CP_EQ_in_cp_expression_operator7020); if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:33: CP_NOT_EQ
					{
					dbg.location(1052,33);
					match(input,CP_NOT_EQ,FOLLOW_CP_NOT_EQ_in_cp_expression_operator7024); if (state.failed) return;
					}
					break;
				case 5 :
					dbg.enterAlt(5);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:45: LESS
					{
					dbg.location(1052,45);
					match(input,LESS,FOLLOW_LESS_in_cp_expression_operator7028); if (state.failed) return;
					}
					break;
				case 6 :
					dbg.enterAlt(6);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:52: LESS_OR_EQ
					{
					dbg.location(1052,52);
					match(input,LESS_OR_EQ,FOLLOW_LESS_OR_EQ_in_cp_expression_operator7032); if (state.failed) return;
					}
					break;
				case 7 :
					dbg.enterAlt(7);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:65: GREATER
					{
					dbg.location(1052,65);
					match(input,GREATER,FOLLOW_GREATER_in_cp_expression_operator7036); if (state.failed) return;
					}
					break;
				case 8 :
					dbg.enterAlt(8);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1052:75: GREATER_OR_EQ
					{
					dbg.location(1052,75);
					match(input,GREATER_OR_EQ,FOLLOW_GREATER_OR_EQ_in_cp_expression_operator7040); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1053, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_operator"



	// $ANTLR start "cp_expression_atom"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1055:1: cp_expression_atom : ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) ;
	public final void cp_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1055, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1056:5: ( ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1057:9: ( NOT ( ws )? )? ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			{
			dbg.location(1057,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1057:9: ( NOT ( ws )? )?
			int alt300=2;
			try { dbg.enterSubRule(300);
			try { dbg.enterDecision(300, decisionCanBacktrack[300]);

			int LA300_0 = input.LA(1);
			if ( (LA300_0==NOT) ) {
				alt300=1;
			}
			} finally {dbg.exitDecision(300);}

			switch (alt300) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1057:10: NOT ( ws )?
					{
					dbg.location(1057,10);
					match(input,NOT,FOLLOW_NOT_in_cp_expression_atom7066); if (state.failed) return;dbg.location(1057,14);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1057:14: ( ws )?
					int alt299=2;
					try { dbg.enterSubRule(299);
					try { dbg.enterDecision(299, decisionCanBacktrack[299]);

					int LA299_0 = input.LA(1);
					if ( (LA299_0==COMMENT||LA299_0==NL||LA299_0==WS) ) {
						alt299=1;
					}
					} finally {dbg.exitDecision(299);}

					switch (alt299) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1057:14: ws
							{
							dbg.location(1057,14);
							pushFollow(FOLLOW_ws_in_cp_expression_atom7068);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(299);}

					}
					break;

			}
			} finally {dbg.exitSubRule(300);}
			dbg.location(1058,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1058:9: ( ( cp_math_expression )=> cp_math_expression | LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN )
			int alt304=2;
			try { dbg.enterSubRule(304);
			try { dbg.enterDecision(304, decisionCanBacktrack[304]);

			int LA304_0 = input.LA(1);
			if ( (LA304_0==MINUS||LA304_0==PLUS) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==IDENT) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==VARIABLE) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==NUMBER) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==PERCENTAGE) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==LENGTH) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==EMS) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==REM) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==EXS) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==ANGLE) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==TIME) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==FREQ) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==RESOLUTION) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==DIMENSION) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==STRING) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==TILDE) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==LESS_JS_STRING) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==GEN) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==URI) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==HASH) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==AT_IDENT||(LA304_0 >= BOTTOMCENTER_SYM && LA304_0 <= BOTTOMRIGHT_SYM)||LA304_0==CHARSET_SYM||LA304_0==COUNTER_STYLE_SYM||LA304_0==FONT_FACE_SYM||LA304_0==IMPORT_SYM||(LA304_0 >= LEFTBOTTOM_SYM && LA304_0 <= LEFTTOP_SYM)||LA304_0==MEDIA_SYM||LA304_0==MOZ_DOCUMENT_SYM||LA304_0==NAMESPACE_SYM||LA304_0==PAGE_SYM||(LA304_0 >= RIGHTBOTTOM_SYM && LA304_0 <= RIGHTTOP_SYM)||(LA304_0 >= SASS_AT_ROOT && LA304_0 <= SASS_DEBUG)||(LA304_0 >= SASS_EACH && LA304_0 <= SASS_ELSE)||LA304_0==SASS_EXTEND||(LA304_0 >= SASS_FOR && LA304_0 <= SASS_FUNCTION)||(LA304_0 >= SASS_IF && LA304_0 <= SASS_MIXIN)||LA304_0==SASS_RETURN||(LA304_0 >= SASS_WARN && LA304_0 <= SASS_WHILE)||(LA304_0 >= TOPCENTER_SYM && LA304_0 <= TOPRIGHT_SYM)||LA304_0==WEBKIT_KEYFRAMES_SYM) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==SASS_VAR) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==LESS_AND) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==HASH_SYMBOL) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==AT_SIGN) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==PERCENTAGE_SYMBOL) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==IMPORTANT_SYM) && (synpred46_Css3())) {
				alt304=1;
			}
			else if ( (LA304_0==LPAREN) ) {
				int LA304_28 = input.LA(2);
				if ( (synpred46_Css3()) ) {
					alt304=1;
				}
				else if ( (true) ) {
					alt304=2;
				}

			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 304, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(304);}

			switch (alt304) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1059:13: ( cp_math_expression )=> cp_math_expression
					{
					dbg.location(1059,35);
					pushFollow(FOLLOW_cp_math_expression_in_cp_expression_atom7099);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:15: LPAREN ( ws )? ( cp_expression_list ( ws )? )? RPAREN
					{
					dbg.location(1060,15);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_expression_atom7115); if (state.failed) return;dbg.location(1060,22);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:22: ( ws )?
					int alt301=2;
					try { dbg.enterSubRule(301);
					try { dbg.enterDecision(301, decisionCanBacktrack[301]);

					int LA301_0 = input.LA(1);
					if ( (LA301_0==COMMENT||LA301_0==NL||LA301_0==WS) ) {
						alt301=1;
					}
					} finally {dbg.exitDecision(301);}

					switch (alt301) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:22: ws
							{
							dbg.location(1060,22);
							pushFollow(FOLLOW_ws_in_cp_expression_atom7117);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(301);}
					dbg.location(1060,26);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:26: ( cp_expression_list ( ws )? )?
					int alt303=2;
					try { dbg.enterSubRule(303);
					try { dbg.enterDecision(303, decisionCanBacktrack[303]);

					int LA303_0 = input.LA(1);
					if ( ((LA303_0 >= ANGLE && LA303_0 <= AT_SIGN)||(LA303_0 >= BOTTOMCENTER_SYM && LA303_0 <= BOTTOMRIGHT_SYM)||LA303_0==CHARSET_SYM||LA303_0==COUNTER_STYLE_SYM||LA303_0==DIMENSION||LA303_0==EMS||LA303_0==EXS||(LA303_0 >= FONT_FACE_SYM && LA303_0 <= FREQ)||LA303_0==GEN||(LA303_0 >= HASH && LA303_0 <= HASH_SYMBOL)||(LA303_0 >= IDENT && LA303_0 <= IMPORT_SYM)||LA303_0==LBRACE||(LA303_0 >= LEFTBOTTOM_SYM && LA303_0 <= LENGTH)||(LA303_0 >= LESS_AND && LA303_0 <= LESS_JS_STRING)||LA303_0==LPAREN||(LA303_0 >= MEDIA_SYM && LA303_0 <= MOZ_DOCUMENT_SYM)||LA303_0==NAMESPACE_SYM||(LA303_0 >= NOT && LA303_0 <= NUMBER)||(LA303_0 >= PAGE_SYM && LA303_0 <= PERCENTAGE_SYMBOL)||LA303_0==PLUS||(LA303_0 >= REM && LA303_0 <= RIGHTTOP_SYM)||(LA303_0 >= SASS_AT_ROOT && LA303_0 <= SASS_DEBUG)||(LA303_0 >= SASS_EACH && LA303_0 <= SASS_ELSE)||LA303_0==SASS_EXTEND||(LA303_0 >= SASS_FOR && LA303_0 <= SASS_FUNCTION)||(LA303_0 >= SASS_IF && LA303_0 <= SASS_MIXIN)||(LA303_0 >= SASS_RETURN && LA303_0 <= SASS_WHILE)||LA303_0==STRING||(LA303_0 >= TILDE && LA303_0 <= TOPRIGHT_SYM)||LA303_0==URI||LA303_0==VARIABLE||LA303_0==WEBKIT_KEYFRAMES_SYM) ) {
						alt303=1;
					}
					} finally {dbg.exitDecision(303);}

					switch (alt303) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:27: cp_expression_list ( ws )?
							{
							dbg.location(1060,27);
							pushFollow(FOLLOW_cp_expression_list_in_cp_expression_atom7121);
							cp_expression_list();
							state._fsp--;
							if (state.failed) return;dbg.location(1060,46);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:46: ( ws )?
							int alt302=2;
							try { dbg.enterSubRule(302);
							try { dbg.enterDecision(302, decisionCanBacktrack[302]);

							int LA302_0 = input.LA(1);
							if ( (LA302_0==COMMENT||LA302_0==NL||LA302_0==WS) ) {
								alt302=1;
							}
							} finally {dbg.exitDecision(302);}

							switch (alt302) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1060:46: ws
									{
									dbg.location(1060,46);
									pushFollow(FOLLOW_ws_in_cp_expression_atom7123);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(302);}

							}
							break;

					}
					} finally {dbg.exitSubRule(303);}
					dbg.location(1060,52);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_expression_atom7128); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(304);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1062, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_expression_atom"



	// $ANTLR start "cp_math_expressions"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1065:1: cp_math_expressions : cp_math_expression ( ws cp_math_expression )* ;
	public final void cp_math_expressions() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expressions");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1065, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1066:5: ( cp_math_expression ( ws cp_math_expression )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1067:5: cp_math_expression ( ws cp_math_expression )*
			{
			dbg.location(1067,5);
			pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions7160);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1068,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1068:5: ( ws cp_math_expression )*
			try { dbg.enterSubRule(305);

			loop305:
			while (true) {
				int alt305=2;
				try { dbg.enterDecision(305, decisionCanBacktrack[305]);

				int LA305_0 = input.LA(1);
				if ( (LA305_0==COMMENT||LA305_0==NL||LA305_0==WS) ) {
					alt305=1;
				}

				} finally {dbg.exitDecision(305);}

				switch (alt305) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1068:6: ws cp_math_expression
					{
					dbg.location(1068,6);
					pushFollow(FOLLOW_ws_in_cp_math_expressions7167);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1068,9);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expressions7169);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop305;
				}
			}
			} finally {dbg.exitSubRule(305);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1069, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expressions");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expressions"



	// $ANTLR start "cp_math_expression"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1083:1: cp_math_expression : cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* ;
	public final void cp_math_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1083, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1084:5: ( cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1084:10: cp_math_expression_atom ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			{
			dbg.location(1084,10);
			pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression7203);
			cp_math_expression_atom();
			state._fsp--;
			if (state.failed) return;dbg.location(1085,10);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1085:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*
			try { dbg.enterSubRule(308);

			loop308:
			while (true) {
				int alt308=2;
				try { dbg.enterDecision(308, decisionCanBacktrack[308]);

				try {
					isCyclicDecision = true;
					alt308 = dfa308.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(308);}

				switch (alt308) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom
					{
					dbg.location(1086,48);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:48: ( ws )?
					int alt306=2;
					try { dbg.enterSubRule(306);
					try { dbg.enterDecision(306, decisionCanBacktrack[306]);

					int LA306_0 = input.LA(1);
					if ( (LA306_0==COMMENT||LA306_0==NL||LA306_0==WS) ) {
						alt306=1;
					}
					} finally {dbg.exitDecision(306);}

					switch (alt306) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:48: ws
							{
							dbg.location(1086,48);
							pushFollow(FOLLOW_ws_in_cp_math_expression7245);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(306);}
					dbg.location(1086,52);
					if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1086,78);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:78: ( ws )?
					int alt307=2;
					try { dbg.enterSubRule(307);
					try { dbg.enterDecision(307, decisionCanBacktrack[307]);

					int LA307_0 = input.LA(1);
					if ( (LA307_0==COMMENT||LA307_0==NL||LA307_0==WS) ) {
						alt307=1;
					}
					} finally {dbg.exitDecision(307);}

					switch (alt307) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:78: ws
							{
							dbg.location(1086,78);
							pushFollow(FOLLOW_ws_in_cp_math_expression7258);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(307);}
					dbg.location(1086,82);
					pushFollow(FOLLOW_cp_math_expression_atom_in_cp_math_expression7261);
					cp_math_expression_atom();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop308;
				}
			}
			} finally {dbg.exitSubRule(308);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1088, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression"



	// $ANTLR start "cp_math_expression_atom"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1090:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );
	public final void cp_math_expression_atom() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_math_expression_atom");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1090, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1091:5: ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN )
			int alt313=3;
			try { dbg.enterDecision(313, decisionCanBacktrack[313]);

			try {
				isCyclicDecision = true;
				alt313 = dfa313.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(313);}

			switch (alt313) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1092:5: term
					{
					dbg.location(1092,5);
					pushFollow(FOLLOW_term_in_cp_math_expression_atom7294);
					term();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1093:7: IMPORTANT_SYM
					{
					dbg.location(1093,7);
					match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom7302); if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:7: ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN
					{
					dbg.location(1094,7);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:7: ( unaryOperator ( ws )? )?
					int alt310=2;
					try { dbg.enterSubRule(310);
					try { dbg.enterDecision(310, decisionCanBacktrack[310]);

					int LA310_0 = input.LA(1);
					if ( (LA310_0==MINUS||LA310_0==PLUS) ) {
						alt310=1;
					}
					} finally {dbg.exitDecision(310);}

					switch (alt310) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:9: unaryOperator ( ws )?
							{
							dbg.location(1094,9);
							pushFollow(FOLLOW_unaryOperator_in_cp_math_expression_atom7313);
							unaryOperator();
							state._fsp--;
							if (state.failed) return;dbg.location(1094,23);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:23: ( ws )?
							int alt309=2;
							try { dbg.enterSubRule(309);
							try { dbg.enterDecision(309, decisionCanBacktrack[309]);

							int LA309_0 = input.LA(1);
							if ( (LA309_0==COMMENT||LA309_0==NL||LA309_0==WS) ) {
								alt309=1;
							}
							} finally {dbg.exitDecision(309);}

							switch (alt309) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:23: ws
									{
									dbg.location(1094,23);
									pushFollow(FOLLOW_ws_in_cp_math_expression_atom7315);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(309);}

							}
							break;

					}
					} finally {dbg.exitSubRule(310);}
					dbg.location(1094,30);
					match(input,LPAREN,FOLLOW_LPAREN_in_cp_math_expression_atom7321); if (state.failed) return;dbg.location(1094,37);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:37: ( ws )?
					int alt311=2;
					try { dbg.enterSubRule(311);
					try { dbg.enterDecision(311, decisionCanBacktrack[311]);

					int LA311_0 = input.LA(1);
					if ( (LA311_0==COMMENT||LA311_0==NL||LA311_0==WS) ) {
						alt311=1;
					}
					} finally {dbg.exitDecision(311);}

					switch (alt311) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:37: ws
							{
							dbg.location(1094,37);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom7323);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(311);}
					dbg.location(1094,41);
					pushFollow(FOLLOW_cp_math_expression_in_cp_math_expression_atom7326);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1094,60);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:60: ( ws )?
					int alt312=2;
					try { dbg.enterSubRule(312);
					try { dbg.enterDecision(312, decisionCanBacktrack[312]);

					int LA312_0 = input.LA(1);
					if ( (LA312_0==COMMENT||LA312_0==NL||LA312_0==WS) ) {
						alt312=1;
					}
					} finally {dbg.exitDecision(312);}

					switch (alt312) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1094:60: ws
							{
							dbg.location(1094,60);
							pushFollow(FOLLOW_ws_in_cp_math_expression_atom7328);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(312);}
					dbg.location(1094,64);
					match(input,RPAREN,FOLLOW_RPAREN_in_cp_math_expression_atom7331); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1095, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_math_expression_atom");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_math_expression_atom"



	// $ANTLR start "cp_mixin_declaration"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1103:1: cp_mixin_declaration : ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block ;
	public final void cp_mixin_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1103, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1104:5: ( ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1105:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? ) ( ws )? cp_mixin_block
			{
			dbg.location(1105,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1105:5: ({...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )? |{...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )? )
			int alt325=2;
			try { dbg.enterSubRule(325);
			try { dbg.enterDecision(325, decisionCanBacktrack[325]);

			int LA325_0 = input.LA(1);
			if ( (LA325_0==DOT||LA325_0==HASH||LA325_0==LESS_AND) ) {
				alt325=1;
			}
			else if ( (LA325_0==SASS_MIXIN) ) {
				alt325=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 325, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(325);}

			switch (alt325) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:9: {...}? ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) ) ( ( ws )? less_mixin_guarded )?
					{
					dbg.location(1106,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isLessSource()");
					}dbg.location(1106,27);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:27: ( LESS_AND | ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ) )
					int alt318=2;
					try { dbg.enterSubRule(318);
					try { dbg.enterDecision(318, decisionCanBacktrack[318]);

					int LA318_0 = input.LA(1);
					if ( (LA318_0==LESS_AND) ) {
						alt318=1;
					}
					else if ( (LA318_0==DOT||LA318_0==HASH) ) {
						alt318=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 318, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(318);}

					switch (alt318) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:28: LESS_AND
							{
							dbg.location(1106,28);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_declaration7371); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							{
							dbg.location(1106,39);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:39: ( ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:40: ( ( DOT cp_mixin_name ) | HASH ) ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1106,40);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:40: ( ( DOT cp_mixin_name ) | HASH )
							int alt314=2;
							try { dbg.enterSubRule(314);
							try { dbg.enterDecision(314, decisionCanBacktrack[314]);

							int LA314_0 = input.LA(1);
							if ( (LA314_0==DOT) ) {
								alt314=1;
							}
							else if ( (LA314_0==HASH) ) {
								alt314=2;
							}

							else {
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 314, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}

							} finally {dbg.exitDecision(314);}

							switch (alt314) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:41: ( DOT cp_mixin_name )
									{
									dbg.location(1106,41);
									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:41: ( DOT cp_mixin_name )
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:42: DOT cp_mixin_name
									{
									dbg.location(1106,42);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_declaration7378); if (state.failed) return;dbg.location(1106,46);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration7380);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}

									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:63: HASH
									{
									dbg.location(1106,63);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_declaration7385); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(314);}
							dbg.location(1106,69);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:69: ( ws )?
							int alt315=2;
							try { dbg.enterSubRule(315);
							try { dbg.enterDecision(315, decisionCanBacktrack[315]);

							int LA315_0 = input.LA(1);
							if ( (LA315_0==COMMENT||LA315_0==NL||LA315_0==WS) ) {
								alt315=1;
							}
							} finally {dbg.exitDecision(315);}

							switch (alt315) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:69: ws
									{
									dbg.location(1106,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration7388);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(315);}
							dbg.location(1106,73);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration7391); if (state.failed) return;dbg.location(1106,80);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:80: ( ws )?
							int alt316=2;
							try { dbg.enterSubRule(316);
							try { dbg.enterDecision(316, decisionCanBacktrack[316]);

							int LA316_0 = input.LA(1);
							if ( (LA316_0==COMMENT||LA316_0==NL||LA316_0==WS) ) {
								alt316=1;
							}
							} finally {dbg.exitDecision(316);}

							switch (alt316) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:80: ws
									{
									dbg.location(1106,80);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration7393);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(316);}
							dbg.location(1106,84);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:84: ( cp_args_list )?
							int alt317=2;
							try { dbg.enterSubRule(317);
							try { dbg.enterDecision(317, decisionCanBacktrack[317]);

							int LA317_0 = input.LA(1);
							if ( (LA317_0==AT_IDENT||(LA317_0 >= BOTTOMCENTER_SYM && LA317_0 <= BOTTOMRIGHT_SYM)||LA317_0==CHARSET_SYM||(LA317_0 >= COUNTER_STYLE_SYM && LA317_0 <= CP_DOTS)||LA317_0==FONT_FACE_SYM||LA317_0==IDENT||LA317_0==IMPORT_SYM||(LA317_0 >= LEFTBOTTOM_SYM && LA317_0 <= LEFTTOP_SYM)||LA317_0==LESS_REST||LA317_0==MEDIA_SYM||LA317_0==MOZ_DOCUMENT_SYM||LA317_0==NAMESPACE_SYM||LA317_0==PAGE_SYM||(LA317_0 >= RIGHTBOTTOM_SYM && LA317_0 <= RIGHTTOP_SYM)||(LA317_0 >= SASS_AT_ROOT && LA317_0 <= SASS_DEBUG)||(LA317_0 >= SASS_EACH && LA317_0 <= SASS_ELSE)||LA317_0==SASS_EXTEND||(LA317_0 >= SASS_FOR && LA317_0 <= SASS_FUNCTION)||(LA317_0 >= SASS_IF && LA317_0 <= SASS_MIXIN)||(LA317_0 >= SASS_RETURN && LA317_0 <= SASS_WHILE)||(LA317_0 >= TOPCENTER_SYM && LA317_0 <= TOPRIGHT_SYM)||LA317_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt317=1;
							}
							} finally {dbg.exitDecision(317);}

							switch (alt317) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:84: cp_args_list
									{
									dbg.location(1106,84);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration7396);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(317);}
							dbg.location(1106,98);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration7399); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(318);}
					dbg.location(1106,107);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:107: ( ( ws )? less_mixin_guarded )?
					int alt320=2;
					try { dbg.enterSubRule(320);
					try { dbg.enterDecision(320, decisionCanBacktrack[320]);

					try {
						isCyclicDecision = true;
						alt320 = dfa320.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(320);}

					switch (alt320) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:108: ( ws )? less_mixin_guarded
							{
							dbg.location(1106,108);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:108: ( ws )?
							int alt319=2;
							try { dbg.enterSubRule(319);
							try { dbg.enterDecision(319, decisionCanBacktrack[319]);

							int LA319_0 = input.LA(1);
							if ( (LA319_0==COMMENT||LA319_0==NL||LA319_0==WS) ) {
								alt319=1;
							}
							} finally {dbg.exitDecision(319);}

							switch (alt319) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1106:108: ws
									{
									dbg.location(1106,108);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration7404);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(319);}
							dbg.location(1106,112);
							pushFollow(FOLLOW_less_mixin_guarded_in_cp_mixin_declaration7407);
							less_mixin_guarded();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(320);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:9: {...}? SASS_MIXIN ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					{
					dbg.location(1108,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_declaration", "isScssSource()");
					}dbg.location(1108,27);
					match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_cp_mixin_declaration7431); if (state.failed) return;dbg.location(1108,38);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration7433);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1108,41);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_declaration7435);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1108,55);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?
					int alt324=2;
					try { dbg.enterSubRule(324);
					try { dbg.enterDecision(324, decisionCanBacktrack[324]);

					try {
						isCyclicDecision = true;
						alt324 = dfa324.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(324);}

					switch (alt324) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:56: ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN
							{
							dbg.location(1108,56);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:56: ( ws )?
							int alt321=2;
							try { dbg.enterSubRule(321);
							try { dbg.enterDecision(321, decisionCanBacktrack[321]);

							int LA321_0 = input.LA(1);
							if ( (LA321_0==COMMENT||LA321_0==NL||LA321_0==WS) ) {
								alt321=1;
							}
							} finally {dbg.exitDecision(321);}

							switch (alt321) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:56: ws
									{
									dbg.location(1108,56);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration7438);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(321);}
							dbg.location(1108,60);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_declaration7441); if (state.failed) return;dbg.location(1108,67);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:67: ( ws )?
							int alt322=2;
							try { dbg.enterSubRule(322);
							try { dbg.enterDecision(322, decisionCanBacktrack[322]);

							int LA322_0 = input.LA(1);
							if ( (LA322_0==COMMENT||LA322_0==NL||LA322_0==WS) ) {
								alt322=1;
							}
							} finally {dbg.exitDecision(322);}

							switch (alt322) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:67: ws
									{
									dbg.location(1108,67);
									pushFollow(FOLLOW_ws_in_cp_mixin_declaration7443);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(322);}
							dbg.location(1108,71);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:71: ( cp_args_list )?
							int alt323=2;
							try { dbg.enterSubRule(323);
							try { dbg.enterDecision(323, decisionCanBacktrack[323]);

							int LA323_0 = input.LA(1);
							if ( (LA323_0==AT_IDENT||(LA323_0 >= BOTTOMCENTER_SYM && LA323_0 <= BOTTOMRIGHT_SYM)||LA323_0==CHARSET_SYM||(LA323_0 >= COUNTER_STYLE_SYM && LA323_0 <= CP_DOTS)||LA323_0==FONT_FACE_SYM||LA323_0==IDENT||LA323_0==IMPORT_SYM||(LA323_0 >= LEFTBOTTOM_SYM && LA323_0 <= LEFTTOP_SYM)||LA323_0==LESS_REST||LA323_0==MEDIA_SYM||LA323_0==MOZ_DOCUMENT_SYM||LA323_0==NAMESPACE_SYM||LA323_0==PAGE_SYM||(LA323_0 >= RIGHTBOTTOM_SYM && LA323_0 <= RIGHTTOP_SYM)||(LA323_0 >= SASS_AT_ROOT && LA323_0 <= SASS_DEBUG)||(LA323_0 >= SASS_EACH && LA323_0 <= SASS_ELSE)||LA323_0==SASS_EXTEND||(LA323_0 >= SASS_FOR && LA323_0 <= SASS_FUNCTION)||(LA323_0 >= SASS_IF && LA323_0 <= SASS_MIXIN)||(LA323_0 >= SASS_RETURN && LA323_0 <= SASS_WHILE)||(LA323_0 >= TOPCENTER_SYM && LA323_0 <= TOPRIGHT_SYM)||LA323_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt323=1;
							}
							} finally {dbg.exitDecision(323);}

							switch (alt323) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1108:71: cp_args_list
									{
									dbg.location(1108,71);
									pushFollow(FOLLOW_cp_args_list_in_cp_mixin_declaration7446);
									cp_args_list();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(323);}
							dbg.location(1108,85);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_declaration7449); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(324);}

					}
					break;

			}
			} finally {dbg.exitSubRule(325);}
			dbg.location(1110,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1110:5: ( ws )?
			int alt326=2;
			try { dbg.enterSubRule(326);
			try { dbg.enterDecision(326, decisionCanBacktrack[326]);

			int LA326_0 = input.LA(1);
			if ( (LA326_0==COMMENT||LA326_0==NL||LA326_0==WS) ) {
				alt326=1;
			}
			} finally {dbg.exitDecision(326);}

			switch (alt326) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1110:5: ws
					{
					dbg.location(1110,5);
					pushFollow(FOLLOW_ws_in_cp_mixin_declaration7463);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(326);}
			dbg.location(1110,9);
			pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_declaration7466);
			cp_mixin_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1111, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_declaration"



	// $ANTLR start "cp_mixin_call"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1115:1: cp_mixin_call : ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) ;
	public final void cp_mixin_call() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1115, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1116:5: ( ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? ) )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1117:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			{
			dbg.location(1117,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1117:5: ({...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )? |{...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )? )
			int alt342=2;
			try { dbg.enterSubRule(342);
			try { dbg.enterDecision(342, decisionCanBacktrack[342]);

			int LA342_0 = input.LA(1);
			if ( (LA342_0==AT_IDENT||LA342_0==DOT||LA342_0==HASH||LA342_0==LESS_AND) ) {
				alt342=1;
			}
			else if ( (LA342_0==SASS_INCLUDE) ) {
				alt342=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 342, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(342);}

			switch (alt342) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:9: {...}? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )* ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					{
					dbg.location(1118,9);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isLessSource()");
					}dbg.location(1118,27);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:27: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
					int alt327=4;
					try { dbg.enterSubRule(327);
					try { dbg.enterDecision(327, decisionCanBacktrack[327]);

					switch ( input.LA(1) ) {
					case DOT:
						{
						alt327=1;
						}
						break;
					case HASH:
						{
						alt327=2;
						}
						break;
					case AT_IDENT:
						{
						alt327=3;
						}
						break;
					case LESS_AND:
						{
						alt327=4;
						}
						break;
					default:
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 327, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(327);}

					switch (alt327) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:28: DOT cp_mixin_name
							{
							dbg.location(1118,28);
							match(input,DOT,FOLLOW_DOT_in_cp_mixin_call7502); if (state.failed) return;dbg.location(1118,32);
							pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call7504);
							cp_mixin_name();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:48: HASH
							{
							dbg.location(1118,48);
							match(input,HASH,FOLLOW_HASH_in_cp_mixin_call7508); if (state.failed) return;
							}
							break;
						case 3 :
							dbg.enterAlt(3);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:55: AT_IDENT
							{
							dbg.location(1118,55);
							match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call7512); if (state.failed) return;
							}
							break;
						case 4 :
							dbg.enterAlt(4);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:66: LESS_AND
							{
							dbg.location(1118,66);
							match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call7516); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(327);}
					dbg.location(1118,76);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:76: ( ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND ) )*
					try { dbg.enterSubRule(331);

					loop331:
					while (true) {
						int alt331=2;
						try { dbg.enterDecision(331, decisionCanBacktrack[331]);

						int LA331_0 = input.LA(1);
						if ( (LA331_0==COMMENT||LA331_0==NL||LA331_0==WS) ) {
							int LA331_2 = input.LA(2);
							if ( (synpred48_Css3()) ) {
								alt331=1;
							}

						}
						else if ( (LA331_0==GREATER||LA331_0==PLUS||LA331_0==TILDE) ) {
							int LA331_14 = input.LA(2);
							if ( (synpred48_Css3()) ) {
								alt331=1;
							}

						}

						} finally {dbg.exitDecision(331);}

						switch (alt331) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:77: ( ( ws )? combinator ( ws )? )=> ( ws )? combinator ( ws )? ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							{
							dbg.location(1118,101);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:101: ( ws )?
							int alt328=2;
							try { dbg.enterSubRule(328);
							try { dbg.enterDecision(328, decisionCanBacktrack[328]);

							int LA328_0 = input.LA(1);
							if ( (LA328_0==COMMENT||LA328_0==NL||LA328_0==WS) ) {
								alt328=1;
							}
							} finally {dbg.exitDecision(328);}

							switch (alt328) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:101: ws
									{
									dbg.location(1118,101);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7532);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(328);}
							dbg.location(1118,105);
							pushFollow(FOLLOW_combinator_in_cp_mixin_call7535);
							combinator();
							state._fsp--;
							if (state.failed) return;dbg.location(1118,116);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:116: ( ws )?
							int alt329=2;
							try { dbg.enterSubRule(329);
							try { dbg.enterDecision(329, decisionCanBacktrack[329]);

							int LA329_0 = input.LA(1);
							if ( (LA329_0==COMMENT||LA329_0==NL||LA329_0==WS) ) {
								alt329=1;
							}
							} finally {dbg.exitDecision(329);}

							switch (alt329) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:116: ws
									{
									dbg.location(1118,116);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7537);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(329);}
							dbg.location(1118,120);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:120: ( DOT cp_mixin_name | HASH | AT_IDENT | LESS_AND )
							int alt330=4;
							try { dbg.enterSubRule(330);
							try { dbg.enterDecision(330, decisionCanBacktrack[330]);

							switch ( input.LA(1) ) {
							case DOT:
								{
								alt330=1;
								}
								break;
							case HASH:
								{
								alt330=2;
								}
								break;
							case AT_IDENT:
								{
								alt330=3;
								}
								break;
							case LESS_AND:
								{
								alt330=4;
								}
								break;
							default:
								if (state.backtracking>0) {state.failed=true; return;}
								NoViableAltException nvae =
									new NoViableAltException("", 330, 0, input);
								dbg.recognitionException(nvae);
								throw nvae;
							}
							} finally {dbg.exitDecision(330);}

							switch (alt330) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:121: DOT cp_mixin_name
									{
									dbg.location(1118,121);
									match(input,DOT,FOLLOW_DOT_in_cp_mixin_call7541); if (state.failed) return;dbg.location(1118,125);
									pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call7543);
									cp_mixin_name();
									state._fsp--;
									if (state.failed) return;
									}
									break;
								case 2 :
									dbg.enterAlt(2);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:141: HASH
									{
									dbg.location(1118,141);
									match(input,HASH,FOLLOW_HASH_in_cp_mixin_call7547); if (state.failed) return;
									}
									break;
								case 3 :
									dbg.enterAlt(3);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:148: AT_IDENT
									{
									dbg.location(1118,148);
									match(input,AT_IDENT,FOLLOW_AT_IDENT_in_cp_mixin_call7551); if (state.failed) return;
									}
									break;
								case 4 :
									dbg.enterAlt(4);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:159: LESS_AND
									{
									dbg.location(1118,159);
									match(input,LESS_AND,FOLLOW_LESS_AND_in_cp_mixin_call7555); if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(330);}

							}
							break;

						default :
							break loop331;
						}
					}
					} finally {dbg.exitSubRule(331);}
					dbg.location(1118,171);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:171: ( ( pseudo )=> pseudo | ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN ) )?
					int alt335=3;
					try { dbg.enterSubRule(335);
					try { dbg.enterDecision(335, decisionCanBacktrack[335]);

					int LA335_0 = input.LA(1);
					if ( (LA335_0==COLON||LA335_0==DCOLON) ) {
						int LA335_1 = input.LA(2);
						if ( (synpred49_Css3()) ) {
							alt335=1;
						}
					}
					else if ( (LA335_0==COMMENT||LA335_0==NL||LA335_0==WS) ) {
						int LA335_2 = input.LA(2);
						if ( (synpred50_Css3()) ) {
							alt335=2;
						}
					}
					else if ( (LA335_0==LPAREN) && (synpred50_Css3())) {
						alt335=2;
					}
					} finally {dbg.exitDecision(335);}

					switch (alt335) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:172: ( pseudo )=> pseudo
							{
							dbg.location(1118,182);
							pushFollow(FOLLOW_pseudo_in_cp_mixin_call7565);
							pseudo();
							state._fsp--;
							if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:191: ( ( ws )? LPAREN )=> ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							{
							dbg.location(1118,205);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:205: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:206: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1118,206);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:206: ( ws )?
							int alt332=2;
							try { dbg.enterSubRule(332);
							try { dbg.enterDecision(332, decisionCanBacktrack[332]);

							int LA332_0 = input.LA(1);
							if ( (LA332_0==COMMENT||LA332_0==NL||LA332_0==WS) ) {
								alt332=1;
							}
							} finally {dbg.exitDecision(332);}

							switch (alt332) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:206: ws
									{
									dbg.location(1118,206);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7577);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(332);}
							dbg.location(1118,210);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call7580); if (state.failed) return;dbg.location(1118,217);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:217: ( ws )?
							int alt333=2;
							try { dbg.enterSubRule(333);
							try { dbg.enterDecision(333, decisionCanBacktrack[333]);

							int LA333_0 = input.LA(1);
							if ( (LA333_0==COMMENT||LA333_0==NL||LA333_0==WS) ) {
								alt333=1;
							}
							} finally {dbg.exitDecision(333);}

							switch (alt333) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:217: ws
									{
									dbg.location(1118,217);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7582);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(333);}
							dbg.location(1118,221);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:221: ( cp_mixin_call_args )?
							int alt334=2;
							try { dbg.enterSubRule(334);
							try { dbg.enterDecision(334, decisionCanBacktrack[334]);

							int LA334_0 = input.LA(1);
							if ( ((LA334_0 >= ANGLE && LA334_0 <= AT_SIGN)||(LA334_0 >= BOTTOMCENTER_SYM && LA334_0 <= BOTTOMRIGHT_SYM)||LA334_0==CHARSET_SYM||LA334_0==COUNTER_STYLE_SYM||LA334_0==DIMENSION||LA334_0==EMS||LA334_0==EXS||(LA334_0 >= FONT_FACE_SYM && LA334_0 <= FREQ)||LA334_0==GEN||(LA334_0 >= HASH && LA334_0 <= HASH_SYMBOL)||(LA334_0 >= IDENT && LA334_0 <= IMPORT_SYM)||LA334_0==LBRACE||(LA334_0 >= LEFTBOTTOM_SYM && LA334_0 <= LENGTH)||(LA334_0 >= LESS_AND && LA334_0 <= LESS_JS_STRING)||LA334_0==LPAREN||(LA334_0 >= MEDIA_SYM && LA334_0 <= MOZ_DOCUMENT_SYM)||LA334_0==NAMESPACE_SYM||(LA334_0 >= NOT && LA334_0 <= NUMBER)||(LA334_0 >= PAGE_SYM && LA334_0 <= PERCENTAGE_SYMBOL)||LA334_0==PLUS||(LA334_0 >= REM && LA334_0 <= RIGHTTOP_SYM)||(LA334_0 >= SASS_AT_ROOT && LA334_0 <= SASS_DEBUG)||(LA334_0 >= SASS_EACH && LA334_0 <= SASS_ELSE)||LA334_0==SASS_EXTEND||(LA334_0 >= SASS_FOR && LA334_0 <= SASS_FUNCTION)||(LA334_0 >= SASS_IF && LA334_0 <= SASS_MIXIN)||(LA334_0 >= SASS_RETURN && LA334_0 <= SASS_WHILE)||LA334_0==STRING||(LA334_0 >= TILDE && LA334_0 <= TOPRIGHT_SYM)||LA334_0==URI||LA334_0==VARIABLE||LA334_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt334=1;
							}
							} finally {dbg.exitDecision(334);}

							switch (alt334) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:221: cp_mixin_call_args
									{
									dbg.location(1118,221);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call7585);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(334);}
							dbg.location(1118,241);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call7588); if (state.failed) return;
							}

							}
							break;

					}
					} finally {dbg.exitSubRule(335);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:9: {...}? SASS_INCLUDE ws cp_mixin_name ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )? ( ( ws )? cp_mixin_block )?
					{
					dbg.location(1120,9);
					if ( !(evalPredicate(isScssSource(),"isScssSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_mixin_call", "isScssSource()");
					}dbg.location(1120,27);
					match(input,SASS_INCLUDE,FOLLOW_SASS_INCLUDE_in_cp_mixin_call7613); if (state.failed) return;dbg.location(1120,40);
					pushFollow(FOLLOW_ws_in_cp_mixin_call7615);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1120,43);
					pushFollow(FOLLOW_cp_mixin_name_in_cp_mixin_call7617);
					cp_mixin_name();
					state._fsp--;
					if (state.failed) return;dbg.location(1120,57);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?
					int alt339=2;
					try { dbg.enterSubRule(339);
					try { dbg.enterDecision(339, decisionCanBacktrack[339]);

					try {
						isCyclicDecision = true;
						alt339 = dfa339.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(339);}

					switch (alt339) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:58: ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN
							{
							dbg.location(1120,58);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:58: ( ws )?
							int alt336=2;
							try { dbg.enterSubRule(336);
							try { dbg.enterDecision(336, decisionCanBacktrack[336]);

							int LA336_0 = input.LA(1);
							if ( (LA336_0==COMMENT||LA336_0==NL||LA336_0==WS) ) {
								alt336=1;
							}
							} finally {dbg.exitDecision(336);}

							switch (alt336) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:58: ws
									{
									dbg.location(1120,58);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7620);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(336);}
							dbg.location(1120,62);
							match(input,LPAREN,FOLLOW_LPAREN_in_cp_mixin_call7623); if (state.failed) return;dbg.location(1120,69);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:69: ( ws )?
							int alt337=2;
							try { dbg.enterSubRule(337);
							try { dbg.enterDecision(337, decisionCanBacktrack[337]);

							int LA337_0 = input.LA(1);
							if ( (LA337_0==COMMENT||LA337_0==NL||LA337_0==WS) ) {
								alt337=1;
							}
							} finally {dbg.exitDecision(337);}

							switch (alt337) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:69: ws
									{
									dbg.location(1120,69);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7625);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(337);}
							dbg.location(1120,73);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:73: ( cp_mixin_call_args )?
							int alt338=2;
							try { dbg.enterSubRule(338);
							try { dbg.enterDecision(338, decisionCanBacktrack[338]);

							int LA338_0 = input.LA(1);
							if ( ((LA338_0 >= ANGLE && LA338_0 <= AT_SIGN)||(LA338_0 >= BOTTOMCENTER_SYM && LA338_0 <= BOTTOMRIGHT_SYM)||LA338_0==CHARSET_SYM||LA338_0==COUNTER_STYLE_SYM||LA338_0==DIMENSION||LA338_0==EMS||LA338_0==EXS||(LA338_0 >= FONT_FACE_SYM && LA338_0 <= FREQ)||LA338_0==GEN||(LA338_0 >= HASH && LA338_0 <= HASH_SYMBOL)||(LA338_0 >= IDENT && LA338_0 <= IMPORT_SYM)||LA338_0==LBRACE||(LA338_0 >= LEFTBOTTOM_SYM && LA338_0 <= LENGTH)||(LA338_0 >= LESS_AND && LA338_0 <= LESS_JS_STRING)||LA338_0==LPAREN||(LA338_0 >= MEDIA_SYM && LA338_0 <= MOZ_DOCUMENT_SYM)||LA338_0==NAMESPACE_SYM||(LA338_0 >= NOT && LA338_0 <= NUMBER)||(LA338_0 >= PAGE_SYM && LA338_0 <= PERCENTAGE_SYMBOL)||LA338_0==PLUS||(LA338_0 >= REM && LA338_0 <= RIGHTTOP_SYM)||(LA338_0 >= SASS_AT_ROOT && LA338_0 <= SASS_DEBUG)||(LA338_0 >= SASS_EACH && LA338_0 <= SASS_ELSE)||LA338_0==SASS_EXTEND||(LA338_0 >= SASS_FOR && LA338_0 <= SASS_FUNCTION)||(LA338_0 >= SASS_IF && LA338_0 <= SASS_MIXIN)||(LA338_0 >= SASS_RETURN && LA338_0 <= SASS_WHILE)||LA338_0==STRING||(LA338_0 >= TILDE && LA338_0 <= TOPRIGHT_SYM)||LA338_0==URI||LA338_0==VARIABLE||LA338_0==WEBKIT_KEYFRAMES_SYM) ) {
								alt338=1;
							}
							} finally {dbg.exitDecision(338);}

							switch (alt338) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:73: cp_mixin_call_args
									{
									dbg.location(1120,73);
									pushFollow(FOLLOW_cp_mixin_call_args_in_cp_mixin_call7628);
									cp_mixin_call_args();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(338);}
							dbg.location(1120,93);
							match(input,RPAREN,FOLLOW_RPAREN_in_cp_mixin_call7631); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(339);}
					dbg.location(1120,102);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:102: ( ( ws )? cp_mixin_block )?
					int alt341=2;
					try { dbg.enterSubRule(341);
					try { dbg.enterDecision(341, decisionCanBacktrack[341]);

					try {
						isCyclicDecision = true;
						alt341 = dfa341.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(341);}

					switch (alt341) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:103: ( ws )? cp_mixin_block
							{
							dbg.location(1120,103);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:103: ( ws )?
							int alt340=2;
							try { dbg.enterSubRule(340);
							try { dbg.enterDecision(340, decisionCanBacktrack[340]);

							int LA340_0 = input.LA(1);
							if ( (LA340_0==COMMENT||LA340_0==NL||LA340_0==WS) ) {
								alt340=1;
							}
							} finally {dbg.exitDecision(340);}

							switch (alt340) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1120:103: ws
									{
									dbg.location(1120,103);
									pushFollow(FOLLOW_ws_in_cp_mixin_call7636);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(340);}
							dbg.location(1120,107);
							pushFollow(FOLLOW_cp_mixin_block_in_cp_mixin_call7639);
							cp_mixin_block();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(341);}

					}
					break;

			}
			} finally {dbg.exitSubRule(342);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1122, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call"



	// $ANTLR start "cp_mixin_block"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1124:1: cp_mixin_block : LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE ;
	public final void cp_mixin_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1124, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1125:5: ( LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1126:5: LBRACE ( ws )? syncToFollow ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )? RBRACE
			{
			dbg.location(1126,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_cp_mixin_block7668); if (state.failed) return;dbg.location(1126,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1126:12: ( ws )?
			int alt343=2;
			try { dbg.enterSubRule(343);
			try { dbg.enterDecision(343, decisionCanBacktrack[343]);

			int LA343_0 = input.LA(1);
			if ( (LA343_0==COMMENT||LA343_0==NL||LA343_0==WS) ) {
				alt343=1;
			}
			} finally {dbg.exitDecision(343);}

			switch (alt343) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1126:12: ws
					{
					dbg.location(1126,12);
					pushFollow(FOLLOW_ws_in_cp_mixin_block7670);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(343);}
			dbg.location(1126,16);
			pushFollow(FOLLOW_syncToFollow_in_cp_mixin_block7673);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1127,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1127:9: ( declarations | ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )* )?
			int alt346=3;
			try { dbg.enterSubRule(346);
			try { dbg.enterDecision(346, decisionCanBacktrack[346]);

			int LA346_0 = input.LA(1);
			if ( ((LA346_0 >= AT_IDENT && LA346_0 <= AT_SIGN)||(LA346_0 >= BOTTOMCENTER_SYM && LA346_0 <= BOTTOMRIGHT_SYM)||(LA346_0 >= CHARSET_SYM && LA346_0 <= COLON)||LA346_0==COUNTER_STYLE_SYM||(LA346_0 >= DCOLON && LA346_0 <= DOT)||LA346_0==FONT_FACE_SYM||(LA346_0 >= GEN && LA346_0 <= GREATER)||(LA346_0 >= HASH && LA346_0 <= HASH_SYMBOL)||LA346_0==IMPORT_SYM||(LA346_0 >= LBRACKET && LA346_0 <= LEFTTOP_SYM)||LA346_0==LESS_AND||(LA346_0 >= MEDIA_SYM && LA346_0 <= MOZ_DOCUMENT_SYM)||LA346_0==NAMESPACE_SYM||LA346_0==PAGE_SYM||(LA346_0 >= PIPE && LA346_0 <= PLUS)||(LA346_0 >= RIGHTBOTTOM_SYM && LA346_0 <= RIGHTTOP_SYM)||LA346_0==SASS_AT_ROOT||LA346_0==SASS_DEBUG||(LA346_0 >= SASS_EACH && LA346_0 <= SASS_ELSE)||(LA346_0 >= SASS_ERROR && LA346_0 <= SASS_FUNCTION)||(LA346_0 >= SASS_IF && LA346_0 <= SASS_MIXIN)||(LA346_0 >= SASS_RETURN && LA346_0 <= SEMI)||LA346_0==STAR||LA346_0==SUPPORTS_SYM||LA346_0==TILDE||(LA346_0 >= TOPCENTER_SYM && LA346_0 <= TOPRIGHT_SYM)||LA346_0==VARIABLE||LA346_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt346=1;
			}
			else if ( (LA346_0==IDENT) ) {
				int LA346_4 = input.LA(2);
				if ( (true) ) {
					alt346=1;
				}
				else if ( (((evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")||evalPredicate(tokenNameEquals("to"),"tokenNameEquals(\"to\")"))&&synpred51_Css3())) ) {
					alt346=2;
				}
			}
			else if ( (LA346_0==SASS_CONTENT) ) {
				int LA346_36 = input.LA(2);
				if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt346=1;
				}
				else if ( ((synpred51_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {
					alt346=2;
				}
			}
			else if ( (LA346_0==PERCENTAGE) && (synpred51_Css3())) {
				alt346=2;
			}
			else if ( (LA346_0==RBRACE) ) {
				int LA346_42 = input.LA(2);
				if ( (synpred51_Css3()) ) {
					alt346=2;
				}
			}
			} finally {dbg.exitDecision(346);}

			switch (alt346) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1127:10: declarations
					{
					dbg.location(1127,10);
					pushFollow(FOLLOW_declarations_in_cp_mixin_block7684);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1127:25: ( webkitKeyframeSelectors )=> ( webkitKeyframesBlock ( ws )? )*
					{
					dbg.location(1128,3);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1128:3: ( webkitKeyframesBlock ( ws )? )*
					try { dbg.enterSubRule(345);

					loop345:
					while (true) {
						int alt345=2;
						try { dbg.enterDecision(345, decisionCanBacktrack[345]);

						int LA345_0 = input.LA(1);
						if ( (LA345_0==IDENT||LA345_0==PERCENTAGE||LA345_0==SASS_CONTENT) ) {
							alt345=1;
						}

						} finally {dbg.exitDecision(345);}

						switch (alt345) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1128:5: webkitKeyframesBlock ( ws )?
							{
							dbg.location(1128,5);
							pushFollow(FOLLOW_webkitKeyframesBlock_in_cp_mixin_block7699);
							webkitKeyframesBlock();
							state._fsp--;
							if (state.failed) return;dbg.location(1128,26);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1128:26: ( ws )?
							int alt344=2;
							try { dbg.enterSubRule(344);
							try { dbg.enterDecision(344, decisionCanBacktrack[344]);

							int LA344_0 = input.LA(1);
							if ( (LA344_0==COMMENT||LA344_0==NL||LA344_0==WS) ) {
								alt344=1;
							}
							} finally {dbg.exitDecision(344);}

							switch (alt344) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1128:26: ws
									{
									dbg.location(1128,26);
									pushFollow(FOLLOW_ws_in_cp_mixin_block7701);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(344);}

							}
							break;

						default :
							break loop345;
						}
					}
					} finally {dbg.exitSubRule(345);}

					}
					break;

			}
			} finally {dbg.exitSubRule(346);}
			dbg.location(1129,5);
			match(input,RBRACE,FOLLOW_RBRACE_in_cp_mixin_block7713); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1130, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_block"



	// $ANTLR start "cp_mixin_name"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1132:1: cp_mixin_name : IDENT ;
	public final void cp_mixin_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1132, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1133:5: ( IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1134:5: IDENT
			{
			dbg.location(1134,5);
			match(input,IDENT,FOLLOW_IDENT_in_cp_mixin_name7734); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1135, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_name"



	// $ANTLR start "cp_mixin_call_args"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1137:1: cp_mixin_call_args : cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? ;
	public final void cp_mixin_call_args() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_args");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1137, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1138:5: ( cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:5: cp_mixin_call_arg ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )* ( CP_DOTS ( ws )? )? ( SEMI )?
			{
			dbg.location(1141,5);
			pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args7765);
			cp_mixin_call_arg();
			state._fsp--;
			if (state.failed) return;dbg.location(1141,23);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:23: ( ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg )*
			try { dbg.enterSubRule(348);

			loop348:
			while (true) {
				int alt348=2;
				try { dbg.enterDecision(348, decisionCanBacktrack[348]);

				int LA348_0 = input.LA(1);
				if ( (LA348_0==SEMI) ) {
					int LA348_2 = input.LA(2);
					if ( ((LA348_2 >= ANGLE && LA348_2 <= AT_SIGN)||(LA348_2 >= BOTTOMCENTER_SYM && LA348_2 <= BOTTOMRIGHT_SYM)||LA348_2==CHARSET_SYM||LA348_2==COMMENT||LA348_2==COUNTER_STYLE_SYM||LA348_2==DIMENSION||LA348_2==EMS||LA348_2==EXS||(LA348_2 >= FONT_FACE_SYM && LA348_2 <= FREQ)||LA348_2==GEN||(LA348_2 >= HASH && LA348_2 <= HASH_SYMBOL)||(LA348_2 >= IDENT && LA348_2 <= IMPORT_SYM)||LA348_2==LBRACE||(LA348_2 >= LEFTBOTTOM_SYM && LA348_2 <= LENGTH)||(LA348_2 >= LESS_AND && LA348_2 <= LESS_JS_STRING)||LA348_2==LPAREN||(LA348_2 >= MEDIA_SYM && LA348_2 <= MOZ_DOCUMENT_SYM)||(LA348_2 >= NAMESPACE_SYM && LA348_2 <= NL)||(LA348_2 >= NOT && LA348_2 <= NUMBER)||(LA348_2 >= PAGE_SYM && LA348_2 <= PERCENTAGE_SYMBOL)||LA348_2==PLUS||(LA348_2 >= REM && LA348_2 <= RIGHTTOP_SYM)||(LA348_2 >= SASS_AT_ROOT && LA348_2 <= SASS_DEBUG)||(LA348_2 >= SASS_EACH && LA348_2 <= SASS_ELSE)||LA348_2==SASS_EXTEND||(LA348_2 >= SASS_FOR && LA348_2 <= SASS_FUNCTION)||(LA348_2 >= SASS_IF && LA348_2 <= SASS_MIXIN)||(LA348_2 >= SASS_RETURN && LA348_2 <= SASS_WHILE)||LA348_2==STRING||(LA348_2 >= TILDE && LA348_2 <= TOPRIGHT_SYM)||LA348_2==URI||LA348_2==VARIABLE||(LA348_2 >= WEBKIT_KEYFRAMES_SYM && LA348_2 <= WS)) ) {
						alt348=1;
					}

				}
				else if ( (LA348_0==COMMA) ) {
					alt348=1;
				}

				} finally {dbg.exitDecision(348);}

				switch (alt348) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:25: ( COMMA | SEMI ) ( ws )? cp_mixin_call_arg
					{
					dbg.location(1141,25);
					if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1141,40);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:40: ( ws )?
					int alt347=2;
					try { dbg.enterSubRule(347);
					try { dbg.enterDecision(347, decisionCanBacktrack[347]);

					int LA347_0 = input.LA(1);
					if ( (LA347_0==COMMENT||LA347_0==NL||LA347_0==WS) ) {
						alt347=1;
					}
					} finally {dbg.exitDecision(347);}

					switch (alt347) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:40: ws
							{
							dbg.location(1141,40);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args7777);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(347);}
					dbg.location(1141,44);
					pushFollow(FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args7780);
					cp_mixin_call_arg();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop348;
				}
			}
			} finally {dbg.exitSubRule(348);}
			dbg.location(1141,65);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:65: ( CP_DOTS ( ws )? )?
			int alt350=2;
			try { dbg.enterSubRule(350);
			try { dbg.enterDecision(350, decisionCanBacktrack[350]);

			int LA350_0 = input.LA(1);
			if ( (LA350_0==CP_DOTS) ) {
				alt350=1;
			}
			} finally {dbg.exitDecision(350);}

			switch (alt350) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:66: CP_DOTS ( ws )?
					{
					dbg.location(1141,66);
					match(input,CP_DOTS,FOLLOW_CP_DOTS_in_cp_mixin_call_args7786); if (state.failed) return;dbg.location(1141,74);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:74: ( ws )?
					int alt349=2;
					try { dbg.enterSubRule(349);
					try { dbg.enterDecision(349, decisionCanBacktrack[349]);

					int LA349_0 = input.LA(1);
					if ( (LA349_0==COMMENT||LA349_0==NL||LA349_0==WS) ) {
						alt349=1;
					}
					} finally {dbg.exitDecision(349);}

					switch (alt349) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:74: ws
							{
							dbg.location(1141,74);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_args7788);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(349);}

					}
					break;

			}
			} finally {dbg.exitSubRule(350);}
			dbg.location(1141,80);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:80: ( SEMI )?
			int alt351=2;
			try { dbg.enterSubRule(351);
			try { dbg.enterDecision(351, decisionCanBacktrack[351]);

			int LA351_0 = input.LA(1);
			if ( (LA351_0==SEMI) ) {
				alt351=1;
			}
			} finally {dbg.exitDecision(351);}

			switch (alt351) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1141:80: SEMI
					{
					dbg.location(1141,80);
					match(input,SEMI,FOLLOW_SEMI_in_cp_mixin_call_args7793); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(351);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1142, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_args");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_args"



	// $ANTLR start "cp_mixin_call_arg"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1144:1: cp_mixin_call_arg : ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? ;
	public final void cp_mixin_call_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_mixin_call_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1144, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1145:5: ( ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1146:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression ) ( ws )?
			{
			dbg.location(1146,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1146:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )
			int alt354=2;
			try { dbg.enterSubRule(354);
			try { dbg.enterDecision(354, decisionCanBacktrack[354]);

			try {
				isCyclicDecision = true;
				alt354 = dfa354.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(354);}

			switch (alt354) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1147:9: cp_variable ( ws )? COLON ( ws )? cp_expression
					{
					dbg.location(1147,9);
					pushFollow(FOLLOW_cp_variable_in_cp_mixin_call_arg7825);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1147,21);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1147:21: ( ws )?
					int alt352=2;
					try { dbg.enterSubRule(352);
					try { dbg.enterDecision(352, decisionCanBacktrack[352]);

					int LA352_0 = input.LA(1);
					if ( (LA352_0==COMMENT||LA352_0==NL||LA352_0==WS) ) {
						alt352=1;
					}
					} finally {dbg.exitDecision(352);}

					switch (alt352) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1147:21: ws
							{
							dbg.location(1147,21);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg7827);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(352);}
					dbg.location(1147,25);
					match(input,COLON,FOLLOW_COLON_in_cp_mixin_call_arg7830); if (state.failed) return;dbg.location(1147,31);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1147:31: ( ws )?
					int alt353=2;
					try { dbg.enterSubRule(353);
					try { dbg.enterDecision(353, decisionCanBacktrack[353]);

					int LA353_0 = input.LA(1);
					if ( (LA353_0==COMMENT||LA353_0==NL||LA353_0==WS) ) {
						alt353=1;
					}
					} finally {dbg.exitDecision(353);}

					switch (alt353) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1147:31: ws
							{
							dbg.location(1147,31);
							pushFollow(FOLLOW_ws_in_cp_mixin_call_arg7832);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(353);}
					dbg.location(1147,35);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg7835);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1148:11: cp_expression
					{
					dbg.location(1148,11);
					pushFollow(FOLLOW_cp_expression_in_cp_mixin_call_arg7847);
					cp_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(354);}
			dbg.location(1149,7);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1149:7: ( ws )?
			int alt355=2;
			try { dbg.enterSubRule(355);
			try { dbg.enterDecision(355, decisionCanBacktrack[355]);

			int LA355_0 = input.LA(1);
			if ( (LA355_0==COMMENT||LA355_0==NL||LA355_0==WS) ) {
				alt355=1;
			}
			} finally {dbg.exitDecision(355);}

			switch (alt355) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1149:7: ws
					{
					dbg.location(1149,7);
					pushFollow(FOLLOW_ws_in_cp_mixin_call_arg7855);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(355);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1150, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_mixin_call_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_mixin_call_arg"



	// $ANTLR start "cp_args_list"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1153:1: cp_args_list : ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? );
	public final void cp_args_list() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_args_list");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1153, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1154:5: ( ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? ) | ( CP_DOTS | LESS_REST ) ( ws )? )
			int alt363=2;
			try { dbg.enterDecision(363, decisionCanBacktrack[363]);

			int LA363_0 = input.LA(1);
			if ( (LA363_0==AT_IDENT||(LA363_0 >= BOTTOMCENTER_SYM && LA363_0 <= BOTTOMRIGHT_SYM)||LA363_0==CHARSET_SYM||LA363_0==COUNTER_STYLE_SYM||LA363_0==FONT_FACE_SYM||LA363_0==IDENT||LA363_0==IMPORT_SYM||(LA363_0 >= LEFTBOTTOM_SYM && LA363_0 <= LEFTTOP_SYM)||LA363_0==MEDIA_SYM||LA363_0==MOZ_DOCUMENT_SYM||LA363_0==NAMESPACE_SYM||LA363_0==PAGE_SYM||(LA363_0 >= RIGHTBOTTOM_SYM && LA363_0 <= RIGHTTOP_SYM)||(LA363_0 >= SASS_AT_ROOT && LA363_0 <= SASS_DEBUG)||(LA363_0 >= SASS_EACH && LA363_0 <= SASS_ELSE)||LA363_0==SASS_EXTEND||(LA363_0 >= SASS_FOR && LA363_0 <= SASS_FUNCTION)||(LA363_0 >= SASS_IF && LA363_0 <= SASS_MIXIN)||(LA363_0 >= SASS_RETURN && LA363_0 <= SASS_WHILE)||(LA363_0 >= TOPCENTER_SYM && LA363_0 <= TOPRIGHT_SYM)||LA363_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt363=1;
			}
			else if ( (LA363_0==CP_DOTS||LA363_0==LESS_REST) ) {
				alt363=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 363, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(363);}

			switch (alt363) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					{
					dbg.location(1161,5);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:5: ( cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )? )
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:7: cp_arg ( ( COMMA | SEMI ) ( ws )? cp_arg )* ( ( COMMA | SEMI ) ( ws )? )? ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					{
					dbg.location(1161,7);
					pushFollow(FOLLOW_cp_arg_in_cp_args_list7902);
					cp_arg();
					state._fsp--;
					if (state.failed) return;dbg.location(1161,14);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*
					try { dbg.enterSubRule(357);

					loop357:
					while (true) {
						int alt357=2;
						try { dbg.enterDecision(357, decisionCanBacktrack[357]);

						try {
							isCyclicDecision = true;
							alt357 = dfa357.predict(input);
						}
						catch (NoViableAltException nvae) {
							dbg.recognitionException(nvae);
							throw nvae;
						}
						} finally {dbg.exitDecision(357);}

						switch (alt357) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:16: ( COMMA | SEMI ) ( ws )? cp_arg
							{
							dbg.location(1161,16);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1161,33);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:33: ( ws )?
							int alt356=2;
							try { dbg.enterSubRule(356);
							try { dbg.enterDecision(356, decisionCanBacktrack[356]);

							int LA356_0 = input.LA(1);
							if ( (LA356_0==COMMENT||LA356_0==NL||LA356_0==WS) ) {
								alt356=1;
							}
							} finally {dbg.exitDecision(356);}

							switch (alt356) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:33: ws
									{
									dbg.location(1161,33);
									pushFollow(FOLLOW_ws_in_cp_args_list7916);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(356);}
							dbg.location(1161,37);
							pushFollow(FOLLOW_cp_arg_in_cp_args_list7919);
							cp_arg();
							state._fsp--;
							if (state.failed) return;
							}
							break;

						default :
							break loop357;
						}
					}
					} finally {dbg.exitSubRule(357);}
					dbg.location(1161,47);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:47: ( ( COMMA | SEMI ) ( ws )? )?
					int alt359=2;
					try { dbg.enterSubRule(359);
					try { dbg.enterDecision(359, decisionCanBacktrack[359]);

					int LA359_0 = input.LA(1);
					if ( (LA359_0==COMMA||LA359_0==SEMI) ) {
						alt359=1;
					}
					} finally {dbg.exitDecision(359);}

					switch (alt359) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:49: ( COMMA | SEMI ) ( ws )?
							{
							dbg.location(1161,49);
							if ( input.LA(1)==COMMA||input.LA(1)==SEMI ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1161,64);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:64: ( ws )?
							int alt358=2;
							try { dbg.enterSubRule(358);
							try { dbg.enterDecision(358, decisionCanBacktrack[358]);

							int LA358_0 = input.LA(1);
							if ( (LA358_0==COMMENT||LA358_0==NL||LA358_0==WS) ) {
								alt358=1;
							}
							} finally {dbg.exitDecision(358);}

							switch (alt358) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:64: ws
									{
									dbg.location(1161,64);
									pushFollow(FOLLOW_ws_in_cp_args_list7934);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(358);}

							}
							break;

					}
					} finally {dbg.exitSubRule(359);}
					dbg.location(1161,71);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:71: ( ( CP_DOTS | LESS_REST ) ( ws )? )?
					int alt361=2;
					try { dbg.enterSubRule(361);
					try { dbg.enterDecision(361, decisionCanBacktrack[361]);

					int LA361_0 = input.LA(1);
					if ( (LA361_0==CP_DOTS||LA361_0==LESS_REST) ) {
						alt361=1;
					}
					} finally {dbg.exitDecision(361);}

					switch (alt361) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:73: ( CP_DOTS | LESS_REST ) ( ws )?
							{
							dbg.location(1161,73);
							if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}dbg.location(1161,95);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:95: ( ws )?
							int alt360=2;
							try { dbg.enterSubRule(360);
							try { dbg.enterDecision(360, decisionCanBacktrack[360]);

							int LA360_0 = input.LA(1);
							if ( (LA360_0==COMMENT||LA360_0==NL||LA360_0==WS) ) {
								alt360=1;
							}
							} finally {dbg.exitDecision(360);}

							switch (alt360) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1161:95: ws
									{
									dbg.location(1161,95);
									pushFollow(FOLLOW_ws_in_cp_args_list7950);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(360);}

							}
							break;

					}
					} finally {dbg.exitSubRule(361);}

					}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1163:5: ( CP_DOTS | LESS_REST ) ( ws )?
					{
					dbg.location(1163,5);
					if ( input.LA(1)==CP_DOTS||input.LA(1)==LESS_REST ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}dbg.location(1163,27);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1163:27: ( ws )?
					int alt362=2;
					try { dbg.enterSubRule(362);
					try { dbg.enterDecision(362, decisionCanBacktrack[362]);

					int LA362_0 = input.LA(1);
					if ( (LA362_0==COMMENT||LA362_0==NL||LA362_0==WS) ) {
						alt362=1;
					}
					} finally {dbg.exitDecision(362);}

					switch (alt362) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1163:27: ws
							{
							dbg.location(1163,27);
							pushFollow(FOLLOW_ws_in_cp_args_list7975);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(362);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1164, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_args_list");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_args_list"



	// $ANTLR start "cp_arg"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1167:1: cp_arg : ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT );
	public final void cp_arg() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "cp_arg");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1167, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1168:5: ( cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )? |{...}? IDENT )
			int alt368=2;
			try { dbg.enterDecision(368, decisionCanBacktrack[368]);

			int LA368_0 = input.LA(1);
			if ( (LA368_0==AT_IDENT||(LA368_0 >= BOTTOMCENTER_SYM && LA368_0 <= BOTTOMRIGHT_SYM)||LA368_0==CHARSET_SYM||LA368_0==COUNTER_STYLE_SYM||LA368_0==FONT_FACE_SYM||LA368_0==IMPORT_SYM||(LA368_0 >= LEFTBOTTOM_SYM && LA368_0 <= LEFTTOP_SYM)||LA368_0==MEDIA_SYM||LA368_0==MOZ_DOCUMENT_SYM||LA368_0==NAMESPACE_SYM||LA368_0==PAGE_SYM||(LA368_0 >= RIGHTBOTTOM_SYM && LA368_0 <= RIGHTTOP_SYM)||(LA368_0 >= SASS_AT_ROOT && LA368_0 <= SASS_DEBUG)||(LA368_0 >= SASS_EACH && LA368_0 <= SASS_ELSE)||LA368_0==SASS_EXTEND||(LA368_0 >= SASS_FOR && LA368_0 <= SASS_FUNCTION)||(LA368_0 >= SASS_IF && LA368_0 <= SASS_MIXIN)||(LA368_0 >= SASS_RETURN && LA368_0 <= SASS_WHILE)||(LA368_0 >= TOPCENTER_SYM && LA368_0 <= TOPRIGHT_SYM)||LA368_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt368=1;
			}
			else if ( (LA368_0==IDENT) ) {
				alt368=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 368, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(368);}

			switch (alt368) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:5: cp_variable ( ws )? ( COLON ( ws )? cp_expression ( ws )? )?
					{
					dbg.location(1169,5);
					pushFollow(FOLLOW_cp_variable_in_cp_arg7998);
					cp_variable();
					state._fsp--;
					if (state.failed) return;dbg.location(1169,17);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:17: ( ws )?
					int alt364=2;
					try { dbg.enterSubRule(364);
					try { dbg.enterDecision(364, decisionCanBacktrack[364]);

					int LA364_0 = input.LA(1);
					if ( (LA364_0==COMMENT||LA364_0==NL||LA364_0==WS) ) {
						alt364=1;
					}
					} finally {dbg.exitDecision(364);}

					switch (alt364) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:17: ws
							{
							dbg.location(1169,17);
							pushFollow(FOLLOW_ws_in_cp_arg8000);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(364);}
					dbg.location(1169,21);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:21: ( COLON ( ws )? cp_expression ( ws )? )?
					int alt367=2;
					try { dbg.enterSubRule(367);
					try { dbg.enterDecision(367, decisionCanBacktrack[367]);

					int LA367_0 = input.LA(1);
					if ( (LA367_0==COLON) ) {
						alt367=1;
					}
					} finally {dbg.exitDecision(367);}

					switch (alt367) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:23: COLON ( ws )? cp_expression ( ws )?
							{
							dbg.location(1169,23);
							match(input,COLON,FOLLOW_COLON_in_cp_arg8005); if (state.failed) return;dbg.location(1169,29);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:29: ( ws )?
							int alt365=2;
							try { dbg.enterSubRule(365);
							try { dbg.enterDecision(365, decisionCanBacktrack[365]);

							int LA365_0 = input.LA(1);
							if ( (LA365_0==COMMENT||LA365_0==NL||LA365_0==WS) ) {
								alt365=1;
							}
							} finally {dbg.exitDecision(365);}

							switch (alt365) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:29: ws
									{
									dbg.location(1169,29);
									pushFollow(FOLLOW_ws_in_cp_arg8007);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(365);}
							dbg.location(1169,33);
							pushFollow(FOLLOW_cp_expression_in_cp_arg8010);
							cp_expression();
							state._fsp--;
							if (state.failed) return;dbg.location(1169,47);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:47: ( ws )?
							int alt366=2;
							try { dbg.enterSubRule(366);
							try { dbg.enterDecision(366, decisionCanBacktrack[366]);

							int LA366_0 = input.LA(1);
							if ( (LA366_0==COMMENT||LA366_0==NL||LA366_0==WS) ) {
								alt366=1;
							}
							} finally {dbg.exitDecision(366);}

							switch (alt366) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1169:47: ws
									{
									dbg.location(1169,47);
									pushFollow(FOLLOW_ws_in_cp_arg8012);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(366);}

							}
							break;

					}
					} finally {dbg.exitSubRule(367);}

					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1170:7: {...}? IDENT
					{
					dbg.location(1170,7);
					if ( !(evalPredicate(isLessSource(),"isLessSource()")) ) {
						if (state.backtracking>0) {state.failed=true; return;}
						throw new FailedPredicateException(input, "cp_arg", "isLessSource()");
					}dbg.location(1170,25);
					match(input,IDENT,FOLLOW_IDENT_in_cp_arg8025); if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1171, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "cp_arg");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "cp_arg"



	// $ANTLR start "less_mixin_guarded"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1175:1: less_mixin_guarded : less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* ;
	public final void less_mixin_guarded() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_mixin_guarded");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1175, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1176:5: ( less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:5: less_when ( ws )? less_condition ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			{
			dbg.location(1177,5);
			pushFollow(FOLLOW_less_when_in_less_mixin_guarded8048);
			less_when();
			state._fsp--;
			if (state.failed) return;dbg.location(1177,15);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:15: ( ws )?
			int alt369=2;
			try { dbg.enterSubRule(369);
			try { dbg.enterDecision(369, decisionCanBacktrack[369]);

			int LA369_0 = input.LA(1);
			if ( (LA369_0==COMMENT||LA369_0==NL||LA369_0==WS) ) {
				alt369=1;
			}
			} finally {dbg.exitDecision(369);}

			switch (alt369) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:15: ws
					{
					dbg.location(1177,15);
					pushFollow(FOLLOW_ws_in_less_mixin_guarded8050);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(369);}
			dbg.location(1177,19);
			pushFollow(FOLLOW_less_condition_in_less_mixin_guarded8053);
			less_condition();
			state._fsp--;
			if (state.failed) return;dbg.location(1177,34);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*
			try { dbg.enterSubRule(373);

			loop373:
			while (true) {
				int alt373=2;
				try { dbg.enterDecision(373, decisionCanBacktrack[373]);

				try {
					isCyclicDecision = true;
					alt373 = dfa373.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(373);}

				switch (alt373) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:35: ( ws )? ( COMMA | key_and ) ( ws )? less_condition
					{
					dbg.location(1177,35);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:35: ( ws )?
					int alt370=2;
					try { dbg.enterSubRule(370);
					try { dbg.enterDecision(370, decisionCanBacktrack[370]);

					int LA370_0 = input.LA(1);
					if ( (LA370_0==COMMENT||LA370_0==NL||LA370_0==WS) ) {
						alt370=1;
					}
					} finally {dbg.exitDecision(370);}

					switch (alt370) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:35: ws
							{
							dbg.location(1177,35);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded8056);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(370);}
					dbg.location(1177,39);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:39: ( COMMA | key_and )
					int alt371=2;
					try { dbg.enterSubRule(371);
					try { dbg.enterDecision(371, decisionCanBacktrack[371]);

					int LA371_0 = input.LA(1);
					if ( (LA371_0==COMMA) ) {
						alt371=1;
					}
					else if ( (LA371_0==IDENT) ) {
						alt371=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 371, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(371);}

					switch (alt371) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:40: COMMA
							{
							dbg.location(1177,40);
							match(input,COMMA,FOLLOW_COMMA_in_less_mixin_guarded8060); if (state.failed) return;
							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:48: key_and
							{
							dbg.location(1177,48);
							pushFollow(FOLLOW_key_and_in_less_mixin_guarded8064);
							key_and();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(371);}
					dbg.location(1177,57);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:57: ( ws )?
					int alt372=2;
					try { dbg.enterSubRule(372);
					try { dbg.enterDecision(372, decisionCanBacktrack[372]);

					int LA372_0 = input.LA(1);
					if ( (LA372_0==COMMENT||LA372_0==NL||LA372_0==WS) ) {
						alt372=1;
					}
					} finally {dbg.exitDecision(372);}

					switch (alt372) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1177:57: ws
							{
							dbg.location(1177,57);
							pushFollow(FOLLOW_ws_in_less_mixin_guarded8067);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(372);}
					dbg.location(1177,61);
					pushFollow(FOLLOW_less_condition_in_less_mixin_guarded8070);
					less_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop373;
				}
			}
			} finally {dbg.exitSubRule(373);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1178, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_mixin_guarded");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_mixin_guarded"



	// $ANTLR start "less_condition"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1182:1: less_condition : ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN ;
	public final void less_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1182, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1183:5: ( ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1184:5: ( NOT ( ws )? )? LPAREN ( ws )? ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? ) RPAREN
			{
			dbg.location(1184,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1184:5: ( NOT ( ws )? )?
			int alt375=2;
			try { dbg.enterSubRule(375);
			try { dbg.enterDecision(375, decisionCanBacktrack[375]);

			int LA375_0 = input.LA(1);
			if ( (LA375_0==NOT) ) {
				alt375=1;
			}
			} finally {dbg.exitDecision(375);}

			switch (alt375) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1184:6: NOT ( ws )?
					{
					dbg.location(1184,6);
					match(input,NOT,FOLLOW_NOT_in_less_condition8096); if (state.failed) return;dbg.location(1184,10);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1184:10: ( ws )?
					int alt374=2;
					try { dbg.enterSubRule(374);
					try { dbg.enterDecision(374, decisionCanBacktrack[374]);

					int LA374_0 = input.LA(1);
					if ( (LA374_0==COMMENT||LA374_0==NL||LA374_0==WS) ) {
						alt374=1;
					}
					} finally {dbg.exitDecision(374);}

					switch (alt374) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1184:10: ws
							{
							dbg.location(1184,10);
							pushFollow(FOLLOW_ws_in_less_condition8098);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(374);}

					}
					break;

			}
			} finally {dbg.exitSubRule(375);}
			dbg.location(1185,5);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_condition8107); if (state.failed) return;dbg.location(1185,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1185:12: ( ws )?
			int alt376=2;
			try { dbg.enterSubRule(376);
			try { dbg.enterDecision(376, decisionCanBacktrack[376]);

			int LA376_0 = input.LA(1);
			if ( (LA376_0==COMMENT||LA376_0==NL||LA376_0==WS) ) {
				alt376=1;
			}
			} finally {dbg.exitDecision(376);}

			switch (alt376) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1185:12: ws
					{
					dbg.location(1185,12);
					pushFollow(FOLLOW_ws_in_less_condition8109);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(376);}
			dbg.location(1186,9);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1186:9: ( ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:14: ( cp_variable | less_function_in_condition ) ( ws )? ( less_condition_operator ( ws )? cp_math_expression )?
			{
			dbg.location(1187,14);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:14: ( cp_variable | less_function_in_condition )
			int alt377=2;
			try { dbg.enterSubRule(377);
			try { dbg.enterDecision(377, decisionCanBacktrack[377]);

			int LA377_0 = input.LA(1);
			if ( (LA377_0==AT_IDENT||(LA377_0 >= BOTTOMCENTER_SYM && LA377_0 <= BOTTOMRIGHT_SYM)||LA377_0==CHARSET_SYM||LA377_0==COUNTER_STYLE_SYM||LA377_0==FONT_FACE_SYM||LA377_0==IMPORT_SYM||(LA377_0 >= LEFTBOTTOM_SYM && LA377_0 <= LEFTTOP_SYM)||LA377_0==MEDIA_SYM||LA377_0==MOZ_DOCUMENT_SYM||LA377_0==NAMESPACE_SYM||LA377_0==PAGE_SYM||(LA377_0 >= RIGHTBOTTOM_SYM && LA377_0 <= RIGHTTOP_SYM)||(LA377_0 >= SASS_AT_ROOT && LA377_0 <= SASS_DEBUG)||(LA377_0 >= SASS_EACH && LA377_0 <= SASS_ELSE)||LA377_0==SASS_EXTEND||(LA377_0 >= SASS_FOR && LA377_0 <= SASS_FUNCTION)||(LA377_0 >= SASS_IF && LA377_0 <= SASS_MIXIN)||(LA377_0 >= SASS_RETURN && LA377_0 <= SASS_WHILE)||(LA377_0 >= TOPCENTER_SYM && LA377_0 <= TOPRIGHT_SYM)||LA377_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt377=1;
			}
			else if ( (LA377_0==IDENT) ) {
				alt377=2;
			}

			else {
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 377, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}

			} finally {dbg.exitDecision(377);}

			switch (alt377) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:15: cp_variable
					{
					dbg.location(1187,15);
					pushFollow(FOLLOW_cp_variable_in_less_condition8136);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:29: less_function_in_condition
					{
					dbg.location(1187,29);
					pushFollow(FOLLOW_less_function_in_condition_in_less_condition8140);
					less_function_in_condition();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(377);}
			dbg.location(1187,57);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:57: ( ws )?
			int alt378=2;
			try { dbg.enterSubRule(378);
			try { dbg.enterDecision(378, decisionCanBacktrack[378]);

			int LA378_0 = input.LA(1);
			if ( (LA378_0==COMMENT||LA378_0==NL||LA378_0==WS) ) {
				alt378=1;
			}
			} finally {dbg.exitDecision(378);}

			switch (alt378) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:57: ws
					{
					dbg.location(1187,57);
					pushFollow(FOLLOW_ws_in_less_condition8143);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(378);}
			dbg.location(1187,61);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:61: ( less_condition_operator ( ws )? cp_math_expression )?
			int alt380=2;
			try { dbg.enterSubRule(380);
			try { dbg.enterDecision(380, decisionCanBacktrack[380]);

			int LA380_0 = input.LA(1);
			if ( ((LA380_0 >= GREATER && LA380_0 <= GREATER_OR_EQ)||LA380_0==LESS||LA380_0==LESS_OR_EQ||LA380_0==OPEQ) ) {
				alt380=1;
			}
			} finally {dbg.exitDecision(380);}

			switch (alt380) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:62: less_condition_operator ( ws )? cp_math_expression
					{
					dbg.location(1187,62);
					pushFollow(FOLLOW_less_condition_operator_in_less_condition8147);
					less_condition_operator();
					state._fsp--;
					if (state.failed) return;dbg.location(1187,86);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:86: ( ws )?
					int alt379=2;
					try { dbg.enterSubRule(379);
					try { dbg.enterDecision(379, decisionCanBacktrack[379]);

					int LA379_0 = input.LA(1);
					if ( (LA379_0==COMMENT||LA379_0==NL||LA379_0==WS) ) {
						alt379=1;
					}
					} finally {dbg.exitDecision(379);}

					switch (alt379) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1187:86: ws
							{
							dbg.location(1187,86);
							pushFollow(FOLLOW_ws_in_less_condition8149);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(379);}
					dbg.location(1187,90);
					pushFollow(FOLLOW_cp_math_expression_in_less_condition8152);
					cp_math_expression();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(380);}

			}
			dbg.location(1189,5);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_condition8170); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1190, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition"



	// $ANTLR start "less_function_in_condition"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1193:1: less_function_in_condition : less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN ;
	public final void less_function_in_condition() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_function_in_condition");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1193, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1194:5: ( less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:5: less_fn_name ( ws )? LPAREN ( ws )? cp_variable ( ws )? RPAREN
			{
			dbg.location(1195,5);
			pushFollow(FOLLOW_less_fn_name_in_less_function_in_condition8192);
			less_fn_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1195,18);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:18: ( ws )?
			int alt381=2;
			try { dbg.enterSubRule(381);
			try { dbg.enterDecision(381, decisionCanBacktrack[381]);

			int LA381_0 = input.LA(1);
			if ( (LA381_0==COMMENT||LA381_0==NL||LA381_0==WS) ) {
				alt381=1;
			}
			} finally {dbg.exitDecision(381);}

			switch (alt381) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:18: ws
					{
					dbg.location(1195,18);
					pushFollow(FOLLOW_ws_in_less_function_in_condition8194);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(381);}
			dbg.location(1195,22);
			match(input,LPAREN,FOLLOW_LPAREN_in_less_function_in_condition8197); if (state.failed) return;dbg.location(1195,29);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:29: ( ws )?
			int alt382=2;
			try { dbg.enterSubRule(382);
			try { dbg.enterDecision(382, decisionCanBacktrack[382]);

			int LA382_0 = input.LA(1);
			if ( (LA382_0==COMMENT||LA382_0==NL||LA382_0==WS) ) {
				alt382=1;
			}
			} finally {dbg.exitDecision(382);}

			switch (alt382) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:29: ws
					{
					dbg.location(1195,29);
					pushFollow(FOLLOW_ws_in_less_function_in_condition8199);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(382);}
			dbg.location(1195,33);
			pushFollow(FOLLOW_cp_variable_in_less_function_in_condition8202);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1195,45);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:45: ( ws )?
			int alt383=2;
			try { dbg.enterSubRule(383);
			try { dbg.enterDecision(383, decisionCanBacktrack[383]);

			int LA383_0 = input.LA(1);
			if ( (LA383_0==COMMENT||LA383_0==NL||LA383_0==WS) ) {
				alt383=1;
			}
			} finally {dbg.exitDecision(383);}

			switch (alt383) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1195:45: ws
					{
					dbg.location(1195,45);
					pushFollow(FOLLOW_ws_in_less_function_in_condition8204);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(383);}
			dbg.location(1195,49);
			match(input,RPAREN,FOLLOW_RPAREN_in_less_function_in_condition8207); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1196, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_function_in_condition");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_function_in_condition"



	// $ANTLR start "less_fn_name"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1199:1: less_fn_name : IDENT ;
	public final void less_fn_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_fn_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1199, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1200:5: ( IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1201:5: IDENT
			{
			dbg.location(1201,5);
			match(input,IDENT,FOLLOW_IDENT_in_less_fn_name8229); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1202, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_fn_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_fn_name"



	// $ANTLR start "less_condition_operator"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1204:1: less_condition_operator : ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ );
	public final void less_condition_operator() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_condition_operator");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1204, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1205:5: ( GREATER | GREATER_OR_EQ | OPEQ | LESS | LESS_OR_EQ )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
			{
			dbg.location(1205,5);
			if ( (input.LA(1) >= GREATER && input.LA(1) <= GREATER_OR_EQ)||input.LA(1)==LESS||input.LA(1)==LESS_OR_EQ||input.LA(1)==OPEQ ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1207, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_condition_operator");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_condition_operator"



	// $ANTLR start "less_selector_interpolation_exp"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1209:1: less_selector_interpolation_exp : ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void less_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1209, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1209:33: ( ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1210:5: ( IDENT | MINUS )? less_selector_interpolation ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1210,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1210:5: ( IDENT | MINUS )?
			int alt384=2;
			try { dbg.enterSubRule(384);
			try { dbg.enterDecision(384, decisionCanBacktrack[384]);

			int LA384_0 = input.LA(1);
			if ( (LA384_0==IDENT||LA384_0==MINUS) ) {
				alt384=1;
			}
			} finally {dbg.exitDecision(384);}

			switch (alt384) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
					{
					dbg.location(1210,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(384);}
			dbg.location(1210,22);
			pushFollow(FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp8292);
			less_selector_interpolation();
			state._fsp--;
			if (state.failed) return;dbg.location(1210,50);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1210:50: ( less_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt386=3;
			try { dbg.enterSubRule(386);
			try { dbg.enterDecision(386, decisionCanBacktrack[386]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA386_1 = input.LA(2);
					if ( (LA386_1==AT_SIGN) ) {
						alt386=1;
					}
					else if ( ((LA386_1 >= COLON && LA386_1 <= COMMENT)||(LA386_1 >= DCOLON && LA386_1 <= DOT)||LA386_1==GREATER||(LA386_1 >= HASH && LA386_1 <= HASH_SYMBOL)||LA386_1==IDENT||(LA386_1 >= LBRACE && LA386_1 <= LBRACKET)||LA386_1==LENGTH||LA386_1==LESS_AND||LA386_1==MINUS||LA386_1==NL||LA386_1==PLUS||LA386_1==RBRACE||LA386_1==RPAREN||LA386_1==SASS_EXTEND_ONLY_SELECTOR||LA386_1==SEMI||LA386_1==TILDE||LA386_1==WS) ) {
						alt386=2;
					}
					}
					break;
				case AT_SIGN:
					{
					alt386=1;
					}
					break;
				case DIMENSION:
					{
					int LA386_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt386=2;
					}
					}
					break;
				case LENGTH:
					{
					alt386=2;
					}
					break;
			}
			} finally {dbg.exitDecision(386);}

			switch (alt386) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1210:51: less_selector_interpolation_exp
					{
					dbg.location(1210,51);
					pushFollow(FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp8295);
					less_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1210:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1210,85);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1210:85: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt385=0;
					try { dbg.enterSubRule(385);

					loop385:
					while (true) {
						int alt385=2;
						try { dbg.enterDecision(385, decisionCanBacktrack[385]);

						int LA385_0 = input.LA(1);
						if ( (LA385_0==DIMENSION) ) {
							int LA385_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt385=1;
							}

						}
						else if ( (LA385_0==IDENT||LA385_0==LENGTH||LA385_0==MINUS) ) {
							alt385=1;
						}

						} finally {dbg.exitDecision(385);}

						switch (alt385) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
							{
							dbg.location(1210,85);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt385 >= 1 ) break loop385;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(385, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt385++;
					}
					} finally {dbg.exitSubRule(385);}

					}
					break;

			}
			} finally {dbg.exitSubRule(386);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1211, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation_exp"



	// $ANTLR start "less_selector_interpolation"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1213:1: less_selector_interpolation : AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE ;
	public final void less_selector_interpolation() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_selector_interpolation");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1213, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1214:5: ( AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1215:5: AT_SIGN LBRACE ( ws )? IDENT ( ws )? RBRACE
			{
			dbg.location(1215,5);
			match(input,AT_SIGN,FOLLOW_AT_SIGN_in_less_selector_interpolation8338); if (state.failed) return;dbg.location(1215,13);
			match(input,LBRACE,FOLLOW_LBRACE_in_less_selector_interpolation8340); if (state.failed) return;dbg.location(1215,20);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1215:20: ( ws )?
			int alt387=2;
			try { dbg.enterSubRule(387);
			try { dbg.enterDecision(387, decisionCanBacktrack[387]);

			int LA387_0 = input.LA(1);
			if ( (LA387_0==COMMENT||LA387_0==NL||LA387_0==WS) ) {
				alt387=1;
			}
			} finally {dbg.exitDecision(387);}

			switch (alt387) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1215:20: ws
					{
					dbg.location(1215,20);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation8342);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(387);}
			dbg.location(1215,24);
			match(input,IDENT,FOLLOW_IDENT_in_less_selector_interpolation8345); if (state.failed) return;dbg.location(1215,30);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1215:30: ( ws )?
			int alt388=2;
			try { dbg.enterSubRule(388);
			try { dbg.enterDecision(388, decisionCanBacktrack[388]);

			int LA388_0 = input.LA(1);
			if ( (LA388_0==COMMENT||LA388_0==NL||LA388_0==WS) ) {
				alt388=1;
			}
			} finally {dbg.exitDecision(388);}

			switch (alt388) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1215:30: ws
					{
					dbg.location(1215,30);
					pushFollow(FOLLOW_ws_in_less_selector_interpolation8347);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(388);}
			dbg.location(1215,34);
			match(input,RBRACE,FOLLOW_RBRACE_in_less_selector_interpolation8350); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1216, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_selector_interpolation");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_selector_interpolation"



	// $ANTLR start "sass_selector_interpolation_exp"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1219:1: sass_selector_interpolation_exp : ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? ;
	public final void sass_selector_interpolation_exp() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_selector_interpolation_exp");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1219, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1219:33: ( ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1220:5: ( IDENT | MINUS )? sass_interpolation_expression_var ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			{
			dbg.location(1220,5);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1220:5: ( IDENT | MINUS )?
			int alt389=2;
			try { dbg.enterSubRule(389);
			try { dbg.enterDecision(389, decisionCanBacktrack[389]);

			int LA389_0 = input.LA(1);
			if ( (LA389_0==IDENT||LA389_0==MINUS) ) {
				alt389=1;
			}
			} finally {dbg.exitDecision(389);}

			switch (alt389) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
					{
					dbg.location(1220,5);
					if ( input.LA(1)==IDENT||input.LA(1)==MINUS ) {
						input.consume();
						state.errorRecovery=false;
						state.failed=false;
					}
					else {
						if (state.backtracking>0) {state.failed=true; return;}
						MismatchedSetException mse = new MismatchedSetException(null,input);
						dbg.recognitionException(mse);
						throw mse;
					}
					}
					break;

			}
			} finally {dbg.exitSubRule(389);}
			dbg.location(1220,22);
			pushFollow(FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp8377);
			sass_interpolation_expression_var();
			state._fsp--;
			if (state.failed) return;dbg.location(1220,56);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1220:56: ( sass_selector_interpolation_exp | ( IDENT | MINUS | DIMENSION | LENGTH )+ )?
			int alt391=3;
			try { dbg.enterSubRule(391);
			try { dbg.enterDecision(391, decisionCanBacktrack[391]);

			switch ( input.LA(1) ) {
				case IDENT:
				case MINUS:
					{
					int LA391_1 = input.LA(2);
					if ( (LA391_1==HASH_SYMBOL) ) {
						int LA391_6 = input.LA(3);
						if ( (LA391_6==LBRACE) ) {
							alt391=1;
						}
						else if ( (LA391_6==AT_SIGN||LA391_6==IDENT||LA391_6==MINUS||LA391_6==NAME) ) {
							alt391=2;
						}
					}
					else if ( ((LA391_1 >= COLON && LA391_1 <= COMMENT)||(LA391_1 >= DCOLON && LA391_1 <= DOT)||LA391_1==GREATER||LA391_1==HASH||LA391_1==IDENT||(LA391_1 >= LBRACE && LA391_1 <= LBRACKET)||LA391_1==LENGTH||LA391_1==LESS_AND||LA391_1==MINUS||LA391_1==NL||LA391_1==PLUS||LA391_1==RBRACE||LA391_1==RPAREN||LA391_1==SASS_EXTEND_ONLY_SELECTOR||LA391_1==SEMI||LA391_1==TILDE||LA391_1==WS) ) {
						alt391=2;
					}
					}
					break;
				case HASH_SYMBOL:
					{
					int LA391_2 = input.LA(2);
					if ( (LA391_2==LBRACE) ) {
						alt391=1;
					}
					}
					break;
				case DIMENSION:
					{
					int LA391_3 = input.LA(2);
					if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
						alt391=2;
					}
					}
					break;
				case LENGTH:
					{
					alt391=2;
					}
					break;
			}
			} finally {dbg.exitDecision(391);}

			switch (alt391) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1220:57: sass_selector_interpolation_exp
					{
					dbg.location(1220,57);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp8380);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1220:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					{
					dbg.location(1220,91);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1220:91: ( IDENT | MINUS | DIMENSION | LENGTH )+
					int cnt390=0;
					try { dbg.enterSubRule(390);

					loop390:
					while (true) {
						int alt390=2;
						try { dbg.enterDecision(390, decisionCanBacktrack[390]);

						int LA390_0 = input.LA(1);
						if ( (LA390_0==DIMENSION) ) {
							int LA390_2 = input.LA(2);
							if ( (!(evalPredicate(evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")"),""))) ) {
								alt390=1;
							}

						}
						else if ( (LA390_0==IDENT||LA390_0==LENGTH||LA390_0==MINUS) ) {
							alt390=1;
						}

						} finally {dbg.exitDecision(390);}

						switch (alt390) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
							{
							dbg.location(1220,91);
							if ( input.LA(1)==DIMENSION||input.LA(1)==IDENT||input.LA(1)==LENGTH||input.LA(1)==MINUS ) {
								input.consume();
								state.errorRecovery=false;
								state.failed=false;
							}
							else {
								if (state.backtracking>0) {state.failed=true; return;}
								MismatchedSetException mse = new MismatchedSetException(null,input);
								dbg.recognitionException(mse);
								throw mse;
							}
							}
							break;

						default :
							if ( cnt390 >= 1 ) break loop390;
							if (state.backtracking>0) {state.failed=true; return;}
							EarlyExitException eee = new EarlyExitException(390, input);
							dbg.recognitionException(eee);

							throw eee;
						}
						cnt390++;
					}
					} finally {dbg.exitSubRule(390);}

					}
					break;

			}
			} finally {dbg.exitSubRule(391);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1221, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_selector_interpolation_exp");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_selector_interpolation_exp"



	// $ANTLR start "sass_interpolation_expression_var"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1223:1: sass_interpolation_expression_var : HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE ;
	public final void sass_interpolation_expression_var() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_interpolation_expression_var");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1223, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1224:5: ( HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1225:9: HASH_SYMBOL LBRACE ( WS )? cp_expression ( WS )? RBRACE
			{
			dbg.location(1225,9);
			match(input,HASH_SYMBOL,FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var8427); if (state.failed) return;dbg.location(1225,21);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_interpolation_expression_var8429); if (state.failed) return;dbg.location(1225,28);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1225:28: ( WS )?
			int alt392=2;
			try { dbg.enterSubRule(392);
			try { dbg.enterDecision(392, decisionCanBacktrack[392]);

			int LA392_0 = input.LA(1);
			if ( (LA392_0==WS) ) {
				alt392=1;
			}
			} finally {dbg.exitDecision(392);}

			switch (alt392) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1225:28: WS
					{
					dbg.location(1225,28);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var8431); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(392);}
			dbg.location(1225,32);
			pushFollow(FOLLOW_cp_expression_in_sass_interpolation_expression_var8434);
			cp_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1225,46);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1225:46: ( WS )?
			int alt393=2;
			try { dbg.enterSubRule(393);
			try { dbg.enterDecision(393, decisionCanBacktrack[393]);

			int LA393_0 = input.LA(1);
			if ( (LA393_0==WS) ) {
				alt393=1;
			}
			} finally {dbg.exitDecision(393);}

			switch (alt393) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1225:46: WS
					{
					dbg.location(1225,46);
					match(input,WS,FOLLOW_WS_in_sass_interpolation_expression_var8436); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(393);}
			dbg.location(1225,50);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_interpolation_expression_var8439); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1226, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_interpolation_expression_var");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_interpolation_expression_var"



	// $ANTLR start "sass_nested_properties"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1246:1: sass_nested_properties : property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE ;
	public final void sass_nested_properties() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_nested_properties");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1246, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1247:5: ( property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:5: property ( ws )? COLON ( ws )? ( propertyValue ( ws )? )? LBRACE ( ws )? syncToFollow ( declarations )? RBRACE
			{
			dbg.location(1248,5);
			pushFollow(FOLLOW_property_in_sass_nested_properties8479);
			property();
			state._fsp--;
			if (state.failed) return;dbg.location(1248,14);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:14: ( ws )?
			int alt394=2;
			try { dbg.enterSubRule(394);
			try { dbg.enterDecision(394, decisionCanBacktrack[394]);

			int LA394_0 = input.LA(1);
			if ( (LA394_0==COMMENT||LA394_0==NL||LA394_0==WS) ) {
				alt394=1;
			}
			} finally {dbg.exitDecision(394);}

			switch (alt394) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:14: ws
					{
					dbg.location(1248,14);
					pushFollow(FOLLOW_ws_in_sass_nested_properties8481);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(394);}
			dbg.location(1248,18);
			match(input,COLON,FOLLOW_COLON_in_sass_nested_properties8484); if (state.failed) return;dbg.location(1248,24);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:24: ( ws )?
			int alt395=2;
			try { dbg.enterSubRule(395);
			try { dbg.enterDecision(395, decisionCanBacktrack[395]);

			int LA395_0 = input.LA(1);
			if ( (LA395_0==COMMENT||LA395_0==NL||LA395_0==WS) ) {
				alt395=1;
			}
			} finally {dbg.exitDecision(395);}

			switch (alt395) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:24: ws
					{
					dbg.location(1248,24);
					pushFollow(FOLLOW_ws_in_sass_nested_properties8486);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(395);}
			dbg.location(1248,28);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:28: ( propertyValue ( ws )? )?
			int alt397=2;
			try { dbg.enterSubRule(397);
			try { dbg.enterDecision(397, decisionCanBacktrack[397]);

			int LA397_0 = input.LA(1);
			if ( ((LA397_0 >= ANGLE && LA397_0 <= AT_SIGN)||(LA397_0 >= BOTTOMCENTER_SYM && LA397_0 <= BOTTOMRIGHT_SYM)||LA397_0==CHARSET_SYM||LA397_0==COUNTER_STYLE_SYM||LA397_0==DIMENSION||LA397_0==EMS||LA397_0==EXS||(LA397_0 >= FONT_FACE_SYM && LA397_0 <= FREQ)||LA397_0==GEN||(LA397_0 >= HASH && LA397_0 <= HASH_SYMBOL)||LA397_0==IDENT||LA397_0==IMPORT_SYM||(LA397_0 >= LEFTBOTTOM_SYM && LA397_0 <= LENGTH)||(LA397_0 >= LESS_AND && LA397_0 <= LESS_JS_STRING)||(LA397_0 >= MEDIA_SYM && LA397_0 <= MOZ_DOCUMENT_SYM)||LA397_0==NAMESPACE_SYM||LA397_0==NUMBER||(LA397_0 >= PAGE_SYM && LA397_0 <= PERCENTAGE_SYMBOL)||LA397_0==PLUS||(LA397_0 >= REM && LA397_0 <= RIGHTTOP_SYM)||(LA397_0 >= SASS_AT_ROOT && LA397_0 <= SASS_DEBUG)||(LA397_0 >= SASS_EACH && LA397_0 <= SASS_ELSE)||LA397_0==SASS_EXTEND||(LA397_0 >= SASS_FOR && LA397_0 <= SASS_FUNCTION)||(LA397_0 >= SASS_IF && LA397_0 <= SASS_MIXIN)||(LA397_0 >= SASS_RETURN && LA397_0 <= SASS_WHILE)||LA397_0==STRING||(LA397_0 >= TILDE && LA397_0 <= TOPRIGHT_SYM)||LA397_0==URI||LA397_0==VARIABLE||LA397_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt397=1;
			}
			} finally {dbg.exitDecision(397);}

			switch (alt397) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:29: propertyValue ( ws )?
					{
					dbg.location(1248,29);
					pushFollow(FOLLOW_propertyValue_in_sass_nested_properties8490);
					propertyValue();
					state._fsp--;
					if (state.failed) return;dbg.location(1248,43);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:43: ( ws )?
					int alt396=2;
					try { dbg.enterSubRule(396);
					try { dbg.enterDecision(396, decisionCanBacktrack[396]);

					int LA396_0 = input.LA(1);
					if ( (LA396_0==COMMENT||LA396_0==NL||LA396_0==WS) ) {
						alt396=1;
					}
					} finally {dbg.exitDecision(396);}

					switch (alt396) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:43: ws
							{
							dbg.location(1248,43);
							pushFollow(FOLLOW_ws_in_sass_nested_properties8492);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(396);}

					}
					break;

			}
			} finally {dbg.exitSubRule(397);}
			dbg.location(1248,49);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_nested_properties8497); if (state.failed) return;dbg.location(1248,56);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:56: ( ws )?
			int alt398=2;
			try { dbg.enterSubRule(398);
			try { dbg.enterDecision(398, decisionCanBacktrack[398]);

			int LA398_0 = input.LA(1);
			if ( (LA398_0==COMMENT||LA398_0==NL||LA398_0==WS) ) {
				alt398=1;
			}
			} finally {dbg.exitDecision(398);}

			switch (alt398) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:56: ws
					{
					dbg.location(1248,56);
					pushFollow(FOLLOW_ws_in_sass_nested_properties8499);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(398);}
			dbg.location(1248,60);
			pushFollow(FOLLOW_syncToFollow_in_sass_nested_properties8502);
			syncToFollow();
			state._fsp--;
			if (state.failed) return;dbg.location(1248,73);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:73: ( declarations )?
			int alt399=2;
			try { dbg.enterSubRule(399);
			try { dbg.enterDecision(399, decisionCanBacktrack[399]);

			int LA399_0 = input.LA(1);
			if ( ((LA399_0 >= AT_IDENT && LA399_0 <= AT_SIGN)||(LA399_0 >= BOTTOMCENTER_SYM && LA399_0 <= BOTTOMRIGHT_SYM)||(LA399_0 >= CHARSET_SYM && LA399_0 <= COLON)||LA399_0==COUNTER_STYLE_SYM||(LA399_0 >= DCOLON && LA399_0 <= DOT)||LA399_0==FONT_FACE_SYM||(LA399_0 >= GEN && LA399_0 <= GREATER)||(LA399_0 >= HASH && LA399_0 <= HASH_SYMBOL)||LA399_0==IDENT||LA399_0==IMPORT_SYM||(LA399_0 >= LBRACKET && LA399_0 <= LEFTTOP_SYM)||LA399_0==LESS_AND||(LA399_0 >= MEDIA_SYM && LA399_0 <= MOZ_DOCUMENT_SYM)||LA399_0==NAMESPACE_SYM||LA399_0==PAGE_SYM||(LA399_0 >= PIPE && LA399_0 <= PLUS)||(LA399_0 >= RIGHTBOTTOM_SYM && LA399_0 <= RIGHTTOP_SYM)||(LA399_0 >= SASS_AT_ROOT && LA399_0 <= SASS_DEBUG)||(LA399_0 >= SASS_EACH && LA399_0 <= SASS_ELSE)||(LA399_0 >= SASS_ERROR && LA399_0 <= SASS_FUNCTION)||(LA399_0 >= SASS_IF && LA399_0 <= SASS_MIXIN)||(LA399_0 >= SASS_RETURN && LA399_0 <= SEMI)||LA399_0==STAR||LA399_0==SUPPORTS_SYM||LA399_0==TILDE||(LA399_0 >= TOPCENTER_SYM && LA399_0 <= TOPRIGHT_SYM)||LA399_0==VARIABLE||LA399_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt399=1;
			}
			} finally {dbg.exitDecision(399);}

			switch (alt399) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1248:73: declarations
					{
					dbg.location(1248,73);
					pushFollow(FOLLOW_declarations_in_sass_nested_properties8504);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(399);}
			dbg.location(1248,87);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_nested_properties8507); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1249, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_nested_properties");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_nested_properties"



	// $ANTLR start "sass_extend"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1251:1: sass_extend : SASS_EXTEND ws simpleSelectorSequence ( ws SASS_OPTIONAL )? ;
	public final void sass_extend() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1251, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1252:5: ( SASS_EXTEND ws simpleSelectorSequence ( ws SASS_OPTIONAL )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1253:5: SASS_EXTEND ws simpleSelectorSequence ( ws SASS_OPTIONAL )?
			{
			dbg.location(1253,5);
			match(input,SASS_EXTEND,FOLLOW_SASS_EXTEND_in_sass_extend8528); if (state.failed) return;dbg.location(1253,17);
			pushFollow(FOLLOW_ws_in_sass_extend8530);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1253,20);
			pushFollow(FOLLOW_simpleSelectorSequence_in_sass_extend8532);
			simpleSelectorSequence();
			state._fsp--;
			if (state.failed) return;dbg.location(1253,43);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1253:43: ( ws SASS_OPTIONAL )?
			int alt400=2;
			try { dbg.enterSubRule(400);
			try { dbg.enterDecision(400, decisionCanBacktrack[400]);

			try {
				isCyclicDecision = true;
				alt400 = dfa400.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(400);}

			switch (alt400) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1253:44: ws SASS_OPTIONAL
					{
					dbg.location(1253,44);
					pushFollow(FOLLOW_ws_in_sass_extend8535);
					ws();
					state._fsp--;
					if (state.failed) return;dbg.location(1253,47);
					match(input,SASS_OPTIONAL,FOLLOW_SASS_OPTIONAL_in_sass_extend8537); if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(400);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1254, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend"



	// $ANTLR start "sass_extend_only_selector"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1256:1: sass_extend_only_selector : SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? ;
	public final void sass_extend_only_selector() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_extend_only_selector");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1256, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1257:5: ( SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1258:5: SASS_EXTEND_ONLY_SELECTOR ( sass_selector_interpolation_exp )?
			{
			dbg.location(1258,5);
			match(input,SASS_EXTEND_ONLY_SELECTOR,FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8560); if (state.failed) return;dbg.location(1258,31);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1258:31: ( sass_selector_interpolation_exp )?
			int alt401=2;
			try { dbg.enterSubRule(401);
			try { dbg.enterDecision(401, decisionCanBacktrack[401]);

			int LA401_0 = input.LA(1);
			if ( (LA401_0==IDENT||LA401_0==MINUS) ) {
				alt401=1;
			}
			else if ( (LA401_0==HASH_SYMBOL) ) {
				int LA401_2 = input.LA(2);
				if ( (LA401_2==LBRACE) ) {
					alt401=1;
				}
			}
			} finally {dbg.exitDecision(401);}

			switch (alt401) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1258:31: sass_selector_interpolation_exp
					{
					dbg.location(1258,31);
					pushFollow(FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector8562);
					sass_selector_interpolation_exp();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(401);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1259, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_extend_only_selector");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_extend_only_selector"



	// $ANTLR start "sass_debug"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1261:1: sass_debug : ( SASS_DEBUG | SASS_WARN ) ws cp_expression ;
	public final void sass_debug() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_debug");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1261, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1262:5: ( ( SASS_DEBUG | SASS_WARN ) ws cp_expression )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1263:5: ( SASS_DEBUG | SASS_WARN ) ws cp_expression
			{
			dbg.location(1263,5);
			if ( input.LA(1)==SASS_DEBUG||input.LA(1)==SASS_WARN ) {
				input.consume();
				state.errorRecovery=false;
				state.failed=false;
			}
			else {
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				dbg.recognitionException(mse);
				throw mse;
			}dbg.location(1263,32);
			pushFollow(FOLLOW_ws_in_sass_debug8594);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1263,35);
			pushFollow(FOLLOW_cp_expression_in_sass_debug8596);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1264, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_debug");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_debug"



	// $ANTLR start "sass_error"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1266:1: sass_error : SASS_ERROR ws STRING ;
	public final void sass_error() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_error");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1266, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1267:5: ( SASS_ERROR ws STRING )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1268:5: SASS_ERROR ws STRING
			{
			dbg.location(1268,5);
			match(input,SASS_ERROR,FOLLOW_SASS_ERROR_in_sass_error8617); if (state.failed) return;dbg.location(1268,16);
			pushFollow(FOLLOW_ws_in_sass_error8619);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1268,19);
			match(input,STRING,FOLLOW_STRING_in_sass_error8621); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1269, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_error");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_error"



	// $ANTLR start "sass_control"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1271:1: sass_control : ( sass_if | sass_for | sass_each | sass_while );
	public final void sass_control() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1271, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1272:5: ( sass_if | sass_for | sass_each | sass_while )
			int alt402=4;
			try { dbg.enterDecision(402, decisionCanBacktrack[402]);

			switch ( input.LA(1) ) {
			case SASS_IF:
				{
				alt402=1;
				}
				break;
			case SASS_FOR:
				{
				alt402=2;
				}
				break;
			case SASS_EACH:
				{
				alt402=3;
				}
				break;
			case SASS_WHILE:
				{
				alt402=4;
				}
				break;
			default:
				if (state.backtracking>0) {state.failed=true; return;}
				NoViableAltException nvae =
					new NoViableAltException("", 402, 0, input);
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(402);}

			switch (alt402) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1273:5: sass_if
					{
					dbg.location(1273,5);
					pushFollow(FOLLOW_sass_if_in_sass_control8642);
					sass_if();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1273:15: sass_for
					{
					dbg.location(1273,15);
					pushFollow(FOLLOW_sass_for_in_sass_control8646);
					sass_for();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 3 :
					dbg.enterAlt(3);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1273:26: sass_each
					{
					dbg.location(1273,26);
					pushFollow(FOLLOW_sass_each_in_sass_control8650);
					sass_each();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 4 :
					dbg.enterAlt(4);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1273:38: sass_while
					{
					dbg.location(1273,38);
					pushFollow(FOLLOW_sass_while_in_sass_control8654);
					sass_while();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1274, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control"



	// $ANTLR start "sass_if"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1276:1: sass_if : SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? ;
	public final void sass_if() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_if");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1276, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1277:5: ( SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:5: SASS_IF ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
			{
			dbg.location(1278,5);
			match(input,SASS_IF,FOLLOW_SASS_IF_in_sass_if8675); if (state.failed) return;dbg.location(1278,13);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:13: ( ws )?
			int alt403=2;
			try { dbg.enterSubRule(403);
			try { dbg.enterDecision(403, decisionCanBacktrack[403]);

			int LA403_0 = input.LA(1);
			if ( (LA403_0==COMMENT||LA403_0==NL||LA403_0==WS) ) {
				alt403=1;
			}
			} finally {dbg.exitDecision(403);}

			switch (alt403) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:13: ws
					{
					dbg.location(1278,13);
					pushFollow(FOLLOW_ws_in_sass_if8677);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(403);}
			dbg.location(1278,17);
			pushFollow(FOLLOW_sass_control_expression_in_sass_if8680);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1278,41);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:41: ( ws )?
			int alt404=2;
			try { dbg.enterSubRule(404);
			try { dbg.enterDecision(404, decisionCanBacktrack[404]);

			int LA404_0 = input.LA(1);
			if ( (LA404_0==COMMENT||LA404_0==NL||LA404_0==WS) ) {
				alt404=1;
			}
			} finally {dbg.exitDecision(404);}

			switch (alt404) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:41: ws
					{
					dbg.location(1278,41);
					pushFollow(FOLLOW_ws_in_sass_if8682);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(404);}
			dbg.location(1278,45);
			pushFollow(FOLLOW_sass_control_block_in_sass_if8685);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;dbg.location(1278,64);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:64: ( ( ws )? sass_else )?
			int alt406=2;
			try { dbg.enterSubRule(406);
			try { dbg.enterDecision(406, decisionCanBacktrack[406]);

			try {
				isCyclicDecision = true;
				alt406 = dfa406.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(406);}

			switch (alt406) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:65: ( ws )? sass_else
					{
					dbg.location(1278,65);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:65: ( ws )?
					int alt405=2;
					try { dbg.enterSubRule(405);
					try { dbg.enterDecision(405, decisionCanBacktrack[405]);

					int LA405_0 = input.LA(1);
					if ( (LA405_0==COMMENT||LA405_0==NL||LA405_0==WS) ) {
						alt405=1;
					}
					} finally {dbg.exitDecision(405);}

					switch (alt405) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1278:65: ws
							{
							dbg.location(1278,65);
							pushFollow(FOLLOW_ws_in_sass_if8688);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(405);}
					dbg.location(1278,69);
					pushFollow(FOLLOW_sass_else_in_sass_if8691);
					sass_else();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(406);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1279, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_if");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_if"



	// $ANTLR start "sass_else"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1281:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );
	public final void sass_else() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_else");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1281, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1282:5: ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? )
			int alt414=2;
			try { dbg.enterDecision(414, decisionCanBacktrack[414]);

			try {
				isCyclicDecision = true;
				alt414 = dfa414.predict(input);
			}
			catch (NoViableAltException nvae) {
				dbg.recognitionException(nvae);
				throw nvae;
			}
			} finally {dbg.exitDecision(414);}

			switch (alt414) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1283:5: SASS_ELSE ( ws )? sass_control_block
					{
					dbg.location(1283,5);
					match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8714); if (state.failed) return;dbg.location(1283,15);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1283:15: ( ws )?
					int alt407=2;
					try { dbg.enterSubRule(407);
					try { dbg.enterDecision(407, decisionCanBacktrack[407]);

					int LA407_0 = input.LA(1);
					if ( (LA407_0==COMMENT||LA407_0==NL||LA407_0==WS) ) {
						alt407=1;
					}
					} finally {dbg.exitDecision(407);}

					switch (alt407) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1283:15: ws
							{
							dbg.location(1283,15);
							pushFollow(FOLLOW_ws_in_sass_else8716);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(407);}
					dbg.location(1283,19);
					pushFollow(FOLLOW_sass_control_block_in_sass_else8719);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;
					}
					break;
				case 2 :
					dbg.enterAlt(2);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )?
					{
					dbg.location(1285,5);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:5: ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF )
					int alt409=2;
					try { dbg.enterSubRule(409);
					try { dbg.enterDecision(409, decisionCanBacktrack[409]);

					int LA409_0 = input.LA(1);
					if ( (LA409_0==SASS_ELSE) ) {
						alt409=1;
					}
					else if ( (LA409_0==SASS_ELSEIF) ) {
						alt409=2;
					}

					else {
						if (state.backtracking>0) {state.failed=true; return;}
						NoViableAltException nvae =
							new NoViableAltException("", 409, 0, input);
						dbg.recognitionException(nvae);
						throw nvae;
					}

					} finally {dbg.exitDecision(409);}

					switch (alt409) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							{
							dbg.location(1285,6);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:6: ( SASS_ELSE ( ws )? {...}? IDENT )
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:7: SASS_ELSE ( ws )? {...}? IDENT
							{
							dbg.location(1285,7);
							match(input,SASS_ELSE,FOLLOW_SASS_ELSE_in_sass_else8733); if (state.failed) return;dbg.location(1285,17);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:17: ( ws )?
							int alt408=2;
							try { dbg.enterSubRule(408);
							try { dbg.enterDecision(408, decisionCanBacktrack[408]);

							int LA408_0 = input.LA(1);
							if ( (LA408_0==COMMENT||LA408_0==NL||LA408_0==WS) ) {
								alt408=1;
							}
							} finally {dbg.exitDecision(408);}

							switch (alt408) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:17: ws
									{
									dbg.location(1285,17);
									pushFollow(FOLLOW_ws_in_sass_else8735);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(408);}
							dbg.location(1285,21);
							if ( !(evalPredicate(tokenNameEquals("if"),"tokenNameEquals(\"if\")")) ) {
								if (state.backtracking>0) {state.failed=true; return;}
								throw new FailedPredicateException(input, "sass_else", "tokenNameEquals(\"if\")");
							}dbg.location(1285,46);
							match(input,IDENT,FOLLOW_IDENT_in_sass_else8740); if (state.failed) return;
							}

							}
							break;
						case 2 :
							dbg.enterAlt(2);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:64: SASS_ELSEIF
							{
							dbg.location(1285,64);
							match(input,SASS_ELSEIF,FOLLOW_SASS_ELSEIF_in_sass_else8747); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(409);}
					dbg.location(1285,77);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:77: ( ws )?
					int alt410=2;
					try { dbg.enterSubRule(410);
					try { dbg.enterDecision(410, decisionCanBacktrack[410]);

					int LA410_0 = input.LA(1);
					if ( (LA410_0==COMMENT||LA410_0==NL||LA410_0==WS) ) {
						alt410=1;
					}
					} finally {dbg.exitDecision(410);}

					switch (alt410) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:77: ws
							{
							dbg.location(1285,77);
							pushFollow(FOLLOW_ws_in_sass_else8750);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(410);}
					dbg.location(1285,81);
					pushFollow(FOLLOW_sass_control_expression_in_sass_else8753);
					sass_control_expression();
					state._fsp--;
					if (state.failed) return;dbg.location(1285,105);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:105: ( ws )?
					int alt411=2;
					try { dbg.enterSubRule(411);
					try { dbg.enterDecision(411, decisionCanBacktrack[411]);

					int LA411_0 = input.LA(1);
					if ( (LA411_0==COMMENT||LA411_0==NL||LA411_0==WS) ) {
						alt411=1;
					}
					} finally {dbg.exitDecision(411);}

					switch (alt411) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:105: ws
							{
							dbg.location(1285,105);
							pushFollow(FOLLOW_ws_in_sass_else8755);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(411);}
					dbg.location(1285,109);
					pushFollow(FOLLOW_sass_control_block_in_sass_else8758);
					sass_control_block();
					state._fsp--;
					if (state.failed) return;dbg.location(1285,128);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:128: ( ( ws )? sass_else )?
					int alt413=2;
					try { dbg.enterSubRule(413);
					try { dbg.enterDecision(413, decisionCanBacktrack[413]);

					try {
						isCyclicDecision = true;
						alt413 = dfa413.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(413);}

					switch (alt413) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:129: ( ws )? sass_else
							{
							dbg.location(1285,129);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:129: ( ws )?
							int alt412=2;
							try { dbg.enterSubRule(412);
							try { dbg.enterDecision(412, decisionCanBacktrack[412]);

							int LA412_0 = input.LA(1);
							if ( (LA412_0==COMMENT||LA412_0==NL||LA412_0==WS) ) {
								alt412=1;
							}
							} finally {dbg.exitDecision(412);}

							switch (alt412) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1285:129: ws
									{
									dbg.location(1285,129);
									pushFollow(FOLLOW_ws_in_sass_else8761);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(412);}
							dbg.location(1285,133);
							pushFollow(FOLLOW_sass_else_in_sass_else8764);
							sass_else();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(413);}

					}
					break;

			}
		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1286, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_else");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_else"



	// $ANTLR start "sass_control_expression"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1288:1: sass_control_expression : cp_expression ;
	public final void sass_control_expression() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_expression");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1288, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1289:5: ( cp_expression )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1290:5: cp_expression
			{
			dbg.location(1290,5);
			pushFollow(FOLLOW_cp_expression_in_sass_control_expression8787);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1291, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_expression");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_expression"



	// $ANTLR start "sass_for"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1293:1: sass_for : SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block ;
	public final void sass_for() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_for");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1293, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1294:5: ( SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1295:5: SASS_FOR ws cp_variable ws {...}? IDENT ws cp_math_expression ws {...}? IDENT ws cp_math_expression ( ws )? sass_control_block
			{
			dbg.location(1295,5);
			match(input,SASS_FOR,FOLLOW_SASS_FOR_in_sass_for8808); if (state.failed) return;dbg.location(1295,14);
			pushFollow(FOLLOW_ws_in_sass_for8810);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,17);
			pushFollow(FOLLOW_cp_variable_in_sass_for8812);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,29);
			pushFollow(FOLLOW_ws_in_sass_for8814);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,32);
			if ( !(evalPredicate(tokenNameEquals("from"),"tokenNameEquals(\"from\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"from\")");
			}dbg.location(1295,59);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for8818); if (state.failed) return;dbg.location(1295,74);
			pushFollow(FOLLOW_ws_in_sass_for8822);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,77);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for8824);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,96);
			pushFollow(FOLLOW_ws_in_sass_for8826);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,99);
			if ( !(evalPredicate(tokenNameEquals("to")|tokenNameEquals("through"),"tokenNameEquals(\"to\")|tokenNameEquals(\"through\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_for", "tokenNameEquals(\"to\")|tokenNameEquals(\"through\")");
			}dbg.location(1295,151);
			match(input,IDENT,FOLLOW_IDENT_in_sass_for8830); if (state.failed) return;dbg.location(1295,173);
			pushFollow(FOLLOW_ws_in_sass_for8834);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,176);
			pushFollow(FOLLOW_cp_math_expression_in_sass_for8836);
			cp_math_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1295,195);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1295:195: ( ws )?
			int alt415=2;
			try { dbg.enterSubRule(415);
			try { dbg.enterDecision(415, decisionCanBacktrack[415]);

			int LA415_0 = input.LA(1);
			if ( (LA415_0==COMMENT||LA415_0==NL||LA415_0==WS) ) {
				alt415=1;
			}
			} finally {dbg.exitDecision(415);}

			switch (alt415) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1295:195: ws
					{
					dbg.location(1295,195);
					pushFollow(FOLLOW_ws_in_sass_for8838);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(415);}
			dbg.location(1295,199);
			pushFollow(FOLLOW_sass_control_block_in_sass_for8841);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1296, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_for");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_for"



	// $ANTLR start "sass_each"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1298:1: sass_each : SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block ;
	public final void sass_each() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1298, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1299:5: ( SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:5: SASS_EACH ws sass_each_variables ws {...}? IDENT ws ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+ sass_control_block
			{
			dbg.location(1300,5);
			match(input,SASS_EACH,FOLLOW_SASS_EACH_in_sass_each8862); if (state.failed) return;dbg.location(1300,15);
			pushFollow(FOLLOW_ws_in_sass_each8864);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1300,18);
			pushFollow(FOLLOW_sass_each_variables_in_sass_each8866);
			sass_each_variables();
			state._fsp--;
			if (state.failed) return;dbg.location(1300,38);
			pushFollow(FOLLOW_ws_in_sass_each8868);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1300,41);
			if ( !(evalPredicate(tokenNameEquals("in"),"tokenNameEquals(\"in\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "sass_each", "tokenNameEquals(\"in\")");
			}dbg.location(1300,66);
			match(input,IDENT,FOLLOW_IDENT_in_sass_each8872); if (state.failed) return;dbg.location(1300,79);
			pushFollow(FOLLOW_ws_in_sass_each8876);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1300,82);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:82: ( cp_expression_list ( ( ws )? COMMA )? ( ws )? )+
			int cnt419=0;
			try { dbg.enterSubRule(419);

			loop419:
			while (true) {
				int alt419=2;
				try { dbg.enterDecision(419, decisionCanBacktrack[419]);

				int LA419_0 = input.LA(1);
				if ( (LA419_0==LBRACE) ) {
					int LA419_1 = input.LA(2);
					if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {
						alt419=1;
					}

				}
				else if ( ((LA419_0 >= ANGLE && LA419_0 <= AT_SIGN)||(LA419_0 >= BOTTOMCENTER_SYM && LA419_0 <= BOTTOMRIGHT_SYM)||LA419_0==CHARSET_SYM||LA419_0==COUNTER_STYLE_SYM||LA419_0==DIMENSION||LA419_0==EMS||LA419_0==EXS||(LA419_0 >= FONT_FACE_SYM && LA419_0 <= FREQ)||LA419_0==GEN||(LA419_0 >= HASH && LA419_0 <= HASH_SYMBOL)||(LA419_0 >= IDENT && LA419_0 <= IMPORT_SYM)||(LA419_0 >= LEFTBOTTOM_SYM && LA419_0 <= LENGTH)||(LA419_0 >= LESS_AND && LA419_0 <= LESS_JS_STRING)||LA419_0==LPAREN||(LA419_0 >= MEDIA_SYM && LA419_0 <= MOZ_DOCUMENT_SYM)||LA419_0==NAMESPACE_SYM||(LA419_0 >= NOT && LA419_0 <= NUMBER)||(LA419_0 >= PAGE_SYM && LA419_0 <= PERCENTAGE_SYMBOL)||LA419_0==PLUS||(LA419_0 >= REM && LA419_0 <= RIGHTTOP_SYM)||(LA419_0 >= SASS_AT_ROOT && LA419_0 <= SASS_DEBUG)||(LA419_0 >= SASS_EACH && LA419_0 <= SASS_ELSE)||LA419_0==SASS_EXTEND||(LA419_0 >= SASS_FOR && LA419_0 <= SASS_FUNCTION)||(LA419_0 >= SASS_IF && LA419_0 <= SASS_MIXIN)||(LA419_0 >= SASS_RETURN && LA419_0 <= SASS_WHILE)||LA419_0==STRING||(LA419_0 >= TILDE && LA419_0 <= TOPRIGHT_SYM)||LA419_0==URI||LA419_0==VARIABLE||LA419_0==WEBKIT_KEYFRAMES_SYM) ) {
					alt419=1;
				}

				} finally {dbg.exitDecision(419);}

				switch (alt419) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:83: cp_expression_list ( ( ws )? COMMA )? ( ws )?
					{
					dbg.location(1300,83);
					pushFollow(FOLLOW_cp_expression_list_in_sass_each8879);
					cp_expression_list();
					state._fsp--;
					if (state.failed) return;dbg.location(1300,102);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:102: ( ( ws )? COMMA )?
					int alt417=2;
					try { dbg.enterSubRule(417);
					try { dbg.enterDecision(417, decisionCanBacktrack[417]);

					try {
						isCyclicDecision = true;
						alt417 = dfa417.predict(input);
					}
					catch (NoViableAltException nvae) {
						dbg.recognitionException(nvae);
						throw nvae;
					}
					} finally {dbg.exitDecision(417);}

					switch (alt417) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:103: ( ws )? COMMA
							{
							dbg.location(1300,103);
							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:103: ( ws )?
							int alt416=2;
							try { dbg.enterSubRule(416);
							try { dbg.enterDecision(416, decisionCanBacktrack[416]);

							int LA416_0 = input.LA(1);
							if ( (LA416_0==COMMENT||LA416_0==NL||LA416_0==WS) ) {
								alt416=1;
							}
							} finally {dbg.exitDecision(416);}

							switch (alt416) {
								case 1 :
									dbg.enterAlt(1);

									// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:103: ws
									{
									dbg.location(1300,103);
									pushFollow(FOLLOW_ws_in_sass_each8882);
									ws();
									state._fsp--;
									if (state.failed) return;
									}
									break;

							}
							} finally {dbg.exitSubRule(416);}
							dbg.location(1300,107);
							match(input,COMMA,FOLLOW_COMMA_in_sass_each8885); if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(417);}
					dbg.location(1300,115);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:115: ( ws )?
					int alt418=2;
					try { dbg.enterSubRule(418);
					try { dbg.enterDecision(418, decisionCanBacktrack[418]);

					int LA418_0 = input.LA(1);
					if ( (LA418_0==COMMENT||LA418_0==NL||LA418_0==WS) ) {
						alt418=1;
					}
					} finally {dbg.exitDecision(418);}

					switch (alt418) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1300:115: ws
							{
							dbg.location(1300,115);
							pushFollow(FOLLOW_ws_in_sass_each8889);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(418);}

					}
					break;

				default :
					if ( cnt419 >= 1 ) break loop419;
					if (state.backtracking>0) {state.failed=true; return;}
					EarlyExitException eee = new EarlyExitException(419, input);
					dbg.recognitionException(eee);

					throw eee;
				}
				cnt419++;
			}
			} finally {dbg.exitSubRule(419);}
			dbg.location(1300,122);
			pushFollow(FOLLOW_sass_control_block_in_sass_each8895);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1301, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each"



	// $ANTLR start "sass_each_variables"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1303:1: sass_each_variables : cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* ;
	public final void sass_each_variables() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_each_variables");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1303, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1304:5: ( cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )* )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:5: cp_variable ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			{
			dbg.location(1305,5);
			pushFollow(FOLLOW_cp_variable_in_sass_each_variables8916);
			cp_variable();
			state._fsp--;
			if (state.failed) return;dbg.location(1305,17);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*
			try { dbg.enterSubRule(422);

			loop422:
			while (true) {
				int alt422=2;
				try { dbg.enterDecision(422, decisionCanBacktrack[422]);

				try {
					isCyclicDecision = true;
					alt422 = dfa422.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(422);}

				switch (alt422) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:19: ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable
					{
					dbg.location(1305,33);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:33: ( ws )?
					int alt420=2;
					try { dbg.enterSubRule(420);
					try { dbg.enterDecision(420, decisionCanBacktrack[420]);

					int LA420_0 = input.LA(1);
					if ( (LA420_0==COMMENT||LA420_0==NL||LA420_0==WS) ) {
						alt420=1;
					}
					} finally {dbg.exitDecision(420);}

					switch (alt420) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:33: ws
							{
							dbg.location(1305,33);
							pushFollow(FOLLOW_ws_in_sass_each_variables8928);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(420);}
					dbg.location(1305,37);
					match(input,COMMA,FOLLOW_COMMA_in_sass_each_variables8931); if (state.failed) return;dbg.location(1305,43);
					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:43: ( ws )?
					int alt421=2;
					try { dbg.enterSubRule(421);
					try { dbg.enterDecision(421, decisionCanBacktrack[421]);

					int LA421_0 = input.LA(1);
					if ( (LA421_0==COMMENT||LA421_0==NL||LA421_0==WS) ) {
						alt421=1;
					}
					} finally {dbg.exitDecision(421);}

					switch (alt421) {
						case 1 :
							dbg.enterAlt(1);

							// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:43: ws
							{
							dbg.location(1305,43);
							pushFollow(FOLLOW_ws_in_sass_each_variables8933);
							ws();
							state._fsp--;
							if (state.failed) return;
							}
							break;

					}
					} finally {dbg.exitSubRule(421);}
					dbg.location(1305,47);
					pushFollow(FOLLOW_cp_variable_in_sass_each_variables8936);
					cp_variable();
					state._fsp--;
					if (state.failed) return;
					}
					break;

				default :
					break loop422;
				}
			}
			} finally {dbg.exitSubRule(422);}

			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1306, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_each_variables");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_each_variables"



	// $ANTLR start "sass_while"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1308:1: sass_while : SASS_WHILE ws sass_control_expression ( ws )? sass_control_block ;
	public final void sass_while() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_while");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1308, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1309:5: ( SASS_WHILE ws sass_control_expression ( ws )? sass_control_block )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1310:5: SASS_WHILE ws sass_control_expression ( ws )? sass_control_block
			{
			dbg.location(1310,5);
			match(input,SASS_WHILE,FOLLOW_SASS_WHILE_in_sass_while8961); if (state.failed) return;dbg.location(1310,16);
			pushFollow(FOLLOW_ws_in_sass_while8963);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1310,19);
			pushFollow(FOLLOW_sass_control_expression_in_sass_while8965);
			sass_control_expression();
			state._fsp--;
			if (state.failed) return;dbg.location(1310,43);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1310:43: ( ws )?
			int alt423=2;
			try { dbg.enterSubRule(423);
			try { dbg.enterDecision(423, decisionCanBacktrack[423]);

			int LA423_0 = input.LA(1);
			if ( (LA423_0==COMMENT||LA423_0==NL||LA423_0==WS) ) {
				alt423=1;
			}
			} finally {dbg.exitDecision(423);}

			switch (alt423) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1310:43: ws
					{
					dbg.location(1310,43);
					pushFollow(FOLLOW_ws_in_sass_while8967);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(423);}
			dbg.location(1310,47);
			pushFollow(FOLLOW_sass_control_block_in_sass_while8970);
			sass_control_block();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1311, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_while");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_while"



	// $ANTLR start "sass_control_block"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1313:1: sass_control_block : LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_control_block() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_control_block");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1313, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1314:5: ( LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1315:5: LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1315,5);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_control_block8991); if (state.failed) return;dbg.location(1315,12);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1315:12: ( ws )?
			int alt424=2;
			try { dbg.enterSubRule(424);
			try { dbg.enterDecision(424, decisionCanBacktrack[424]);

			int LA424_0 = input.LA(1);
			if ( (LA424_0==COMMENT||LA424_0==NL||LA424_0==WS) ) {
				alt424=1;
			}
			} finally {dbg.exitDecision(424);}

			switch (alt424) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1315:12: ws
					{
					dbg.location(1315,12);
					pushFollow(FOLLOW_ws_in_sass_control_block8993);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(424);}
			dbg.location(1315,16);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1315:16: ( declarations )?
			int alt425=2;
			try { dbg.enterSubRule(425);
			try { dbg.enterDecision(425, decisionCanBacktrack[425]);

			int LA425_0 = input.LA(1);
			if ( ((LA425_0 >= AT_IDENT && LA425_0 <= AT_SIGN)||(LA425_0 >= BOTTOMCENTER_SYM && LA425_0 <= BOTTOMRIGHT_SYM)||(LA425_0 >= CHARSET_SYM && LA425_0 <= COLON)||LA425_0==COUNTER_STYLE_SYM||(LA425_0 >= DCOLON && LA425_0 <= DOT)||LA425_0==FONT_FACE_SYM||(LA425_0 >= GEN && LA425_0 <= GREATER)||(LA425_0 >= HASH && LA425_0 <= HASH_SYMBOL)||LA425_0==IDENT||LA425_0==IMPORT_SYM||(LA425_0 >= LBRACKET && LA425_0 <= LEFTTOP_SYM)||LA425_0==LESS_AND||(LA425_0 >= MEDIA_SYM && LA425_0 <= MOZ_DOCUMENT_SYM)||LA425_0==NAMESPACE_SYM||LA425_0==PAGE_SYM||(LA425_0 >= PIPE && LA425_0 <= PLUS)||(LA425_0 >= RIGHTBOTTOM_SYM && LA425_0 <= RIGHTTOP_SYM)||(LA425_0 >= SASS_AT_ROOT && LA425_0 <= SASS_DEBUG)||(LA425_0 >= SASS_EACH && LA425_0 <= SASS_ELSE)||(LA425_0 >= SASS_ERROR && LA425_0 <= SASS_FUNCTION)||(LA425_0 >= SASS_IF && LA425_0 <= SASS_MIXIN)||(LA425_0 >= SASS_RETURN && LA425_0 <= SEMI)||LA425_0==STAR||LA425_0==SUPPORTS_SYM||LA425_0==TILDE||(LA425_0 >= TOPCENTER_SYM && LA425_0 <= TOPRIGHT_SYM)||LA425_0==VARIABLE||LA425_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt425=1;
			}
			} finally {dbg.exitDecision(425);}

			switch (alt425) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1315:16: declarations
					{
					dbg.location(1315,16);
					pushFollow(FOLLOW_declarations_in_sass_control_block8996);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(425);}
			dbg.location(1315,30);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_control_block8999); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1316, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_control_block");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_control_block"



	// $ANTLR start "sass_function_declaration"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1318:1: sass_function_declaration : SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE ;
	public final void sass_function_declaration() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_declaration");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1318, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1319:5: ( SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:5: SASS_FUNCTION ws sass_function_name ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN ( ws )? LBRACE ( ws )? ( declarations )? RBRACE
			{
			dbg.location(1324,5);
			match(input,SASS_FUNCTION,FOLLOW_SASS_FUNCTION_in_sass_function_declaration9041); if (state.failed) return;dbg.location(1324,19);
			pushFollow(FOLLOW_ws_in_sass_function_declaration9043);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1324,22);
			pushFollow(FOLLOW_sass_function_name_in_sass_function_declaration9045);
			sass_function_name();
			state._fsp--;
			if (state.failed) return;dbg.location(1324,41);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:41: ( ws )?
			int alt426=2;
			try { dbg.enterSubRule(426);
			try { dbg.enterDecision(426, decisionCanBacktrack[426]);

			int LA426_0 = input.LA(1);
			if ( (LA426_0==COMMENT||LA426_0==NL||LA426_0==WS) ) {
				alt426=1;
			}
			} finally {dbg.exitDecision(426);}

			switch (alt426) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:41: ws
					{
					dbg.location(1324,41);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9047);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(426);}
			dbg.location(1324,45);
			match(input,LPAREN,FOLLOW_LPAREN_in_sass_function_declaration9050); if (state.failed) return;dbg.location(1324,52);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:52: ( ws )?
			int alt427=2;
			try { dbg.enterSubRule(427);
			try { dbg.enterDecision(427, decisionCanBacktrack[427]);

			int LA427_0 = input.LA(1);
			if ( (LA427_0==COMMENT||LA427_0==NL||LA427_0==WS) ) {
				alt427=1;
			}
			} finally {dbg.exitDecision(427);}

			switch (alt427) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:52: ws
					{
					dbg.location(1324,52);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9052);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(427);}
			dbg.location(1324,56);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:56: ( cp_args_list )?
			int alt428=2;
			try { dbg.enterSubRule(428);
			try { dbg.enterDecision(428, decisionCanBacktrack[428]);

			int LA428_0 = input.LA(1);
			if ( (LA428_0==AT_IDENT||(LA428_0 >= BOTTOMCENTER_SYM && LA428_0 <= BOTTOMRIGHT_SYM)||LA428_0==CHARSET_SYM||(LA428_0 >= COUNTER_STYLE_SYM && LA428_0 <= CP_DOTS)||LA428_0==FONT_FACE_SYM||LA428_0==IDENT||LA428_0==IMPORT_SYM||(LA428_0 >= LEFTBOTTOM_SYM && LA428_0 <= LEFTTOP_SYM)||LA428_0==LESS_REST||LA428_0==MEDIA_SYM||LA428_0==MOZ_DOCUMENT_SYM||LA428_0==NAMESPACE_SYM||LA428_0==PAGE_SYM||(LA428_0 >= RIGHTBOTTOM_SYM && LA428_0 <= RIGHTTOP_SYM)||(LA428_0 >= SASS_AT_ROOT && LA428_0 <= SASS_DEBUG)||(LA428_0 >= SASS_EACH && LA428_0 <= SASS_ELSE)||LA428_0==SASS_EXTEND||(LA428_0 >= SASS_FOR && LA428_0 <= SASS_FUNCTION)||(LA428_0 >= SASS_IF && LA428_0 <= SASS_MIXIN)||(LA428_0 >= SASS_RETURN && LA428_0 <= SASS_WHILE)||(LA428_0 >= TOPCENTER_SYM && LA428_0 <= TOPRIGHT_SYM)||LA428_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt428=1;
			}
			} finally {dbg.exitDecision(428);}

			switch (alt428) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:56: cp_args_list
					{
					dbg.location(1324,56);
					pushFollow(FOLLOW_cp_args_list_in_sass_function_declaration9055);
					cp_args_list();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(428);}
			dbg.location(1324,70);
			match(input,RPAREN,FOLLOW_RPAREN_in_sass_function_declaration9058); if (state.failed) return;dbg.location(1324,77);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:77: ( ws )?
			int alt429=2;
			try { dbg.enterSubRule(429);
			try { dbg.enterDecision(429, decisionCanBacktrack[429]);

			int LA429_0 = input.LA(1);
			if ( (LA429_0==COMMENT||LA429_0==NL||LA429_0==WS) ) {
				alt429=1;
			}
			} finally {dbg.exitDecision(429);}

			switch (alt429) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:77: ws
					{
					dbg.location(1324,77);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9060);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(429);}
			dbg.location(1324,81);
			match(input,LBRACE,FOLLOW_LBRACE_in_sass_function_declaration9063); if (state.failed) return;dbg.location(1324,88);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:88: ( ws )?
			int alt430=2;
			try { dbg.enterSubRule(430);
			try { dbg.enterDecision(430, decisionCanBacktrack[430]);

			int LA430_0 = input.LA(1);
			if ( (LA430_0==COMMENT||LA430_0==NL||LA430_0==WS) ) {
				alt430=1;
			}
			} finally {dbg.exitDecision(430);}

			switch (alt430) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:88: ws
					{
					dbg.location(1324,88);
					pushFollow(FOLLOW_ws_in_sass_function_declaration9065);
					ws();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(430);}
			dbg.location(1324,92);
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:92: ( declarations )?
			int alt431=2;
			try { dbg.enterSubRule(431);
			try { dbg.enterDecision(431, decisionCanBacktrack[431]);

			int LA431_0 = input.LA(1);
			if ( ((LA431_0 >= AT_IDENT && LA431_0 <= AT_SIGN)||(LA431_0 >= BOTTOMCENTER_SYM && LA431_0 <= BOTTOMRIGHT_SYM)||(LA431_0 >= CHARSET_SYM && LA431_0 <= COLON)||LA431_0==COUNTER_STYLE_SYM||(LA431_0 >= DCOLON && LA431_0 <= DOT)||LA431_0==FONT_FACE_SYM||(LA431_0 >= GEN && LA431_0 <= GREATER)||(LA431_0 >= HASH && LA431_0 <= HASH_SYMBOL)||LA431_0==IDENT||LA431_0==IMPORT_SYM||(LA431_0 >= LBRACKET && LA431_0 <= LEFTTOP_SYM)||LA431_0==LESS_AND||(LA431_0 >= MEDIA_SYM && LA431_0 <= MOZ_DOCUMENT_SYM)||LA431_0==NAMESPACE_SYM||LA431_0==PAGE_SYM||(LA431_0 >= PIPE && LA431_0 <= PLUS)||(LA431_0 >= RIGHTBOTTOM_SYM && LA431_0 <= RIGHTTOP_SYM)||(LA431_0 >= SASS_AT_ROOT && LA431_0 <= SASS_DEBUG)||(LA431_0 >= SASS_EACH && LA431_0 <= SASS_ELSE)||(LA431_0 >= SASS_ERROR && LA431_0 <= SASS_FUNCTION)||(LA431_0 >= SASS_IF && LA431_0 <= SASS_MIXIN)||(LA431_0 >= SASS_RETURN && LA431_0 <= SEMI)||LA431_0==STAR||LA431_0==SUPPORTS_SYM||LA431_0==TILDE||(LA431_0 >= TOPCENTER_SYM && LA431_0 <= TOPRIGHT_SYM)||LA431_0==VARIABLE||LA431_0==WEBKIT_KEYFRAMES_SYM) ) {
				alt431=1;
			}
			} finally {dbg.exitDecision(431);}

			switch (alt431) {
				case 1 :
					dbg.enterAlt(1);

					// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1324:92: declarations
					{
					dbg.location(1324,92);
					pushFollow(FOLLOW_declarations_in_sass_function_declaration9068);
					declarations();
					state._fsp--;
					if (state.failed) return;
					}
					break;

			}
			} finally {dbg.exitSubRule(431);}
			dbg.location(1324,106);
			match(input,RBRACE,FOLLOW_RBRACE_in_sass_function_declaration9071); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1325, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_declaration");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_declaration"



	// $ANTLR start "sass_function_name"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1327:1: sass_function_name : IDENT ;
	public final void sass_function_name() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_name");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1327, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1328:5: ( IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1329:5: IDENT
			{
			dbg.location(1329,5);
			match(input,IDENT,FOLLOW_IDENT_in_sass_function_name9092); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1330, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_name");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_name"



	// $ANTLR start "sass_function_return"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1332:1: sass_function_return : SASS_RETURN ws cp_expression ;
	public final void sass_function_return() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_function_return");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1332, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1333:5: ( SASS_RETURN ws cp_expression )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1334:5: SASS_RETURN ws cp_expression
			{
			dbg.location(1334,5);
			match(input,SASS_RETURN,FOLLOW_SASS_RETURN_in_sass_function_return9113); if (state.failed) return;dbg.location(1334,17);
			pushFollow(FOLLOW_ws_in_sass_function_return9115);
			ws();
			state._fsp--;
			if (state.failed) return;dbg.location(1334,20);
			pushFollow(FOLLOW_cp_expression_in_sass_function_return9117);
			cp_expression();
			state._fsp--;
			if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1335, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_function_return");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_function_return"



	// $ANTLR start "sass_content"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1337:1: sass_content : SASS_CONTENT ;
	public final void sass_content() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "sass_content");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1337, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1338:5: ( SASS_CONTENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1339:5: SASS_CONTENT
			{
			dbg.location(1339,5);
			match(input,SASS_CONTENT,FOLLOW_SASS_CONTENT_in_sass_content9138); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1340, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "sass_content");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "sass_content"



	// $ANTLR start "less_import_types"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1342:1: less_import_types :{...}? IDENT ;
	public final void less_import_types() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_import_types");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1342, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1342:18: ({...}? IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1343:5: {...}? IDENT
			{
			dbg.location(1343,5);
			if ( !(evalPredicate(tokenNameIs(new String[]{"LESS", "CSS", "REFERENCE", "INLINE", "ONCE", "MULTIPLE"}),"tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_import_types", "tokenNameIs(new String[]{\"LESS\", \"CSS\", \"REFERENCE\", \"INLINE\", \"ONCE\", \"MULTIPLE\"})");
			}dbg.location(1343,92);
			match(input,IDENT,FOLLOW_IDENT_in_less_import_types9157); if (state.failed) return;
			}

		}
		catch ( RecognitionException rce) {

			        reportError(rce);
			        input.consume();
			    
		}

		finally {
			// do for sure before leaving
		}
		dbg.location(1344, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_import_types");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_import_types"



	// $ANTLR start "less_when"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1349:1: less_when :{...}? IDENT ;
	public final void less_when() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "less_when");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1349, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1349:10: ({...}? IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1350:5: {...}? IDENT
			{
			dbg.location(1350,5);
			if ( !(evalPredicate(tokenNameEquals("when"),"tokenNameEquals(\"when\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "less_when", "tokenNameEquals(\"when\")");
			}dbg.location(1350,32);
			match(input,IDENT,FOLLOW_IDENT_in_less_when9180); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1351, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "less_when");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "less_when"



	// $ANTLR start "key_and"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1353:1: key_and :{...}? IDENT ;
	public final void key_and() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_and");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1353, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1353:8: ({...}? IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1354:5: {...}? IDENT
			{
			dbg.location(1354,5);
			if ( !(evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_and", "tokenNameEquals(\"and\")");
			}dbg.location(1354,31);
			match(input,IDENT,FOLLOW_IDENT_in_key_and9199); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1355, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_and");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_and"



	// $ANTLR start "key_or"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1357:1: key_or :{...}? IDENT ;
	public final void key_or() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_or");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1357, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1357:7: ({...}? IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1358:5: {...}? IDENT
			{
			dbg.location(1358,5);
			if ( !(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_or", "tokenNameEquals(\"or\")");
			}dbg.location(1358,30);
			match(input,IDENT,FOLLOW_IDENT_in_key_or9217); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1359, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_or");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_or"



	// $ANTLR start "key_only"
	// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1361:1: key_only :{...}? IDENT ;
	public final void key_only() throws RecognitionException {
		try { dbg.enterRule(getGrammarFileName(), "key_only");
		if ( getRuleLevel()==0 ) {dbg.commence();}
		incRuleLevel();
		dbg.location(1361, 0);

		try {
			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1361:9: ({...}? IDENT )
			dbg.enterAlt(1);

			// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1362:5: {...}? IDENT
			{
			dbg.location(1362,5);
			if ( !(evalPredicate(tokenNameEquals("only"),"tokenNameEquals(\"only\")")) ) {
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "key_only", "tokenNameEquals(\"only\")");
			}dbg.location(1362,32);
			match(input,IDENT,FOLLOW_IDENT_in_key_only9235); if (state.failed) return;
			}

		}
		catch (RecognitionException re) {
			reportError(re);
			recover(input,re);
		}
		finally {
			// do for sure before leaving
		}
		dbg.location(1363, 4);

		}
		finally {
			dbg.exitRule(getGrammarFileName(), "key_only");
			decRuleLevel();
			if ( getRuleLevel()==0 ) {dbg.terminate();}
		}

	}
	// $ANTLR end "key_only"

	// $ANTLR start synpred1_Css3
	public final void synpred1_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:44: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:45: ( ws )? mediaQueryList
		{
		dbg.location(319,45);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:45: ( ws )?
		int alt432=2;
		try { dbg.enterSubRule(432);
		try { dbg.enterDecision(432, decisionCanBacktrack[432]);

		int LA432_0 = input.LA(1);
		if ( (LA432_0==COMMENT||LA432_0==NL||LA432_0==WS) ) {
			alt432=1;
		}
		} finally {dbg.exitDecision(432);}

		switch (alt432) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:319:45: ws
				{
				dbg.location(319,45);
				pushFollow(FOLLOW_ws_in_synpred1_Css3335);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(432);}
		dbg.location(319,49);
		pushFollow(FOLLOW_mediaQueryList_in_synpred1_Css3338);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred1_Css3

	// $ANTLR start synpred2_Css3
	public final void synpred2_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:98: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:99: ( ws )? mediaQueryList
		{
		dbg.location(322,99);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:99: ( ws )?
		int alt433=2;
		try { dbg.enterSubRule(433);
		try { dbg.enterDecision(433, decisionCanBacktrack[433]);

		int LA433_0 = input.LA(1);
		if ( (LA433_0==COMMENT||LA433_0==NL||LA433_0==WS) ) {
			alt433=1;
		}
		} finally {dbg.exitDecision(433);}

		switch (alt433) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:322:99: ws
				{
				dbg.location(322,99);
				pushFollow(FOLLOW_ws_in_synpred2_Css3399);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(433);}
		dbg.location(322,103);
		pushFollow(FOLLOW_mediaQueryList_in_synpred2_Css3402);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred2_Css3

	// $ANTLR start synpred3_Css3
	public final void synpred3_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:101: ( ( ws )? mediaQueryList )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:102: ( ws )? mediaQueryList
		{
		dbg.location(324,102);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:102: ( ws )?
		int alt434=2;
		try { dbg.enterSubRule(434);
		try { dbg.enterDecision(434, decisionCanBacktrack[434]);

		int LA434_0 = input.LA(1);
		if ( (LA434_0==COMMENT||LA434_0==NL||LA434_0==WS) ) {
			alt434=1;
		}
		} finally {dbg.exitDecision(434);}

		switch (alt434) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:324:102: ws
				{
				dbg.location(324,102);
				pushFollow(FOLLOW_ws_in_synpred3_Css3453);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(434);}
		dbg.location(324,106);
		pushFollow(FOLLOW_mediaQueryList_in_synpred3_Css3456);
		mediaQueryList();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred3_Css3

	// $ANTLR start synpred4_Css3
	public final void synpred4_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:27: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:28: ( ws )? SEMI
		{
		dbg.location(339,28);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:28: ( ws )?
		int alt435=2;
		try { dbg.enterSubRule(435);
		try { dbg.enterDecision(435, decisionCanBacktrack[435]);

		int LA435_0 = input.LA(1);
		if ( (LA435_0==COMMENT||LA435_0==NL||LA435_0==WS) ) {
			alt435=1;
		}
		} finally {dbg.exitDecision(435);}

		switch (alt435) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:339:28: ws
				{
				dbg.location(339,28);
				pushFollow(FOLLOW_ws_in_synpred4_Css3575);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(435);}
		dbg.location(339,32);
		match(input,SEMI,FOLLOW_SEMI_in_synpred4_Css3578); if (state.failed) return;
		}

	}
	// $ANTLR end synpred4_Css3

	// $ANTLR start synpred5_Css3
	public final void synpred5_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:5: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE ) )
		int alt440=2;
		try { dbg.enterDecision(440, decisionCanBacktrack[440]);

		int LA440_0 = input.LA(1);
		if ( (LA440_0==SASS_MIXIN) ) {
			alt440=1;
		}
		else if ( (LA440_0==DOT||LA440_0==HASH) ) {
			alt440=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 440, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(440);}

		switch (alt440) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:6: SASS_MIXIN
				{
				dbg.location(348,6);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred5_Css3676); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(348,19);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:19: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:20: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | SEMI ) )* LBRACE
				{
				dbg.location(348,20);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:20: ( ( DOT IDENT ) | HASH )
				int alt436=2;
				try { dbg.enterSubRule(436);
				try { dbg.enterDecision(436, decisionCanBacktrack[436]);

				int LA436_0 = input.LA(1);
				if ( (LA436_0==DOT) ) {
					alt436=1;
				}
				else if ( (LA436_0==HASH) ) {
					alt436=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 436, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(436);}

				switch (alt436) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:21: ( DOT IDENT )
						{
						dbg.location(348,21);
						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:21: ( DOT IDENT )
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:22: DOT IDENT
						{
						dbg.location(348,22);
						match(input,DOT,FOLLOW_DOT_in_synpred5_Css3683); if (state.failed) return;dbg.location(348,26);
						match(input,IDENT,FOLLOW_IDENT_in_synpred5_Css3685); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:35: HASH
						{
						dbg.location(348,35);
						match(input,HASH,FOLLOW_HASH_in_synpred5_Css3690); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(436);}
				dbg.location(348,41);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:41: ( ws )?
				int alt437=2;
				try { dbg.enterSubRule(437);
				try { dbg.enterDecision(437, decisionCanBacktrack[437]);

				int LA437_0 = input.LA(1);
				if ( (LA437_0==COMMENT||LA437_0==NL||LA437_0==WS) ) {
					alt437=1;
				}
				} finally {dbg.exitDecision(437);}

				switch (alt437) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:41: ws
						{
						dbg.location(348,41);
						pushFollow(FOLLOW_ws_in_synpred5_Css3693);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(437);}
				dbg.location(348,45);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred5_Css3696); if (state.failed) return;dbg.location(348,52);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:52: (~ RPAREN )*
				try { dbg.enterSubRule(438);

				loop438:
				while (true) {
					int alt438=2;
					try { dbg.enterDecision(438, decisionCanBacktrack[438]);

					int LA438_0 = input.LA(1);
					if ( ((LA438_0 >= A && LA438_0 <= RIGHTTOP_SYM)||(LA438_0 >= S && LA438_0 <= Z)) ) {
						alt438=1;
					}

					} finally {dbg.exitDecision(438);}

					switch (alt438) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
						{
						dbg.location(348,52);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop438;
					}
				}
				} finally {dbg.exitSubRule(438);}
				dbg.location(348,63);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred5_Css3704); if (state.failed) return;dbg.location(348,70);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:348:70: (~ ( LBRACE | SEMI ) )*
				try { dbg.enterSubRule(439);

				loop439:
				while (true) {
					int alt439=2;
					try { dbg.enterDecision(439, decisionCanBacktrack[439]);

					int LA439_0 = input.LA(1);
					if ( ((LA439_0 >= A && LA439_0 <= L)||(LA439_0 >= LBRACKET && LA439_0 <= SASS_WHILE)||(LA439_0 >= SOLIDUS && LA439_0 <= Z)) ) {
						alt439=1;
					}

					} finally {dbg.exitDecision(439);}

					switch (alt439) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
						{
						dbg.location(348,70);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop439;
					}
				}
				} finally {dbg.exitSubRule(439);}
				dbg.location(348,86);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred5_Css3714); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred5_Css3

	// $ANTLR start synpred6_Css3
	public final void synpred6_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:7: ( cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:8: cp_mixin_call ( ( ws )? IMPORTANT_SYM )? ( ws )? SEMI
		{
		dbg.location(350,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred6_Css3732);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(350,22);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:22: ( ( ws )? IMPORTANT_SYM )?
		int alt442=2;
		try { dbg.enterSubRule(442);
		try { dbg.enterDecision(442, decisionCanBacktrack[442]);

		try {
			isCyclicDecision = true;
			alt442 = dfa442.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(442);}

		switch (alt442) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:23: ( ws )? IMPORTANT_SYM
				{
				dbg.location(350,23);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:23: ( ws )?
				int alt441=2;
				try { dbg.enterSubRule(441);
				try { dbg.enterDecision(441, decisionCanBacktrack[441]);

				int LA441_0 = input.LA(1);
				if ( (LA441_0==COMMENT||LA441_0==NL||LA441_0==WS) ) {
					alt441=1;
				}
				} finally {dbg.exitDecision(441);}

				switch (alt441) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:23: ws
						{
						dbg.location(350,23);
						pushFollow(FOLLOW_ws_in_synpred6_Css3735);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(441);}
				dbg.location(350,27);
				match(input,IMPORTANT_SYM,FOLLOW_IMPORTANT_SYM_in_synpred6_Css3738); if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(442);}
		dbg.location(350,43);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:43: ( ws )?
		int alt443=2;
		try { dbg.enterSubRule(443);
		try { dbg.enterDecision(443, decisionCanBacktrack[443]);

		int LA443_0 = input.LA(1);
		if ( (LA443_0==COMMENT||LA443_0==NL||LA443_0==WS) ) {
			alt443=1;
		}
		} finally {dbg.exitDecision(443);}

		switch (alt443) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:350:43: ws
				{
				dbg.location(350,43);
				pushFollow(FOLLOW_ws_in_synpred6_Css3742);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(443);}
		dbg.location(350,47);
		match(input,SEMI,FOLLOW_SEMI_in_synpred6_Css3745); if (state.failed) return;
		}

	}
	// $ANTLR end synpred6_Css3

	// $ANTLR start synpred7_Css3
	public final void synpred7_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:351:8: cp_mixin_call
		{
		dbg.location(351,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred7_Css3768);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred7_Css3

	// $ANTLR start synpred8_Css3
	public final void synpred8_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(352,8);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt449=3;
		try { dbg.enterSubRule(449);
		try { dbg.enterDecision(449, decisionCanBacktrack[449]);

		try {
			isCyclicDecision = true;
			alt449 = dfa449.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(449);}

		switch (alt449) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(352,9);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(352,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css3793); if (state.failed) return;dbg.location(352,23);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:23: ( ws selectorsGroup )?
				int alt444=2;
				try { dbg.enterSubRule(444);
				try { dbg.enterDecision(444, decisionCanBacktrack[444]);

				try {
					isCyclicDecision = true;
					alt444 = dfa444.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(444);}

				switch (alt444) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:24: ws selectorsGroup
						{
						dbg.location(352,24);
						pushFollow(FOLLOW_ws_in_synpred8_Css3796);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(352,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css3798);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(444);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(352,48);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(352,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred8_Css3807); if (state.failed) return;dbg.location(352,62);
				pushFollow(FOLLOW_ws_in_synpred8_Css3809);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(352,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred8_Css3811); if (state.failed) return;dbg.location(352,72);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:72: ( ws )?
				int alt445=2;
				try { dbg.enterSubRule(445);
				try { dbg.enterDecision(445, decisionCanBacktrack[445]);

				int LA445_0 = input.LA(1);
				if ( (LA445_0==COMMENT||LA445_0==NL||LA445_0==WS) ) {
					alt445=1;
				}
				} finally {dbg.exitDecision(445);}

				switch (alt445) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:72: ws
						{
						dbg.location(352,72);
						pushFollow(FOLLOW_ws_in_synpred8_Css3813);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(445);}
				dbg.location(352,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css3816); if (state.failed) return;dbg.location(352,82);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:82: ( ws )?
				int alt446=2;
				try { dbg.enterSubRule(446);
				try { dbg.enterDecision(446, decisionCanBacktrack[446]);

				int LA446_0 = input.LA(1);
				if ( (LA446_0==COMMENT||LA446_0==NL||LA446_0==WS) ) {
					alt446=1;
				}
				} finally {dbg.exitDecision(446);}

				switch (alt446) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:82: ws
						{
						dbg.location(352,82);
						pushFollow(FOLLOW_ws_in_synpred8_Css3818);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(446);}
				dbg.location(352,86);
				match(input,COLON,FOLLOW_COLON_in_synpred8_Css3821); if (state.failed) return;dbg.location(352,92);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:92: ( ws )?
				int alt447=2;
				try { dbg.enterSubRule(447);
				try { dbg.enterDecision(447, decisionCanBacktrack[447]);

				int LA447_0 = input.LA(1);
				if ( (LA447_0==COMMENT||LA447_0==NL||LA447_0==WS) ) {
					alt447=1;
				}
				} finally {dbg.exitDecision(447);}

				switch (alt447) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:92: ws
						{
						dbg.location(352,92);
						pushFollow(FOLLOW_ws_in_synpred8_Css3823);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(447);}
				dbg.location(352,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred8_Css3826); if (state.failed) return;dbg.location(352,102);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:102: ( ws )?
				int alt448=2;
				try { dbg.enterSubRule(448);
				try { dbg.enterDecision(448, decisionCanBacktrack[448]);

				int LA448_0 = input.LA(1);
				if ( (LA448_0==COMMENT||LA448_0==NL||LA448_0==WS) ) {
					alt448=1;
				}
				} finally {dbg.exitDecision(448);}

				switch (alt448) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:102: ws
						{
						dbg.location(352,102);
						pushFollow(FOLLOW_ws_in_synpred8_Css3828);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(448);}
				dbg.location(352,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred8_Css3831); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:116: selectorsGroup
				{
				dbg.location(352,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred8_Css3836);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(449);}
		dbg.location(352,132);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:132: ( ws )?
		int alt450=2;
		try { dbg.enterSubRule(450);
		try { dbg.enterDecision(450, decisionCanBacktrack[450]);

		int LA450_0 = input.LA(1);
		if ( (LA450_0==COMMENT||LA450_0==NL||LA450_0==WS) ) {
			alt450=1;
		}
		} finally {dbg.exitDecision(450);}

		switch (alt450) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:352:132: ws
				{
				dbg.location(352,132);
				pushFollow(FOLLOW_ws_in_synpred8_Css3839);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(450);}
		dbg.location(352,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred8_Css3842); if (state.failed) return;
		}

	}
	// $ANTLR end synpred8_Css3

	// $ANTLR start synpred9_Css3
	public final void synpred9_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:353:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:353:8: propertyDeclaration
		{
		dbg.location(353,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred9_Css3854);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred9_Css3

	// $ANTLR start synpred10_Css3
	public final void synpred10_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:17: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:18: ( ws )? COMMA
		{
		dbg.location(368,18);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:18: ( ws )?
		int alt451=2;
		try { dbg.enterSubRule(451);
		try { dbg.enterDecision(451, decisionCanBacktrack[451]);

		int LA451_0 = input.LA(1);
		if ( (LA451_0==COMMENT||LA451_0==NL||LA451_0==WS) ) {
			alt451=1;
		}
		} finally {dbg.exitDecision(451);}

		switch (alt451) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:368:18: ws
				{
				dbg.location(368,18);
				pushFollow(FOLLOW_ws_in_synpred10_Css3969);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(451);}
		dbg.location(368,22);
		match(input,COMMA,FOLLOW_COMMA_in_synpred10_Css3972); if (state.failed) return;
		}

	}
	// $ANTLR end synpred10_Css3

	// $ANTLR start synpred11_Css3
	public final void synpred11_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:44: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:45: ( ws )? key_and
		{
		dbg.location(373,45);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:45: ( ws )?
		int alt452=2;
		try { dbg.enterSubRule(452);
		try { dbg.enterDecision(452, decisionCanBacktrack[452]);

		int LA452_0 = input.LA(1);
		if ( (LA452_0==COMMENT||LA452_0==NL||LA452_0==WS) ) {
			alt452=1;
		}
		} finally {dbg.exitDecision(452);}

		switch (alt452) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:373:45: ws
				{
				dbg.location(373,45);
				pushFollow(FOLLOW_ws_in_synpred11_Css31016);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(452);}
		dbg.location(373,49);
		pushFollow(FOLLOW_key_and_in_synpred11_Css31019);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred11_Css3

	// $ANTLR start synpred12_Css3
	public final void synpred12_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:24: ( ( ws )? key_and )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:25: ( ws )? key_and
		{
		dbg.location(374,25);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:25: ( ws )?
		int alt453=2;
		try { dbg.enterSubRule(453);
		try { dbg.enterDecision(453, decisionCanBacktrack[453]);

		int LA453_0 = input.LA(1);
		if ( (LA453_0==COMMENT||LA453_0==NL||LA453_0==WS) ) {
			alt453=1;
		}
		} finally {dbg.exitDecision(453);}

		switch (alt453) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:374:25: ws
				{
				dbg.location(374,25);
				pushFollow(FOLLOW_ws_in_synpred12_Css31046);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(453);}
		dbg.location(374,29);
		pushFollow(FOLLOW_key_and_in_synpred12_Css31049);
		key_and();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred12_Css3

	// $ANTLR start synpred13_Css3
	public final void synpred13_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:5: ( LPAREN )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:388:6: LPAREN
		{
		dbg.location(388,6);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred13_Css31131); if (state.failed) return;
		}

	}
	// $ANTLR end synpred13_Css3

	// $ANTLR start synpred14_Css3
	public final void synpred14_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:389:7: ( HASH )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:389:8: HASH
		{
		dbg.location(389,8);
		match(input,HASH,FOLLOW_HASH_in_synpred14_Css31160); if (state.failed) return;
		}

	}
	// $ANTLR end synpred14_Css3

	// $ANTLR start synpred15_Css3
	public final void synpred15_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:22: ( ( ws )? SEMI )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:23: ( ws )? SEMI
		{
		dbg.location(409,23);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:23: ( ws )?
		int alt454=2;
		try { dbg.enterSubRule(454);
		try { dbg.enterDecision(454, decisionCanBacktrack[454]);

		int LA454_0 = input.LA(1);
		if ( (LA454_0==COMMENT||LA454_0==NL||LA454_0==WS) ) {
			alt454=1;
		}
		} finally {dbg.exitDecision(454);}

		switch (alt454) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:409:23: ws
				{
				dbg.location(409,23);
				pushFollow(FOLLOW_ws_in_synpred15_Css31306);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(454);}
		dbg.location(409,27);
		match(input,SEMI,FOLLOW_SEMI_in_synpred15_Css31309); if (state.failed) return;
		}

	}
	// $ANTLR end synpred15_Css3

	// $ANTLR start synpred16_Css3
	public final void synpred16_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:9: ( SASS_MIXIN | ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE ) )
		int alt459=2;
		try { dbg.enterDecision(459, decisionCanBacktrack[459]);

		int LA459_0 = input.LA(1);
		if ( (LA459_0==SASS_MIXIN) ) {
			alt459=1;
		}
		else if ( (LA459_0==DOT||LA459_0==HASH) ) {
			alt459=2;
		}

		else {
			if (state.backtracking>0) {state.failed=true; return;}
			NoViableAltException nvae =
				new NoViableAltException("", 459, 0, input);
			dbg.recognitionException(nvae);
			throw nvae;
		}

		} finally {dbg.exitDecision(459);}

		switch (alt459) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:10: SASS_MIXIN
				{
				dbg.location(417,10);
				match(input,SASS_MIXIN,FOLLOW_SASS_MIXIN_in_synpred16_Css31384); if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				{
				dbg.location(417,23);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:23: ( ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:24: ( ( DOT IDENT ) | HASH ) ( ws )? LPAREN (~ RPAREN )* RPAREN (~ ( LBRACE | RBRACE | SEMI ) )* LBRACE
				{
				dbg.location(417,24);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:24: ( ( DOT IDENT ) | HASH )
				int alt455=2;
				try { dbg.enterSubRule(455);
				try { dbg.enterDecision(455, decisionCanBacktrack[455]);

				int LA455_0 = input.LA(1);
				if ( (LA455_0==DOT) ) {
					alt455=1;
				}
				else if ( (LA455_0==HASH) ) {
					alt455=2;
				}

				else {
					if (state.backtracking>0) {state.failed=true; return;}
					NoViableAltException nvae =
						new NoViableAltException("", 455, 0, input);
					dbg.recognitionException(nvae);
					throw nvae;
				}

				} finally {dbg.exitDecision(455);}

				switch (alt455) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:25: ( DOT IDENT )
						{
						dbg.location(417,25);
						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:25: ( DOT IDENT )
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:26: DOT IDENT
						{
						dbg.location(417,26);
						match(input,DOT,FOLLOW_DOT_in_synpred16_Css31391); if (state.failed) return;dbg.location(417,30);
						match(input,IDENT,FOLLOW_IDENT_in_synpred16_Css31393); if (state.failed) return;
						}

						}
						break;
					case 2 :
						dbg.enterAlt(2);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:39: HASH
						{
						dbg.location(417,39);
						match(input,HASH,FOLLOW_HASH_in_synpred16_Css31398); if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(455);}
				dbg.location(417,45);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:45: ( ws )?
				int alt456=2;
				try { dbg.enterSubRule(456);
				try { dbg.enterDecision(456, decisionCanBacktrack[456]);

				int LA456_0 = input.LA(1);
				if ( (LA456_0==COMMENT||LA456_0==NL||LA456_0==WS) ) {
					alt456=1;
				}
				} finally {dbg.exitDecision(456);}

				switch (alt456) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:45: ws
						{
						dbg.location(417,45);
						pushFollow(FOLLOW_ws_in_synpred16_Css31401);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(456);}
				dbg.location(417,49);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred16_Css31404); if (state.failed) return;dbg.location(417,56);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:56: (~ RPAREN )*
				try { dbg.enterSubRule(457);

				loop457:
				while (true) {
					int alt457=2;
					try { dbg.enterDecision(457, decisionCanBacktrack[457]);

					int LA457_0 = input.LA(1);
					if ( ((LA457_0 >= A && LA457_0 <= RIGHTTOP_SYM)||(LA457_0 >= S && LA457_0 <= Z)) ) {
						alt457=1;
					}

					} finally {dbg.exitDecision(457);}

					switch (alt457) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
						{
						dbg.location(417,56);
						if ( (input.LA(1) >= A && input.LA(1) <= RIGHTTOP_SYM)||(input.LA(1) >= S && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop457;
					}
				}
				} finally {dbg.exitSubRule(457);}
				dbg.location(417,67);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred16_Css31412); if (state.failed) return;dbg.location(417,74);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:417:74: (~ ( LBRACE | RBRACE | SEMI ) )*
				try { dbg.enterSubRule(458);

				loop458:
				while (true) {
					int alt458=2;
					try { dbg.enterDecision(458, decisionCanBacktrack[458]);

					int LA458_0 = input.LA(1);
					if ( ((LA458_0 >= A && LA458_0 <= L)||(LA458_0 >= LBRACKET && LA458_0 <= R)||(LA458_0 >= RBRACKET && LA458_0 <= SASS_WHILE)||(LA458_0 >= SOLIDUS && LA458_0 <= Z)) ) {
						alt458=1;
					}

					} finally {dbg.exitDecision(458);}

					switch (alt458) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
						{
						dbg.location(417,74);
						if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
							input.consume();
							state.errorRecovery=false;
							state.failed=false;
						}
						else {
							if (state.backtracking>0) {state.failed=true; return;}
							MismatchedSetException mse = new MismatchedSetException(null,input);
							dbg.recognitionException(mse);
							throw mse;
						}
						}
						break;

					default :
						break loop458;
					}
				}
				} finally {dbg.exitSubRule(458);}
				dbg.location(417,97);
				match(input,LBRACE,FOLLOW_LBRACE_in_synpred16_Css31424); if (state.failed) return;
				}

				}
				break;

		}
	}
	// $ANTLR end synpred16_Css3

	// $ANTLR start synpred17_Css3
	public final void synpred17_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:419:11: ( cp_mixin_call ( ws )? SEMI )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:419:12: cp_mixin_call ( ws )? SEMI
		{
		dbg.location(419,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred17_Css31450);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;dbg.location(419,26);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:419:26: ( ws )?
		int alt460=2;
		try { dbg.enterSubRule(460);
		try { dbg.enterDecision(460, decisionCanBacktrack[460]);

		int LA460_0 = input.LA(1);
		if ( (LA460_0==COMMENT||LA460_0==NL||LA460_0==WS) ) {
			alt460=1;
		}
		} finally {dbg.exitDecision(460);}

		switch (alt460) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:419:26: ws
				{
				dbg.location(419,26);
				pushFollow(FOLLOW_ws_in_synpred17_Css31452);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(460);}
		dbg.location(419,30);
		match(input,SEMI,FOLLOW_SEMI_in_synpred17_Css31455); if (state.failed) return;
		}

	}
	// $ANTLR end synpred17_Css3

	// $ANTLR start synpred18_Css3
	public final void synpred18_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:420:11: ( cp_mixin_call )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:420:12: cp_mixin_call
		{
		dbg.location(420,12);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred18_Css31474);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred18_Css3

	// $ANTLR start synpred19_Css3
	public final void synpred19_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:422:11: ( cp_variable ( ws )? COLON )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:422:12: cp_variable ( ws )? COLON
		{
		dbg.location(422,12);
		pushFollow(FOLLOW_cp_variable_in_synpred19_Css31502);
		cp_variable();
		state._fsp--;
		if (state.failed) return;dbg.location(422,24);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:422:24: ( ws )?
		int alt461=2;
		try { dbg.enterSubRule(461);
		try { dbg.enterDecision(461, decisionCanBacktrack[461]);

		int LA461_0 = input.LA(1);
		if ( (LA461_0==COMMENT||LA461_0==NL||LA461_0==WS) ) {
			alt461=1;
		}
		} finally {dbg.exitDecision(461);}

		switch (alt461) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:422:24: ws
				{
				dbg.location(422,24);
				pushFollow(FOLLOW_ws_in_synpred19_Css31504);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(461);}
		dbg.location(422,28);
		match(input,COLON,FOLLOW_COLON_in_synpred19_Css31507); if (state.failed) return;
		}

	}
	// $ANTLR end synpred19_Css3

	// $ANTLR start synpred20_Css3
	public final void synpred20_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:423:11: ( sass_map )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:423:12: sass_map
		{
		dbg.location(423,12);
		pushFollow(FOLLOW_sass_map_in_synpred20_Css31524);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred20_Css3

	// $ANTLR start synpred21_Css3
	public final void synpred21_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:27: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:28: ( ws )? COMMA
		{
		dbg.location(630,28);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:28: ( ws )?
		int alt462=2;
		try { dbg.enterSubRule(462);
		try { dbg.enterDecision(462, decisionCanBacktrack[462]);

		int LA462_0 = input.LA(1);
		if ( (LA462_0==COMMENT||LA462_0==NL||LA462_0==WS) ) {
			alt462=1;
		}
		} finally {dbg.exitDecision(462);}

		switch (alt462) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:630:28: ws
				{
				dbg.location(630,28);
				pushFollow(FOLLOW_ws_in_synpred21_Css32987);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(462);}
		dbg.location(630,32);
		match(input,COMMA,FOLLOW_COMMA_in_synpred21_Css32990); if (state.failed) return;
		}

	}
	// $ANTLR end synpred21_Css3

	// $ANTLR start synpred22_Css3
	public final void synpred22_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:41: ( function )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:638:42: function
		{
		dbg.location(638,42);
		pushFollow(FOLLOW_function_in_synpred22_Css33081);
		function();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred22_Css3

	// $ANTLR start synpred23_Css3
	public final void synpred23_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:666:5: ( cp_variable_declaration )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:666:6: cp_variable_declaration
		{
		dbg.location(666,6);
		pushFollow(FOLLOW_cp_variable_declaration_in_synpred23_Css33381);
		cp_variable_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred23_Css3

	// $ANTLR start synpred24_Css3
	public final void synpred24_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:667:7: ( sass_map )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:667:8: sass_map
		{
		dbg.location(667,8);
		pushFollow(FOLLOW_sass_map_in_synpred24_Css33393);
		sass_map();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred24_Css3

	// $ANTLR start synpred25_Css3
	public final void synpred25_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:668:7: ( sass_nested_properties )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:668:8: sass_nested_properties
		{
		dbg.location(668,8);
		pushFollow(FOLLOW_sass_nested_properties_in_synpred25_Css33406);
		sass_nested_properties();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred25_Css3

	// $ANTLR start synpred26_Css3
	public final void synpred26_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:7: ( ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup ) ( ws )? LBRACE
		{
		dbg.location(669,8);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )
		int alt468=3;
		try { dbg.enterSubRule(468);
		try { dbg.enterDecision(468, decisionCanBacktrack[468]);

		try {
			isCyclicDecision = true;
			alt468 = dfa468.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(468);}

		switch (alt468) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				{
				dbg.location(669,9);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:9: ( SASS_AT_ROOT ( ws selectorsGroup )? )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:10: SASS_AT_ROOT ( ws selectorsGroup )?
				{
				dbg.location(669,10);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred26_Css33420); if (state.failed) return;dbg.location(669,23);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:23: ( ws selectorsGroup )?
				int alt463=2;
				try { dbg.enterSubRule(463);
				try { dbg.enterDecision(463, decisionCanBacktrack[463]);

				try {
					isCyclicDecision = true;
					alt463 = dfa463.predict(input);
				}
				catch (NoViableAltException nvae) {
					dbg.recognitionException(nvae);
					throw nvae;
				}
				} finally {dbg.exitDecision(463);}

				switch (alt463) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:24: ws selectorsGroup
						{
						dbg.location(669,24);
						pushFollow(FOLLOW_ws_in_synpred26_Css33423);
						ws();
						state._fsp--;
						if (state.failed) return;dbg.location(669,27);
						pushFollow(FOLLOW_selectorsGroup_in_synpred26_Css33425);
						selectorsGroup();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(463);}

				}

				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				{
				dbg.location(669,48);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:48: ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:49: SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN
				{
				dbg.location(669,49);
				match(input,SASS_AT_ROOT,FOLLOW_SASS_AT_ROOT_in_synpred26_Css33434); if (state.failed) return;dbg.location(669,62);
				pushFollow(FOLLOW_ws_in_synpred26_Css33436);
				ws();
				state._fsp--;
				if (state.failed) return;dbg.location(669,65);
				match(input,LPAREN,FOLLOW_LPAREN_in_synpred26_Css33438); if (state.failed) return;dbg.location(669,72);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:72: ( ws )?
				int alt464=2;
				try { dbg.enterSubRule(464);
				try { dbg.enterDecision(464, decisionCanBacktrack[464]);

				int LA464_0 = input.LA(1);
				if ( (LA464_0==COMMENT||LA464_0==NL||LA464_0==WS) ) {
					alt464=1;
				}
				} finally {dbg.exitDecision(464);}

				switch (alt464) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:72: ws
						{
						dbg.location(669,72);
						pushFollow(FOLLOW_ws_in_synpred26_Css33440);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(464);}
				dbg.location(669,76);
				match(input,IDENT,FOLLOW_IDENT_in_synpred26_Css33443); if (state.failed) return;dbg.location(669,82);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:82: ( ws )?
				int alt465=2;
				try { dbg.enterSubRule(465);
				try { dbg.enterDecision(465, decisionCanBacktrack[465]);

				int LA465_0 = input.LA(1);
				if ( (LA465_0==COMMENT||LA465_0==NL||LA465_0==WS) ) {
					alt465=1;
				}
				} finally {dbg.exitDecision(465);}

				switch (alt465) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:82: ws
						{
						dbg.location(669,82);
						pushFollow(FOLLOW_ws_in_synpred26_Css33445);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(465);}
				dbg.location(669,86);
				match(input,COLON,FOLLOW_COLON_in_synpred26_Css33448); if (state.failed) return;dbg.location(669,92);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:92: ( ws )?
				int alt466=2;
				try { dbg.enterSubRule(466);
				try { dbg.enterDecision(466, decisionCanBacktrack[466]);

				int LA466_0 = input.LA(1);
				if ( (LA466_0==COMMENT||LA466_0==NL||LA466_0==WS) ) {
					alt466=1;
				}
				} finally {dbg.exitDecision(466);}

				switch (alt466) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:92: ws
						{
						dbg.location(669,92);
						pushFollow(FOLLOW_ws_in_synpred26_Css33450);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(466);}
				dbg.location(669,96);
				match(input,IDENT,FOLLOW_IDENT_in_synpred26_Css33453); if (state.failed) return;dbg.location(669,102);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:102: ( ws )?
				int alt467=2;
				try { dbg.enterSubRule(467);
				try { dbg.enterDecision(467, decisionCanBacktrack[467]);

				int LA467_0 = input.LA(1);
				if ( (LA467_0==COMMENT||LA467_0==NL||LA467_0==WS) ) {
					alt467=1;
				}
				} finally {dbg.exitDecision(467);}

				switch (alt467) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:102: ws
						{
						dbg.location(669,102);
						pushFollow(FOLLOW_ws_in_synpred26_Css33455);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(467);}
				dbg.location(669,106);
				match(input,RPAREN,FOLLOW_RPAREN_in_synpred26_Css33458); if (state.failed) return;
				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:116: selectorsGroup
				{
				dbg.location(669,116);
				pushFollow(FOLLOW_selectorsGroup_in_synpred26_Css33463);
				selectorsGroup();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(468);}
		dbg.location(669,132);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:132: ( ws )?
		int alt469=2;
		try { dbg.enterSubRule(469);
		try { dbg.enterDecision(469, decisionCanBacktrack[469]);

		int LA469_0 = input.LA(1);
		if ( (LA469_0==COMMENT||LA469_0==NL||LA469_0==WS) ) {
			alt469=1;
		}
		} finally {dbg.exitDecision(469);}

		switch (alt469) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:669:132: ws
				{
				dbg.location(669,132);
				pushFollow(FOLLOW_ws_in_synpred26_Css33466);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(469);}
		dbg.location(669,136);
		match(input,LBRACE,FOLLOW_LBRACE_in_synpred26_Css33469); if (state.failed) return;
		}

	}
	// $ANTLR end synpred26_Css3

	// $ANTLR start synpred27_Css3
	public final void synpred27_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:670:7: ( propertyDeclaration )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:670:8: propertyDeclaration
		{
		dbg.location(670,8);
		pushFollow(FOLLOW_propertyDeclaration_in_synpred27_Css33481);
		propertyDeclaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred27_Css3

	// $ANTLR start synpred28_Css3
	public final void synpred28_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:672:7: ( property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI ) )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:672:8: property ( ws )? COLON (~ ( LBRACE | SEMI | RBRACE ) )* ( RBRACE | SEMI )
		{
		dbg.location(672,8);
		pushFollow(FOLLOW_property_in_synpred28_Css33498);
		property();
		state._fsp--;
		if (state.failed) return;dbg.location(672,17);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:672:17: ( ws )?
		int alt470=2;
		try { dbg.enterSubRule(470);
		try { dbg.enterDecision(470, decisionCanBacktrack[470]);

		int LA470_0 = input.LA(1);
		if ( (LA470_0==COMMENT||LA470_0==NL||LA470_0==WS) ) {
			alt470=1;
		}
		} finally {dbg.exitDecision(470);}

		switch (alt470) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:672:17: ws
				{
				dbg.location(672,17);
				pushFollow(FOLLOW_ws_in_synpred28_Css33500);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(470);}
		dbg.location(672,21);
		match(input,COLON,FOLLOW_COLON_in_synpred28_Css33503); if (state.failed) return;dbg.location(672,27);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:672:27: (~ ( LBRACE | SEMI | RBRACE ) )*
		try { dbg.enterSubRule(471);

		loop471:
		while (true) {
			int alt471=2;
			try { dbg.enterDecision(471, decisionCanBacktrack[471]);

			int LA471_0 = input.LA(1);
			if ( ((LA471_0 >= A && LA471_0 <= L)||(LA471_0 >= LBRACKET && LA471_0 <= R)||(LA471_0 >= RBRACKET && LA471_0 <= SASS_WHILE)||(LA471_0 >= SOLIDUS && LA471_0 <= Z)) ) {
				alt471=1;
			}

			} finally {dbg.exitDecision(471);}

			switch (alt471) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
				{
				dbg.location(672,27);
				if ( (input.LA(1) >= A && input.LA(1) <= L)||(input.LA(1) >= LBRACKET && input.LA(1) <= R)||(input.LA(1) >= RBRACKET && input.LA(1) <= SASS_WHILE)||(input.LA(1) >= SOLIDUS && input.LA(1) <= Z) ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

			default :
				break loop471;
			}
		}
		} finally {dbg.exitSubRule(471);}
		dbg.location(672,50);
		if ( input.LA(1)==RBRACE||input.LA(1)==SEMI ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred28_Css3

	// $ANTLR start synpred29_Css3
	public final void synpred29_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:673:7: ( cp_mixin_declaration )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:673:8: cp_mixin_declaration
		{
		dbg.location(673,8);
		pushFollow(FOLLOW_cp_mixin_declaration_in_synpred29_Css33532);
		cp_mixin_declaration();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred29_Css3

	// $ANTLR start synpred30_Css3
	public final void synpred30_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:674:8: cp_mixin_call
		{
		dbg.location(674,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred30_Css33544);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred30_Css3

	// $ANTLR start synpred31_Css3
	public final void synpred31_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:7: ( cp_mixin_call )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:675:8: cp_mixin_call
		{
		dbg.location(675,8);
		pushFollow(FOLLOW_cp_mixin_call_in_synpred31_Css33565);
		cp_mixin_call();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred31_Css3

	// $ANTLR start synpred32_Css3
	public final void synpred32_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:65: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:66: ( ws )? esPred
		{
		dbg.location(709,66);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:66: ( ws )?
		int alt472=2;
		try { dbg.enterSubRule(472);
		try { dbg.enterDecision(472, decisionCanBacktrack[472]);

		int LA472_0 = input.LA(1);
		if ( (LA472_0==COMMENT||LA472_0==NL||LA472_0==WS) ) {
			alt472=1;
		}
		} finally {dbg.exitDecision(472);}

		switch (alt472) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:709:66: ws
				{
				dbg.location(709,66);
				pushFollow(FOLLOW_ws_in_synpred32_Css33863);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(472);}
		dbg.location(709,70);
		pushFollow(FOLLOW_esPred_in_synpred32_Css33866);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred32_Css3

	// $ANTLR start synpred33_Css3
	public final void synpred33_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:4: ( typeSelector )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:5: typeSelector
		{
		dbg.location(710,5);
		pushFollow(FOLLOW_typeSelector_in_synpred33_Css33901);
		typeSelector();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred33_Css3

	// $ANTLR start synpred34_Css3
	public final void synpred34_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:34: ( ( ws )? esPred )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:35: ( ws )? esPred
		{
		dbg.location(710,35);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:35: ( ws )?
		int alt473=2;
		try { dbg.enterSubRule(473);
		try { dbg.enterDecision(473, decisionCanBacktrack[473]);

		int LA473_0 = input.LA(1);
		if ( (LA473_0==COMMENT||LA473_0==NL||LA473_0==WS) ) {
			alt473=1;
		}
		} finally {dbg.exitDecision(473);}

		switch (alt473) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:710:35: ws
				{
				dbg.location(710,35);
				pushFollow(FOLLOW_ws_in_synpred34_Css33908);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(473);}
		dbg.location(710,39);
		pushFollow(FOLLOW_esPred_in_synpred34_Css33911);
		esPred();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred34_Css3

	// $ANTLR start synpred35_Css3
	public final void synpred35_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:7: ( ( IDENT | STAR )? PIPE )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:8: ( IDENT | STAR )? PIPE
		{
		dbg.location(724,8);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:724:8: ( IDENT | STAR )?
		int alt474=2;
		try { dbg.enterSubRule(474);
		try { dbg.enterDecision(474, decisionCanBacktrack[474]);

		int LA474_0 = input.LA(1);
		if ( (LA474_0==IDENT||LA474_0==STAR) ) {
			alt474=1;
		}
		} finally {dbg.exitDecision(474);}

		switch (alt474) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:
				{
				dbg.location(724,8);
				if ( input.LA(1)==IDENT||input.LA(1)==STAR ) {
					input.consume();
					state.errorRecovery=false;
					state.failed=false;
				}
				else {
					if (state.backtracking>0) {state.failed=true; return;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					dbg.recognitionException(mse);
					throw mse;
				}
				}
				break;

		}
		} finally {dbg.exitSubRule(474);}
		dbg.location(724,24);
		match(input,PIPE,FOLLOW_PIPE_in_synpred35_Css34022); if (state.failed) return;
		}

	}
	// $ANTLR end synpred35_Css3

	// $ANTLR start synpred36_Css3
	public final void synpred36_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:14: ( ( ws | ( ( ws )? operator ( ws )? ) |) term )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:15: ( ws | ( ( ws )? operator ( ws )? ) |) term
		{
		dbg.location(907,15);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:15: ( ws | ( ( ws )? operator ( ws )? ) |)
		int alt477=3;
		try { dbg.enterSubRule(477);
		try { dbg.enterDecision(477, decisionCanBacktrack[477]);

		try {
			isCyclicDecision = true;
			alt477 = dfa477.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(477);}

		switch (alt477) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:17: ws
				{
				dbg.location(907,17);
				pushFollow(FOLLOW_ws_in_synpred36_Css35571);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:22: ( ( ws )? operator ( ws )? )
				{
				dbg.location(907,22);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:22: ( ( ws )? operator ( ws )? )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:23: ( ws )? operator ( ws )?
				{
				dbg.location(907,23);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:23: ( ws )?
				int alt475=2;
				try { dbg.enterSubRule(475);
				try { dbg.enterDecision(475, decisionCanBacktrack[475]);

				int LA475_0 = input.LA(1);
				if ( (LA475_0==COMMENT||LA475_0==NL||LA475_0==WS) ) {
					alt475=1;
				}
				} finally {dbg.exitDecision(475);}

				switch (alt475) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:23: ws
						{
						dbg.location(907,23);
						pushFollow(FOLLOW_ws_in_synpred36_Css35576);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(475);}
				dbg.location(907,27);
				pushFollow(FOLLOW_operator_in_synpred36_Css35579);
				operator();
				state._fsp--;
				if (state.failed) return;dbg.location(907,36);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:36: ( ws )?
				int alt476=2;
				try { dbg.enterSubRule(476);
				try { dbg.enterDecision(476, decisionCanBacktrack[476]);

				int LA476_0 = input.LA(1);
				if ( (LA476_0==COMMENT||LA476_0==NL||LA476_0==WS) ) {
					alt476=1;
				}
				} finally {dbg.exitDecision(476);}

				switch (alt476) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:36: ws
						{
						dbg.location(907,36);
						pushFollow(FOLLOW_ws_in_synpred36_Css35581);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(476);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:907:56: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(477);}
		dbg.location(907,58);
		pushFollow(FOLLOW_term_in_synpred36_Css35590);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred36_Css3

	// $ANTLR start synpred37_Css3
	public final void synpred37_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:914:9: ( functionName ( ws )? LPAREN )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:914:10: functionName ( ws )? LPAREN
		{
		dbg.location(914,10);
		pushFollow(FOLLOW_functionName_in_synpred37_Css35663);
		functionName();
		state._fsp--;
		if (state.failed) return;dbg.location(914,23);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:914:23: ( ws )?
		int alt478=2;
		try { dbg.enterSubRule(478);
		try { dbg.enterDecision(478, decisionCanBacktrack[478]);

		int LA478_0 = input.LA(1);
		if ( (LA478_0==COMMENT||LA478_0==NL||LA478_0==WS) ) {
			alt478=1;
		}
		} finally {dbg.exitDecision(478);}

		switch (alt478) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:914:23: ws
				{
				dbg.location(914,23);
				pushFollow(FOLLOW_ws_in_synpred37_Css35665);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(478);}
		dbg.location(914,27);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred37_Css35668); if (state.failed) return;
		}

	}
	// $ANTLR end synpred37_Css3

	// $ANTLR start synpred38_Css3
	public final void synpred38_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:9: ( fnAttributeName ( ws )? ( OPEQ | COLON ) )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:10: fnAttributeName ( ws )? ( OPEQ | COLON )
		{
		dbg.location(978,10);
		pushFollow(FOLLOW_fnAttributeName_in_synpred38_Css36233);
		fnAttributeName();
		state._fsp--;
		if (state.failed) return;dbg.location(978,26);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:26: ( ws )?
		int alt479=2;
		try { dbg.enterSubRule(479);
		try { dbg.enterDecision(479, decisionCanBacktrack[479]);

		int LA479_0 = input.LA(1);
		if ( (LA479_0==COMMENT||LA479_0==NL||LA479_0==WS) ) {
			alt479=1;
		}
		} finally {dbg.exitDecision(479);}

		switch (alt479) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:978:26: ws
				{
				dbg.location(978,26);
				pushFollow(FOLLOW_ws_in_synpred38_Css36235);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(479);}
		dbg.location(978,30);
		if ( input.LA(1)==COLON||input.LA(1)==OPEQ ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred38_Css3

	// $ANTLR start synpred39_Css3
	public final void synpred39_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:979:11: ( cp_expression )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:979:12: cp_expression
		{
		dbg.location(979,12);
		pushFollow(FOLLOW_cp_expression_in_synpred39_Css36273);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred39_Css3

	// $ANTLR start synpred40_Css3
	public final void synpred40_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:20: ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term
		{
		dbg.location(991,21);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)
		int alt482=3;
		try { dbg.enterSubRule(482);
		try { dbg.enterDecision(482, decisionCanBacktrack[482]);

		try {
			isCyclicDecision = true;
			alt482 = dfa482.predict(input);
		}
		catch (NoViableAltException nvae) {
			dbg.recognitionException(nvae);
			throw nvae;
		}
		} finally {dbg.exitDecision(482);}

		switch (alt482) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:23: ws
				{
				dbg.location(991,23);
				pushFollow(FOLLOW_ws_in_synpred40_Css36367);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;
			case 2 :
				dbg.enterAlt(2);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:28: ( ( ws )? SOLIDUS ( ws )? )
				{
				dbg.location(991,28);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:28: ( ( ws )? SOLIDUS ( ws )? )
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:29: ( ws )? SOLIDUS ( ws )?
				{
				dbg.location(991,29);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:29: ( ws )?
				int alt480=2;
				try { dbg.enterSubRule(480);
				try { dbg.enterDecision(480, decisionCanBacktrack[480]);

				int LA480_0 = input.LA(1);
				if ( (LA480_0==COMMENT||LA480_0==NL||LA480_0==WS) ) {
					alt480=1;
				}
				} finally {dbg.exitDecision(480);}

				switch (alt480) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:29: ws
						{
						dbg.location(991,29);
						pushFollow(FOLLOW_ws_in_synpred40_Css36372);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(480);}
				dbg.location(991,33);
				match(input,SOLIDUS,FOLLOW_SOLIDUS_in_synpred40_Css36375); if (state.failed) return;dbg.location(991,41);
				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:41: ( ws )?
				int alt481=2;
				try { dbg.enterSubRule(481);
				try { dbg.enterDecision(481, decisionCanBacktrack[481]);

				int LA481_0 = input.LA(1);
				if ( (LA481_0==COMMENT||LA481_0==NL||LA481_0==WS) ) {
					alt481=1;
				}
				} finally {dbg.exitDecision(481);}

				switch (alt481) {
					case 1 :
						dbg.enterAlt(1);

						// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:41: ws
						{
						dbg.location(991,41);
						pushFollow(FOLLOW_ws_in_synpred40_Css36377);
						ws();
						state._fsp--;
						if (state.failed) return;
						}
						break;

				}
				} finally {dbg.exitSubRule(481);}

				}

				}
				break;
			case 3 :
				dbg.enterAlt(3);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:991:61: 
				{
				}
				break;

		}
		} finally {dbg.exitSubRule(482);}
		dbg.location(991,63);
		pushFollow(FOLLOW_term_in_synpred40_Css36386);
		term();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred40_Css3

	// $ANTLR start synpred42_Css3
	public final void synpred42_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:6: ( ( ws )? COMMA ( ws )? cp_expression )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:7: ( ws )? COMMA ( ws )? cp_expression
		{
		dbg.location(1026,7);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:7: ( ws )?
		int alt483=2;
		try { dbg.enterSubRule(483);
		try { dbg.enterDecision(483, decisionCanBacktrack[483]);

		int LA483_0 = input.LA(1);
		if ( (LA483_0==COMMENT||LA483_0==NL||LA483_0==WS) ) {
			alt483=1;
		}
		} finally {dbg.exitDecision(483);}

		switch (alt483) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:7: ws
				{
				dbg.location(1026,7);
				pushFollow(FOLLOW_ws_in_synpred42_Css36826);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(483);}
		dbg.location(1026,11);
		match(input,COMMA,FOLLOW_COMMA_in_synpred42_Css36829); if (state.failed) return;dbg.location(1026,17);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:17: ( ws )?
		int alt484=2;
		try { dbg.enterSubRule(484);
		try { dbg.enterDecision(484, decisionCanBacktrack[484]);

		int LA484_0 = input.LA(1);
		if ( (LA484_0==COMMENT||LA484_0==NL||LA484_0==WS) ) {
			alt484=1;
		}
		} finally {dbg.exitDecision(484);}

		switch (alt484) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1026:17: ws
				{
				dbg.location(1026,17);
				pushFollow(FOLLOW_ws_in_synpred42_Css36831);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(484);}
		dbg.location(1026,21);
		pushFollow(FOLLOW_cp_expression_in_synpred42_Css36834);
		cp_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred42_Css3

	// $ANTLR start synpred43_Css3
	public final void synpred43_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1042:7: ( cp_expression_atom )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1042:8: cp_expression_atom
		{
		dbg.location(1042,8);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred43_Css36901);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred43_Css3

	// $ANTLR start synpred44_Css3
	public final void synpred44_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:9: ( ( ws )? cp_expression_operator )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:10: ( ws )? cp_expression_operator
		{
		dbg.location(1044,10);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:10: ( ws )?
		int alt485=2;
		try { dbg.enterSubRule(485);
		try { dbg.enterDecision(485, decisionCanBacktrack[485]);

		int LA485_0 = input.LA(1);
		if ( (LA485_0==COMMENT||LA485_0==NL||LA485_0==WS) ) {
			alt485=1;
		}
		} finally {dbg.exitDecision(485);}

		switch (alt485) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1044:10: ws
				{
				dbg.location(1044,10);
				pushFollow(FOLLOW_ws_in_synpred44_Css36924);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(485);}
		dbg.location(1044,14);
		pushFollow(FOLLOW_cp_expression_operator_in_synpred44_Css36927);
		cp_expression_operator();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred44_Css3

	// $ANTLR start synpred45_Css3
	public final void synpred45_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:11: ( ( ws )? cp_expression_atom )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:12: ( ws )? cp_expression_atom
		{
		dbg.location(1045,12);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:12: ( ws )?
		int alt486=2;
		try { dbg.enterSubRule(486);
		try { dbg.enterDecision(486, decisionCanBacktrack[486]);

		int LA486_0 = input.LA(1);
		if ( (LA486_0==COMMENT||LA486_0==NL||LA486_0==WS) ) {
			alt486=1;
		}
		} finally {dbg.exitDecision(486);}

		switch (alt486) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1045:12: ws
				{
				dbg.location(1045,12);
				pushFollow(FOLLOW_ws_in_synpred45_Css36953);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(486);}
		dbg.location(1045,16);
		pushFollow(FOLLOW_cp_expression_atom_in_synpred45_Css36956);
		cp_expression_atom();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred45_Css3

	// $ANTLR start synpred46_Css3
	public final void synpred46_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1059:13: ( cp_math_expression )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1059:14: cp_math_expression
		{
		dbg.location(1059,14);
		pushFollow(FOLLOW_cp_math_expression_in_synpred46_Css37096);
		cp_math_expression();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred46_Css3

	// $ANTLR start synpred47_Css3
	public final void synpred47_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:13: ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:14: ( ws )? ( PLUS | MINUS | STAR | SOLIDUS )
		{
		dbg.location(1086,14);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:14: ( ws )?
		int alt487=2;
		try { dbg.enterSubRule(487);
		try { dbg.enterDecision(487, decisionCanBacktrack[487]);

		int LA487_0 = input.LA(1);
		if ( (LA487_0==COMMENT||LA487_0==NL||LA487_0==WS) ) {
			alt487=1;
		}
		} finally {dbg.exitDecision(487);}

		switch (alt487) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1086:14: ws
				{
				dbg.location(1086,14);
				pushFollow(FOLLOW_ws_in_synpred47_Css37229);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(487);}
		dbg.location(1086,18);
		if ( input.LA(1)==MINUS||input.LA(1)==PLUS||(input.LA(1) >= SOLIDUS && input.LA(1) <= STAR) ) {
			input.consume();
			state.errorRecovery=false;
			state.failed=false;
		}
		else {
			if (state.backtracking>0) {state.failed=true; return;}
			MismatchedSetException mse = new MismatchedSetException(null,input);
			dbg.recognitionException(mse);
			throw mse;
		}
		}

	}
	// $ANTLR end synpred47_Css3

	// $ANTLR start synpred48_Css3
	public final void synpred48_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:77: ( ( ws )? combinator ( ws )? )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:78: ( ws )? combinator ( ws )?
		{
		dbg.location(1118,78);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:78: ( ws )?
		int alt488=2;
		try { dbg.enterSubRule(488);
		try { dbg.enterDecision(488, decisionCanBacktrack[488]);

		int LA488_0 = input.LA(1);
		if ( (LA488_0==COMMENT||LA488_0==NL||LA488_0==WS) ) {
			alt488=1;
		}
		} finally {dbg.exitDecision(488);}

		switch (alt488) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:78: ws
				{
				dbg.location(1118,78);
				pushFollow(FOLLOW_ws_in_synpred48_Css37521);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(488);}
		dbg.location(1118,82);
		pushFollow(FOLLOW_combinator_in_synpred48_Css37524);
		combinator();
		state._fsp--;
		if (state.failed) return;dbg.location(1118,93);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:93: ( ws )?
		int alt489=2;
		try { dbg.enterSubRule(489);
		try { dbg.enterDecision(489, decisionCanBacktrack[489]);

		int LA489_0 = input.LA(1);
		if ( (LA489_0==COMMENT||LA489_0==NL||LA489_0==WS) ) {
			alt489=1;
		}
		} finally {dbg.exitDecision(489);}

		switch (alt489) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:93: ws
				{
				dbg.location(1118,93);
				pushFollow(FOLLOW_ws_in_synpred48_Css37526);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(489);}

		}

	}
	// $ANTLR end synpred48_Css3

	// $ANTLR start synpred49_Css3
	public final void synpred49_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:172: ( pseudo )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:173: pseudo
		{
		dbg.location(1118,173);
		pushFollow(FOLLOW_pseudo_in_synpred49_Css37562);
		pseudo();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred49_Css3

	// $ANTLR start synpred50_Css3
	public final void synpred50_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:191: ( ( ws )? LPAREN )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:192: ( ws )? LPAREN
		{
		dbg.location(1118,192);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:192: ( ws )?
		int alt490=2;
		try { dbg.enterSubRule(490);
		try { dbg.enterDecision(490, decisionCanBacktrack[490]);

		int LA490_0 = input.LA(1);
		if ( (LA490_0==COMMENT||LA490_0==NL||LA490_0==WS) ) {
			alt490=1;
		}
		} finally {dbg.exitDecision(490);}

		switch (alt490) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1118:192: ws
				{
				dbg.location(1118,192);
				pushFollow(FOLLOW_ws_in_synpred50_Css37570);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(490);}
		dbg.location(1118,196);
		match(input,LPAREN,FOLLOW_LPAREN_in_synpred50_Css37573); if (state.failed) return;
		}

	}
	// $ANTLR end synpred50_Css3

	// $ANTLR start synpred51_Css3
	public final void synpred51_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1127:25: ( webkitKeyframeSelectors )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1127:26: webkitKeyframeSelectors
		{
		dbg.location(1127,26);
		pushFollow(FOLLOW_webkitKeyframeSelectors_in_synpred51_Css37689);
		webkitKeyframeSelectors();
		state._fsp--;
		if (state.failed) return;
		}

	}
	// $ANTLR end synpred51_Css3

	// $ANTLR start synpred52_Css3
	public final void synpred52_Css3_fragment() throws RecognitionException {
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:19: ( ( ws )? COMMA )
		dbg.enterAlt(1);

		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:20: ( ws )? COMMA
		{
		dbg.location(1305,20);
		// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:20: ( ws )?
		int alt491=2;
		try { dbg.enterSubRule(491);
		try { dbg.enterDecision(491, decisionCanBacktrack[491]);

		int LA491_0 = input.LA(1);
		if ( (LA491_0==COMMENT||LA491_0==NL||LA491_0==WS) ) {
			alt491=1;
		}
		} finally {dbg.exitDecision(491);}

		switch (alt491) {
			case 1 :
				dbg.enterAlt(1);

				// Y:\\Projects\\nb\\incubator-netbeans\\ide\\css.lib\\src\\org\\netbeans\\modules\\css\\lib\\Css3.g:1305:20: ws
				{
				dbg.location(1305,20);
				pushFollow(FOLLOW_ws_in_synpred52_Css38921);
				ws();
				state._fsp--;
				if (state.failed) return;
				}
				break;

		}
		} finally {dbg.exitSubRule(491);}
		dbg.location(1305,24);
		match(input,COMMA,FOLLOW_COMMA_in_synpred52_Css38924); if (state.failed) return;
		}

	}
	// $ANTLR end synpred52_Css3

	// Delegated rules

	public final boolean synpred14_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred14_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred22_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred22_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred9_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred9_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred45_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred45_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred4_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred4_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred37_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred37_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred19_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred19_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred23_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred23_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred31_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred31_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred15_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred15_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred32_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred32_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred35_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred35_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred38_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred38_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred43_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred43_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred46_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred46_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred18_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred18_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred27_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred27_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred21_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred21_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred29_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred29_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred40_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred40_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred16_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred16_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred24_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred24_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred13_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred13_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred10_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred10_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred6_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred6_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred3_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred3_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred11_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred11_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred50_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred50_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred17_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred17_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred42_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred42_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred48_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred48_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred7_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred7_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred34_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred34_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred51_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred51_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred1_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred1_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred26_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred26_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred12_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred12_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred49_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred49_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred20_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred20_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred8_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred8_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred2_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred2_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred5_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred5_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred44_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred44_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred30_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred30_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred47_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred47_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred36_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred36_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred39_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred39_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred33_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred33_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred25_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred25_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred52_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred52_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}
	public final boolean synpred28_Css3() {
		state.backtracking++;
		dbg.beginBacktrack(state.backtracking);
		int start = input.mark();
		try {
			synpred28_Css3_fragment(); // can never throw exception
		} catch (RecognitionException re) {
			System.err.println("impossible: "+re);
		}
		boolean success = !state.failed;
		input.rewind(start);
		dbg.endBacktrack(state.backtracking, success);
		state.backtracking--;
		state.failed=false;
		return success;
	}


	protected DFA3 dfa3 = new DFA3(this);
	protected DFA5 dfa5 = new DFA5(this);
	protected DFA8 dfa8 = new DFA8(this);
	protected DFA32 dfa32 = new DFA32(this);
	protected DFA24 dfa24 = new DFA24(this);
	protected DFA38 dfa38 = new DFA38(this);
	protected DFA44 dfa44 = new DFA44(this);
	protected DFA46 dfa46 = new DFA46(this);
	protected DFA50 dfa50 = new DFA50(this);
	protected DFA63 dfa63 = new DFA63(this);
	protected DFA72 dfa72 = new DFA72(this);
	protected DFA81 dfa81 = new DFA81(this);
	protected DFA83 dfa83 = new DFA83(this);
	protected DFA84 dfa84 = new DFA84(this);
	protected DFA117 dfa117 = new DFA117(this);
	protected DFA124 dfa124 = new DFA124(this);
	protected DFA128 dfa128 = new DFA128(this);
	protected DFA148 dfa148 = new DFA148(this);
	protected DFA150 dfa150 = new DFA150(this);
	protected DFA155 dfa155 = new DFA155(this);
	protected DFA160 dfa160 = new DFA160(this);
	protected DFA166 dfa166 = new DFA166(this);
	protected DFA161 dfa161 = new DFA161(this);
	protected DFA183 dfa183 = new DFA183(this);
	protected DFA176 dfa176 = new DFA176(this);
	protected DFA175 dfa175 = new DFA175(this);
	protected DFA180 dfa180 = new DFA180(this);
	protected DFA185 dfa185 = new DFA185(this);
	protected DFA187 dfa187 = new DFA187(this);
	protected DFA191 dfa191 = new DFA191(this);
	protected DFA199 dfa199 = new DFA199(this);
	protected DFA198 dfa198 = new DFA198(this);
	protected DFA197 dfa197 = new DFA197(this);
	protected DFA203 dfa203 = new DFA203(this);
	protected DFA206 dfa206 = new DFA206(this);
	protected DFA229 dfa229 = new DFA229(this);
	protected DFA245 dfa245 = new DFA245(this);
	protected DFA252 dfa252 = new DFA252(this);
	protected DFA251 dfa251 = new DFA251(this);
	protected DFA264 dfa264 = new DFA264(this);
	protected DFA274 dfa274 = new DFA274(this);
	protected DFA273 dfa273 = new DFA273(this);
	protected DFA283 dfa283 = new DFA283(this);
	protected DFA288 dfa288 = new DFA288(this);
	protected DFA294 dfa294 = new DFA294(this);
	protected DFA308 dfa308 = new DFA308(this);
	protected DFA313 dfa313 = new DFA313(this);
	protected DFA320 dfa320 = new DFA320(this);
	protected DFA324 dfa324 = new DFA324(this);
	protected DFA339 dfa339 = new DFA339(this);
	protected DFA341 dfa341 = new DFA341(this);
	protected DFA354 dfa354 = new DFA354(this);
	protected DFA357 dfa357 = new DFA357(this);
	protected DFA373 dfa373 = new DFA373(this);
	protected DFA400 dfa400 = new DFA400(this);
	protected DFA406 dfa406 = new DFA406(this);
	protected DFA414 dfa414 = new DFA414(this);
	protected DFA413 dfa413 = new DFA413(this);
	protected DFA417 dfa417 = new DFA417(this);
	protected DFA422 dfa422 = new DFA422(this);
	protected DFA442 dfa442 = new DFA442(this);
	protected DFA449 dfa449 = new DFA449(this);
	protected DFA444 dfa444 = new DFA444(this);
	protected DFA468 dfa468 = new DFA468(this);
	protected DFA463 dfa463 = new DFA463(this);
	protected DFA477 dfa477 = new DFA477(this);
	protected DFA482 dfa482 = new DFA482(this);
	static final String DFA3_eotS =
		"\5\uffff";
	static final String DFA3_eofS =
		"\1\2\4\uffff";
	static final String DFA3_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA3_maxS =
		"\1\u0093\1\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA3_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA3_specialS =
		"\5\uffff}>";
	static final String[] DFA3_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\1\1\1\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff"+
			"\3\2\1\uffff\2\2\2\uffff\4\2\1\uffff\3\2\1\uffff\5\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\5\2\7\uffff\1\2",
			"\1\2\1\uffff\1\3\73\uffff\1\3\60\uffff\1\4\21\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\73\uffff\1\3\60\uffff\1\4\21\uffff\1\3",
			""
	};

	static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
	static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
	static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
	static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
	static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
	static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
	static final short[][] DFA3_transition;

	static {
		int numStates = DFA3_transitionS.length;
		DFA3_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
		}
	}

	protected class DFA3 extends DFA {

		public DFA3(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}
		@Override
		public String getDescription() {
			return "280:6: ( charSet ( ws )? )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA5_eotS =
		"\5\uffff";
	static final String DFA5_eofS =
		"\1\2\4\uffff";
	static final String DFA5_minS =
		"\1\6\1\23\1\uffff\1\23\1\uffff";
	static final String DFA5_maxS =
		"\1\u0093\1\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA5_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA5_specialS =
		"\5\uffff}>";
	static final String[] DFA5_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff\1\2\6\uffff"+
			"\3\2\5\uffff\1\1\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff\3\2\1\uffff"+
			"\2\2\2\uffff\4\2\1\uffff\3\2\1\uffff\5\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\1\2\1\uffff\5\2\7\uffff\1\2",
			"\1\2\1\uffff\1\3\34\uffff\1\4\36\uffff\1\3\60\uffff\1\4\13\uffff\1\4"+
			"\5\uffff\1\3",
			"",
			"\1\2\1\uffff\1\3\34\uffff\1\4\36\uffff\1\3\60\uffff\1\4\13\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA5_eot = DFA.unpackEncodedString(DFA5_eotS);
	static final short[] DFA5_eof = DFA.unpackEncodedString(DFA5_eofS);
	static final char[] DFA5_min = DFA.unpackEncodedStringToUnsignedChars(DFA5_minS);
	static final char[] DFA5_max = DFA.unpackEncodedStringToUnsignedChars(DFA5_maxS);
	static final short[] DFA5_accept = DFA.unpackEncodedString(DFA5_acceptS);
	static final short[] DFA5_special = DFA.unpackEncodedString(DFA5_specialS);
	static final short[][] DFA5_transition;

	static {
		int numStates = DFA5_transitionS.length;
		DFA5_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA5_transition[i] = DFA.unpackEncodedString(DFA5_transitionS[i]);
		}
	}

	protected class DFA5 extends DFA {

		public DFA5(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 5;
			this.eot = DFA5_eot;
			this.eof = DFA5_eof;
			this.min = DFA5_min;
			this.max = DFA5_max;
			this.accept = DFA5_accept;
			this.special = DFA5_special;
			this.transition = DFA5_transition;
		}
		@Override
		public String getDescription() {
			return "282:9: ( namespaces )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA8_eotS =
		"\5\uffff";
	static final String DFA8_eofS =
		"\1\1\4\uffff";
	static final String DFA8_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA8_maxS =
		"\1\u0093\1\uffff\2\u0094\1\uffff";
	static final String DFA8_acceptS =
		"\1\uffff\1\2\2\uffff\1\1";
	static final String DFA8_specialS =
		"\5\uffff}>";
	static final String[] DFA8_transitionS = {
			"\2\1\2\uffff\5\1\3\uffff\2\1\3\uffff\1\1\5\uffff\3\1\7\uffff\1\1\2\uffff"+
			"\2\1\2\uffff\2\1\2\uffff\1\1\1\uffff\1\1\6\uffff\4\1\2\uffff\1\1\6\uffff"+
			"\3\1\5\uffff\1\2\11\uffff\1\1\2\uffff\2\1\6\uffff\3\1\2\uffff\3\1\1\uffff"+
			"\2\1\2\uffff\4\1\1\uffff\3\1\1\uffff\5\1\1\uffff\1\1\1\uffff\1\1\1\uffff"+
			"\1\1\1\uffff\5\1\7\uffff\1\1",
			"",
			"\1\1\1\uffff\1\3\34\uffff\1\4\36\uffff\1\3\60\uffff\1\4\13\uffff\1\4"+
			"\5\uffff\1\3",
			"\1\1\1\uffff\1\3\34\uffff\1\4\36\uffff\1\3\60\uffff\1\4\13\uffff\1\4"+
			"\5\uffff\1\3",
			""
	};

	static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
	static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
	static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
	static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
	static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
	static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
	static final short[][] DFA8_transition;

	static {
		int numStates = DFA8_transitionS.length;
		DFA8_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
		}
	}

	protected class DFA8 extends DFA {

		public DFA8(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 8;
			this.eot = DFA8_eot;
			this.eof = DFA8_eof;
			this.min = DFA8_min;
			this.max = DFA8_max;
			this.accept = DFA8_accept;
			this.special = DFA8_special;
			this.transition = DFA8_transition;
		}
		@Override
		public String getDescription() {
			return "()+ loopback of 289:2: ( namespace ( ws )? )+";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA32_eotS =
		"\10\uffff";
	static final String DFA32_eofS =
		"\10\uffff";
	static final String DFA32_minS =
		"\1\64\2\25\1\0\1\uffff\1\0\2\uffff";
	static final String DFA32_maxS =
		"\1\64\2\u0094\1\0\1\uffff\1\0\2\uffff";
	static final String DFA32_acceptS =
		"\4\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA32_specialS =
		"\3\uffff\1\0\1\uffff\1\1\2\uffff}>";
	static final String[] DFA32_transitionS = {
			"\1\1",
			"\1\2\60\uffff\1\4\12\uffff\1\2\60\uffff\1\3\13\uffff\1\3\5\uffff\1\2",
			"\1\2\60\uffff\1\4\12\uffff\1\2\60\uffff\1\5\13\uffff\1\5\5\uffff\1\2",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			""
	};

	static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
	static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
	static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
	static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
	static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
	static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
	static final short[][] DFA32_transition;

	static {
		int numStates = DFA32_transitionS.length;
		DFA32_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
		}
	}

	protected class DFA32 extends DFA {

		public DFA32(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}
		@Override
		public String getDescription() {
			return "317:1: importItem : ( IMPORT_SYM ( ws )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? resourceIdentifier ( ( ws )? COMMA ( ws )? resourceIdentifier )* ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? |{...}? IMPORT_SYM ( ws )? ( LPAREN less_import_types RPAREN ( ws )? )? resourceIdentifier ( ( ( ws )? mediaQueryList )=> ( ws )? mediaQueryList )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA32_3 = input.LA(1);
						 
						int index32_3 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index32_3);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA32_5 = input.LA(1);
						 
						int index32_5 = input.index();
						input.rewind();
						s = -1;
						if ( (!(evalPredicate((evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isScssSource(),"isScssSource()")),""))) ) {s = 6;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 7;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 4;}
						 
						input.seek(index32_5);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 32, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA24_eotS =
		"\4\uffff";
	static final String DFA24_eofS =
		"\2\2\2\uffff";
	static final String DFA24_minS =
		"\2\6\2\uffff";
	static final String DFA24_maxS =
		"\2\u0094\2\uffff";
	static final String DFA24_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA24_specialS =
		"\4\uffff}>";
	static final String[] DFA24_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2\4\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\4\2\1\uffff\3\2\1\uffff\5\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\5\2\5\uffff\1\2\1\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\4\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\1\2\4\uffff\1\2"+
			"\2\uffff\2\2\2\uffff\1\2\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff"+
			"\5\2\1\uffff\3\2\1\uffff\5\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff"+
			"\5\2\5\uffff\1\2\1\uffff\1\2\1\1",
			"",
			""
	};

	static final short[] DFA24_eot = DFA.unpackEncodedString(DFA24_eotS);
	static final short[] DFA24_eof = DFA.unpackEncodedString(DFA24_eofS);
	static final char[] DFA24_min = DFA.unpackEncodedStringToUnsignedChars(DFA24_minS);
	static final char[] DFA24_max = DFA.unpackEncodedStringToUnsignedChars(DFA24_maxS);
	static final short[] DFA24_accept = DFA.unpackEncodedString(DFA24_acceptS);
	static final short[] DFA24_special = DFA.unpackEncodedString(DFA24_specialS);
	static final short[][] DFA24_transition;

	static {
		int numStates = DFA24_transitionS.length;
		DFA24_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA24_transition[i] = DFA.unpackEncodedString(DFA24_transitionS[i]);
		}
	}

	protected class DFA24 extends DFA {

		public DFA24(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 24;
			this.eot = DFA24_eot;
			this.eof = DFA24_eof;
			this.min = DFA24_min;
			this.max = DFA24_max;
			this.accept = DFA24_accept;
			this.special = DFA24_special;
			this.transition = DFA24_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 322:61: ( ( ws )? COMMA ( ws )? resourceIdentifier )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA38_eotS =
		"\6\uffff";
	static final String DFA38_eofS =
		"\6\uffff";
	static final String DFA38_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA38_maxS =
		"\2\u0094\1\0\1\uffff\1\0\1\uffff";
	static final String DFA38_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA38_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA38_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\4\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\4\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3"+
			"\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
	static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
	static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
	static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
	static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
	static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
	static final short[][] DFA38_transition;

	static {
		int numStates = DFA38_transitionS.length;
		DFA38_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
		}
	}

	protected class DFA38 extends DFA {

		public DFA38(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}
		@Override
		public String getDescription() {
			return "339:26: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA38_2 = input.LA(1);
						 
						int index38_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index38_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA38_4 = input.LA(1);
						 
						int index38_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred4_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index38_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 38, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA44_eotS =
		"\4\uffff";
	static final String DFA44_eofS =
		"\4\uffff";
	static final String DFA44_minS =
		"\2\6\2\uffff";
	static final String DFA44_maxS =
		"\2\u0094\2\uffff";
	static final String DFA44_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA44_specialS =
		"\4\uffff}>";
	static final String[] DFA44_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA44_eot = DFA.unpackEncodedString(DFA44_eotS);
	static final short[] DFA44_eof = DFA.unpackEncodedString(DFA44_eofS);
	static final char[] DFA44_min = DFA.unpackEncodedStringToUnsignedChars(DFA44_minS);
	static final char[] DFA44_max = DFA.unpackEncodedStringToUnsignedChars(DFA44_maxS);
	static final short[] DFA44_accept = DFA.unpackEncodedString(DFA44_acceptS);
	static final short[] DFA44_special = DFA.unpackEncodedString(DFA44_specialS);
	static final short[][] DFA44_transition;

	static {
		int numStates = DFA44_transitionS.length;
		DFA44_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA44_transition[i] = DFA.unpackEncodedString(DFA44_transitionS[i]);
		}
	}

	protected class DFA44 extends DFA {

		public DFA44(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 44;
			this.eot = DFA44_eot;
			this.eof = DFA44_eof;
			this.min = DFA44_min;
			this.max = DFA44_max;
			this.accept = DFA44_accept;
			this.special = DFA44_special;
			this.transition = DFA44_transition;
		}
		@Override
		public String getDescription() {
			return "350:87: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA46_eotS =
		"\4\uffff";
	static final String DFA46_eofS =
		"\4\uffff";
	static final String DFA46_minS =
		"\2\6\2\uffff";
	static final String DFA46_maxS =
		"\2\u0094\2\uffff";
	static final String DFA46_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA46_specialS =
		"\4\uffff}>";
	static final String[] DFA46_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
	static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
	static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
	static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
	static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
	static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
	static final short[][] DFA46_transition;

	static {
		int numStates = DFA46_transitionS.length;
		DFA46_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
		}
	}

	protected class DFA46 extends DFA {

		public DFA46(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 46;
			this.eot = DFA46_eot;
			this.eof = DFA46_eof;
			this.min = DFA46_min;
			this.max = DFA46_max;
			this.accept = DFA46_accept;
			this.special = DFA46_special;
			this.transition = DFA46_transition;
		}
		@Override
		public String getDescription() {
			return "351:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA50_eotS =
		"\4\uffff";
	static final String DFA50_eofS =
		"\2\2\2\uffff";
	static final String DFA50_minS =
		"\2\6\2\uffff";
	static final String DFA50_maxS =
		"\2\u0094\2\uffff";
	static final String DFA50_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA50_specialS =
		"\1\1\1\0\2\uffff}>";
	static final String[] DFA50_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\5\uffff\5\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\2\uffff\4\2\1\uffff\3\2\1\uffff"+
			"\5\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\3\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\5\uffff\5\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\3\2\1\uffff"+
			"\5\2\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
	static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
	static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
	static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
	static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
	static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
	static final short[][] DFA50_transition;

	static {
		int numStates = DFA50_transitionS.length;
		DFA50_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
		}
	}

	protected class DFA50 extends DFA {

		public DFA50(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 50;
			this.eot = DFA50_eot;
			this.eof = DFA50_eof;
			this.min = DFA50_min;
			this.max = DFA50_max;
			this.accept = DFA50_accept;
			this.special = DFA50_special;
			this.transition = DFA50_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 368:15: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? mediaQuery )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA50_1 = input.LA(1);
						 
						int index50_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA50_1==EOF||(LA50_1 >= AT_IDENT && LA50_1 <= AT_SIGN)||(LA50_1 >= BOTTOMCENTER_SYM && LA50_1 <= BOTTOMRIGHT_SYM)||(LA50_1 >= CHARSET_SYM && LA50_1 <= COLON)||LA50_1==COUNTER_STYLE_SYM||(LA50_1 >= DCOLON && LA50_1 <= DOT)||LA50_1==FONT_FACE_SYM||(LA50_1 >= GEN && LA50_1 <= GREATER)||(LA50_1 >= HASH && LA50_1 <= HASH_SYMBOL)||LA50_1==IDENT||LA50_1==IMPORT_SYM||(LA50_1 >= LBRACE && LA50_1 <= LEFTTOP_SYM)||LA50_1==LESS_AND||(LA50_1 >= MEDIA_SYM && LA50_1 <= MOZ_DOCUMENT_SYM)||LA50_1==NAMESPACE_SYM||LA50_1==PAGE_SYM||(LA50_1 >= PIPE && LA50_1 <= PLUS)||LA50_1==RBRACE||(LA50_1 >= RIGHTBOTTOM_SYM && LA50_1 <= RPAREN)||(LA50_1 >= SASS_AT_ROOT && LA50_1 <= SASS_DEBUG)||(LA50_1 >= SASS_EACH && LA50_1 <= SASS_ELSE)||(LA50_1 >= SASS_ERROR && LA50_1 <= SASS_FUNCTION)||(LA50_1 >= SASS_IF && LA50_1 <= SASS_MIXIN)||(LA50_1 >= SASS_RETURN && LA50_1 <= SEMI)||LA50_1==STAR||LA50_1==SUPPORTS_SYM||LA50_1==TILDE||(LA50_1 >= TOPCENTER_SYM && LA50_1 <= TOPRIGHT_SYM)||LA50_1==VARIABLE||LA50_1==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA50_1==COMMENT||LA50_1==NL||LA50_1==WS) ) {s = 1;}
						else if ( (LA50_1==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index50_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA50_0 = input.LA(1);
						 
						int index50_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA50_0==COMMENT||LA50_0==NL||LA50_0==WS) ) {s = 1;}
						else if ( (LA50_0==EOF||(LA50_0 >= AT_IDENT && LA50_0 <= AT_SIGN)||(LA50_0 >= BOTTOMCENTER_SYM && LA50_0 <= BOTTOMRIGHT_SYM)||(LA50_0 >= CHARSET_SYM && LA50_0 <= COLON)||LA50_0==COUNTER_STYLE_SYM||(LA50_0 >= DCOLON && LA50_0 <= DOT)||LA50_0==FONT_FACE_SYM||(LA50_0 >= GEN && LA50_0 <= GREATER)||(LA50_0 >= HASH && LA50_0 <= HASH_SYMBOL)||LA50_0==IDENT||LA50_0==IMPORT_SYM||(LA50_0 >= LBRACE && LA50_0 <= LEFTTOP_SYM)||LA50_0==LESS_AND||(LA50_0 >= MEDIA_SYM && LA50_0 <= MOZ_DOCUMENT_SYM)||LA50_0==NAMESPACE_SYM||LA50_0==PAGE_SYM||(LA50_0 >= PIPE && LA50_0 <= PLUS)||LA50_0==RBRACE||(LA50_0 >= RIGHTBOTTOM_SYM && LA50_0 <= RPAREN)||(LA50_0 >= SASS_AT_ROOT && LA50_0 <= SASS_DEBUG)||(LA50_0 >= SASS_EACH && LA50_0 <= SASS_ELSE)||(LA50_0 >= SASS_EXTEND && LA50_0 <= SASS_FUNCTION)||(LA50_0 >= SASS_IF && LA50_0 <= SASS_MIXIN)||(LA50_0 >= SASS_RETURN && LA50_0 <= SEMI)||LA50_0==STAR||LA50_0==SUPPORTS_SYM||LA50_0==TILDE||(LA50_0 >= TOPCENTER_SYM && LA50_0 <= TOPRIGHT_SYM)||LA50_0==VARIABLE||LA50_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA50_0==COMMA) && (synpred10_Css3())) {s = 3;}
						 
						input.seek(index50_0);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 50, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA63_eotS =
		"\4\uffff";
	static final String DFA63_eofS =
		"\4\uffff";
	static final String DFA63_minS =
		"\2\23\2\uffff";
	static final String DFA63_maxS =
		"\2\u0094\2\uffff";
	static final String DFA63_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA63_specialS =
		"\4\uffff}>";
	static final String[] DFA63_transitionS = {
			"\1\2\1\uffff\1\1\73\uffff\1\1\26\uffff\1\3\53\uffff\1\1",
			"\1\2\1\uffff\1\1\73\uffff\1\1\26\uffff\1\3\53\uffff\1\1",
			"",
			""
	};

	static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
	static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
	static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
	static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
	static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
	static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
	static final short[][] DFA63_transition;

	static {
		int numStates = DFA63_transitionS.length;
		DFA63_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
		}
	}

	protected class DFA63 extends DFA {

		public DFA63(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 63;
			this.eot = DFA63_eot;
			this.eof = DFA63_eof;
			this.min = DFA63_min;
			this.max = DFA63_max;
			this.accept = DFA63_accept;
			this.special = DFA63_special;
			this.transition = DFA63_transition;
		}
		@Override
		public String getDescription() {
			return "388:42: ( mediaFeatureValue )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA72_eotS =
		"\6\uffff";
	static final String DFA72_eofS =
		"\2\3\4\uffff";
	static final String DFA72_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA72_maxS =
		"\2\u0094\1\0\1\uffff\1\0\1\uffff";
	static final String DFA72_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA72_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA72_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\4\3\1\2\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\7\uffff\1\3"+
			"\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\3\3\2\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\4\3\1\4\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\7\uffff\1\3"+
			"\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
	static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
	static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
	static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
	static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
	static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
	static final short[][] DFA72_transition;

	static {
		int numStates = DFA72_transitionS.length;
		DFA72_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
		}
	}

	protected class DFA72 extends DFA {

		public DFA72(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 72;
			this.eot = DFA72_eot;
			this.eof = DFA72_eof;
			this.min = DFA72_min;
			this.max = DFA72_max;
			this.accept = DFA72_accept;
			this.special = DFA72_special;
			this.transition = DFA72_transition;
		}
		@Override
		public String getDescription() {
			return "409:21: ( ( ( ws )? SEMI )=> ( ws )? SEMI )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA72_2 = input.LA(1);
						 
						int index72_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index72_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA72_4 = input.LA(1);
						 
						int index72_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred15_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index72_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 72, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA81_eotS =
		"\4\uffff";
	static final String DFA81_eofS =
		"\4\uffff";
	static final String DFA81_minS =
		"\2\25\2\uffff";
	static final String DFA81_maxS =
		"\2\u0094\2\uffff";
	static final String DFA81_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA81_specialS =
		"\4\uffff}>";
	static final String[] DFA81_transitionS = {
			"\1\1\44\uffff\1\2\26\uffff\1\1\26\uffff\1\2\53\uffff\1\1",
			"\1\1\34\uffff\1\3\7\uffff\1\2\26\uffff\1\1\26\uffff\1\2\53\uffff\1\1",
			"",
			""
	};

	static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
	static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
	static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
	static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
	static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
	static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
	static final short[][] DFA81_transition;

	static {
		int numStates = DFA81_transitionS.length;
		DFA81_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
		}
	}

	protected class DFA81 extends DFA {

		public DFA81(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}
		@Override
		public String getDescription() {
			return "444:21: ( ws supportsWithOperator )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA83_eotS =
		"\4\uffff";
	static final String DFA83_eofS =
		"\4\uffff";
	static final String DFA83_minS =
		"\2\25\2\uffff";
	static final String DFA83_maxS =
		"\2\u0094\2\uffff";
	static final String DFA83_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA83_specialS =
		"\4\uffff}>";
	static final String[] DFA83_transitionS = {
			"\1\1\44\uffff\1\2\26\uffff\1\1\26\uffff\1\2\53\uffff\1\1",
			"\1\1\34\uffff\1\3\7\uffff\1\2\26\uffff\1\1\26\uffff\1\2\53\uffff\1\1",
			"",
			""
	};

	static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
	static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
	static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
	static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
	static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
	static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
	static final short[][] DFA83_transition;

	static {
		int numStates = DFA83_transitionS.length;
		DFA83_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
		}
	}

	protected class DFA83 extends DFA {

		public DFA83(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 83;
			this.eot = DFA83_eot;
			this.eof = DFA83_eof;
			this.min = DFA83_min;
			this.max = DFA83_max;
			this.accept = DFA83_accept;
			this.special = DFA83_special;
			this.transition = DFA83_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 449:29: ( ws supportsConjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA84_eotS =
		"\4\uffff";
	static final String DFA84_eofS =
		"\4\uffff";
	static final String DFA84_minS =
		"\2\25\2\uffff";
	static final String DFA84_maxS =
		"\2\u0094\2\uffff";
	static final String DFA84_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA84_specialS =
		"\4\uffff}>";
	static final String[] DFA84_transitionS = {
			"\1\1\44\uffff\1\2\26\uffff\1\1\26\uffff\1\2\53\uffff\1\1",
			"\1\1\34\uffff\1\3\7\uffff\1\2\26\uffff\1\1\26\uffff\1\2\53\uffff\1\1",
			"",
			""
	};

	static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
	static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
	static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
	static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
	static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
	static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
	static final short[][] DFA84_transition;

	static {
		int numStates = DFA84_transitionS.length;
		DFA84_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
		}
	}

	protected class DFA84 extends DFA {

		public DFA84(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 84;
			this.eot = DFA84_eot;
			this.eof = DFA84_eof;
			this.min = DFA84_min;
			this.max = DFA84_max;
			this.accept = DFA84_accept;
			this.special = DFA84_special;
			this.transition = DFA84_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 450:31: ( ws supportsDisjunction )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA117_eotS =
		"\4\uffff";
	static final String DFA117_eofS =
		"\1\2\3\uffff";
	static final String DFA117_minS =
		"\2\24\2\uffff";
	static final String DFA117_maxS =
		"\2\u0094\2\uffff";
	static final String DFA117_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA117_specialS =
		"\4\uffff}>";
	static final String[] DFA117_transitionS = {
			"\1\3\1\1\44\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"\1\3\1\1\44\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"",
			""
	};

	static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
	static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
	static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
	static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
	static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
	static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
	static final short[][] DFA117_transition;

	static {
		int numStates = DFA117_transitionS.length;
		DFA117_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
		}
	}

	protected class DFA117 extends DFA {

		public DFA117(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 117;
			this.eot = DFA117_eot;
			this.eof = DFA117_eof;
			this.min = DFA117_min;
			this.max = DFA117_max;
			this.accept = DFA117_accept;
			this.special = DFA117_special;
			this.transition = DFA117_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 533:85: ( ( ws )? COMMA ( ws )? ({...}? IDENT |{...}? IDENT | PERCENTAGE ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA124_eotS =
		"\5\uffff";
	static final String DFA124_eofS =
		"\5\uffff";
	static final String DFA124_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA124_maxS =
		"\1\u0093\1\uffff\2\u0094\1\uffff";
	static final String DFA124_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA124_specialS =
		"\5\uffff}>";
	static final String[] DFA124_transitionS = {
			"\2\1\2\uffff\5\2\3\uffff\1\1\4\uffff\1\1\17\uffff\1\1\2\uffff\1\1\4\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\1\1\7\uffff\3\2\11\uffff\3\1\5\uffff\1\1\11"+
			"\uffff\1\1\12\uffff\3\2\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\2"+
			"\1\1\uffff\3\1\1\uffff\4\1\2\uffff\1\1\5\uffff\5\2\5\uffff\1\1\1\uffff"+
			"\1\1",
			"",
			"\1\1\1\uffff\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			"\1\1\1\uffff\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			""
	};

	static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
	static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
	static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
	static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
	static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
	static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
	static final short[][] DFA124_transition;

	static {
		int numStates = DFA124_transitionS.length;
		DFA124_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
		}
	}

	protected class DFA124 extends DFA {

		public DFA124(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 124;
			this.eot = DFA124_eot;
			this.eof = DFA124_eof;
			this.min = DFA124_min;
			this.max = DFA124_max;
			this.accept = DFA124_accept;
			this.special = DFA124_special;
			this.transition = DFA124_transition;
		}
		@Override
		public String getDescription() {
			return "541:14: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA128_eotS =
		"\5\uffff";
	static final String DFA128_eofS =
		"\5\uffff";
	static final String DFA128_minS =
		"\1\6\1\uffff\2\23\1\uffff";
	static final String DFA128_maxS =
		"\1\u0093\1\uffff\2\u0094\1\uffff";
	static final String DFA128_acceptS =
		"\1\uffff\1\1\2\uffff\1\2";
	static final String DFA128_specialS =
		"\5\uffff}>";
	static final String[] DFA128_transitionS = {
			"\2\1\2\uffff\5\2\3\uffff\1\1\4\uffff\1\1\17\uffff\1\1\2\uffff\1\1\4\uffff"+
			"\1\1\2\uffff\1\1\1\uffff\1\1\7\uffff\3\2\11\uffff\3\1\5\uffff\1\1\11"+
			"\uffff\1\1\12\uffff\3\2\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\2"+
			"\1\1\uffff\3\1\1\uffff\4\1\2\uffff\1\1\5\uffff\5\2\5\uffff\1\1\1\uffff"+
			"\1\1",
			"",
			"\1\1\1\uffff\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			"\1\1\1\uffff\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			""
	};

	static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
	static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
	static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
	static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
	static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
	static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
	static final short[][] DFA128_transition;

	static {
		int numStates = DFA128_transitionS.length;
		DFA128_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
		}
	}

	protected class DFA128 extends DFA {

		public DFA128(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 128;
			this.eot = DFA128_eot;
			this.eof = DFA128_eof;
			this.min = DFA128_min;
			this.max = DFA128_max;
			this.accept = DFA128_accept;
			this.special = DFA128_special;
			this.transition = DFA128_transition;
		}
		@Override
		public String getDescription() {
			return "541:60: ( propertyDeclaration | margin )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA148_eotS =
		"\5\uffff";
	static final String DFA148_eofS =
		"\2\2\3\uffff";
	static final String DFA148_minS =
		"\2\6\3\uffff";
	static final String DFA148_maxS =
		"\2\u0094\3\uffff";
	static final String DFA148_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA148_specialS =
		"\5\uffff}>";
	static final String[] DFA148_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\4\2\1\4\3\2\1\uffff\5\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\7\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\5\2\1\4\3\2\1\uffff\5\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2\1\uffff\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
	static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
	static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
	static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
	static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
	static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
	static final short[][] DFA148_transition;

	static {
		int numStates = DFA148_transitionS.length;
		DFA148_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
		}
	}

	protected class DFA148 extends DFA {

		public DFA148(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 148;
			this.eot = DFA148_eot;
			this.eof = DFA148_eof;
			this.min = DFA148_min;
			this.max = DFA148_max;
			this.accept = DFA148_accept;
			this.special = DFA148_special;
			this.transition = DFA148_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 619:12: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA150_eotS =
		"\6\uffff";
	static final String DFA150_eofS =
		"\6\uffff";
	static final String DFA150_minS =
		"\2\6\1\0\1\uffff\1\0\1\uffff";
	static final String DFA150_maxS =
		"\2\u0094\1\0\1\uffff\1\0\1\uffff";
	static final String DFA150_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA150_specialS =
		"\2\uffff\1\0\1\uffff\1\1\1\uffff}>";
	static final String[] DFA150_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\2\uffff\1\3\1\uffff\1\3\7\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\3\uffff"+
			"\1\3\4\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\4\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\2\uffff\1\3\1\uffff\1\3\7\uffff\3\3\11\uffff"+
			"\3\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\3\uffff"+
			"\1\3\4\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
	static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
	static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
	static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
	static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
	static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
	static final short[][] DFA150_transition;

	static {
		int numStates = DFA150_transitionS.length;
		DFA150_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
		}
	}

	protected class DFA150 extends DFA {

		public DFA150(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 150;
			this.eot = DFA150_eot;
			this.eof = DFA150_eof;
			this.min = DFA150_min;
			this.max = DFA150_max;
			this.accept = DFA150_accept;
			this.special = DFA150_special;
			this.transition = DFA150_transition;
		}
		@Override
		public String getDescription() {
			return "630:26: ( ( ( ws )? COMMA )=> ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA150_2 = input.LA(1);
						 
						int index150_2 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred21_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index150_2);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA150_4 = input.LA(1);
						 
						int index150_4 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred21_Css3()) ) {s = 5;}
						else if ( (true) ) {s = 3;}
						 
						input.seek(index150_4);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 150, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA155_eotS =
		"\4\uffff";
	static final String DFA155_eofS =
		"\4\uffff";
	static final String DFA155_minS =
		"\2\23\2\uffff";
	static final String DFA155_maxS =
		"\2\u0094\2\uffff";
	static final String DFA155_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA155_specialS =
		"\4\uffff}>";
	static final String[] DFA155_transitionS = {
			"\1\2\1\uffff\1\1\73\uffff\1\1\60\uffff\1\3\21\uffff\1\1",
			"\1\2\1\uffff\1\1\73\uffff\1\1\60\uffff\1\3\21\uffff\1\1",
			"",
			""
	};

	static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
	static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
	static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
	static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
	static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
	static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
	static final short[][] DFA155_transition;

	static {
		int numStates = DFA155_transitionS.length;
		DFA155_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
		}
	}

	protected class DFA155 extends DFA {

		public DFA155(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 155;
			this.eot = DFA155_eot;
			this.eof = DFA155_eof;
			this.min = DFA155_min;
			this.max = DFA155_max;
			this.accept = DFA155_accept;
			this.special = DFA155_special;
			this.transition = DFA155_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 638:25: ( ( ws )? STRING )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA160_eotS =
		"\4\uffff";
	static final String DFA160_eofS =
		"\4\uffff";
	static final String DFA160_minS =
		"\2\6\2\uffff";
	static final String DFA160_maxS =
		"\2\u0094\2\uffff";
	static final String DFA160_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA160_specialS =
		"\4\uffff}>";
	static final String[] DFA160_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1\3"+
			"\2\uffff\1\3\4\uffff\1\3\2\uffff\1\3\1\2\1\3\7\uffff\3\3\11\uffff\3\3"+
			"\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\3\uffff\1\3\4\uffff"+
			"\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\3\1\1\1\uffff\1\3\17\uffff\1"+
			"\3\2\uffff\1\3\4\uffff\1\3\2\uffff\1\3\1\2\1\3\7\uffff\3\3\11\uffff\3"+
			"\3\5\uffff\1\3\1\1\4\uffff\1\3\3\uffff\1\3\12\uffff\4\3\1\uffff\3\3\1"+
			"\uffff\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\3\uffff\1"+
			"\3\4\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
	static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
	static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
	static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
	static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
	static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
	static final short[][] DFA160_transition;

	static {
		int numStates = DFA160_transitionS.length;
		DFA160_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
		}
	}

	protected class DFA160 extends DFA {

		public DFA160(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 160;
			this.eot = DFA160_eot;
			this.eof = DFA160_eof;
			this.min = DFA160_min;
			this.max = DFA160_max;
			this.accept = DFA160_accept;
			this.special = DFA160_special;
			this.transition = DFA160_transition;
		}
		@Override
		public String getDescription() {
			return "638:110: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA166_eotS =
		"\6\uffff";
	static final String DFA166_eofS =
		"\6\uffff";
	static final String DFA166_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA166_maxS =
		"\1\u0085\1\u0094\1\uffff\1\u0094\2\uffff";
	static final String DFA166_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA166_specialS =
		"\6\uffff}>";
	static final String[] DFA166_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\2\uffff\1\2\10"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\15\uffff\1\2\3\uffff\1\2",
			"\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\2"+
			"\uffff\1\4\7\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\15\uffff\1\4\3\uffff\1\4\16\uffff\1\3",
			"",
			""
	};

	static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
	static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
	static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
	static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
	static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
	static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
	static final short[][] DFA166_transition;

	static {
		int numStates = DFA166_transitionS.length;
		DFA166_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
		}
	}

	protected class DFA166 extends DFA {

		public DFA166(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 166;
			this.eot = DFA166_eot;
			this.eof = DFA166_eof;
			this.min = DFA166_min;
			this.max = DFA166_max;
			this.accept = DFA166_accept;
			this.special = DFA166_special;
			this.transition = DFA166_transition;
		}
		@Override
		public String getDescription() {
			return "643:9: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? {...}? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA161_eotS =
		"\4\uffff";
	static final String DFA161_eofS =
		"\4\uffff";
	static final String DFA161_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA161_maxS =
		"\2\u0094\2\uffff";
	static final String DFA161_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA161_specialS =
		"\4\uffff}>";
	static final String[] DFA161_transitionS = {
			"\1\1\44\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\2"+
			"\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\15\uffff\1\3\3\uffff\1\3\16\uffff\1\1",
			"",
			""
	};

	static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
	static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
	static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
	static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
	static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
	static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
	static final short[][] DFA161_transition;

	static {
		int numStates = DFA161_transitionS.length;
		DFA161_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
		}
	}

	protected class DFA161 extends DFA {

		public DFA161(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 161;
			this.eot = DFA161_eot;
			this.eof = DFA161_eof;
			this.min = DFA161_min;
			this.max = DFA161_max;
			this.accept = DFA161_accept;
			this.special = DFA161_special;
			this.transition = DFA161_transition;
		}
		@Override
		public String getDescription() {
			return "644:27: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA183_eotS =
		"\5\uffff";
	static final String DFA183_eofS =
		"\5\uffff";
	static final String DFA183_minS =
		"\2\6\1\uffff\1\6\1\uffff";
	static final String DFA183_maxS =
		"\1\u0093\1\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA183_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA183_specialS =
		"\5\uffff}>";
	static final String[] DFA183_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\3\uffff\1\2\5\uffff\3\2\7\uffff\1\2\2\uffff"+
			"\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff\1\2\6\uffff"+
			"\3\2\5\uffff\1\2\11\uffff\1\2\2\uffff\2\2\6\uffff\3\2\2\uffff\3\2\1\uffff"+
			"\2\2\1\uffff\5\2\1\uffff\3\2\1\uffff\4\2\1\1\1\uffff\1\2\1\uffff\1\2"+
			"\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2\1\uffff\1\2",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2\2\uffff\1\4"+
			"\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\3\2\1\uffff"+
			"\4\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2"+
			"\1\uffff\1\2\1\3",
			"",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\3\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\3\10\uffff\1\2\2\uffff\2\2\2\uffff\1\4"+
			"\3\uffff\3\2\2\uffff\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\3\2\1\uffff"+
			"\4\2\1\1\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2"+
			"\1\uffff\1\2\1\3",
			""
	};

	static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
	static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
	static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
	static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
	static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
	static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
	static final short[][] DFA183_transition;

	static {
		int numStates = DFA183_transitionS.length;
		DFA183_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
		}
	}

	protected class DFA183 extends DFA {

		public DFA183(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 183;
			this.eot = DFA183_eot;
			this.eof = DFA183_eof;
			this.min = DFA183_min;
			this.max = DFA183_max;
			this.accept = DFA183_accept;
			this.special = DFA183_special;
			this.transition = DFA183_transition;
		}
		@Override
		public String getDescription() {
			return "658:1: declarations : ( ( SEMI ( ws )? )* declaration ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )* ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )? | ( SEMI ( ws )? )+ );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA176_eotS =
		"\6\uffff";
	static final String DFA176_eofS =
		"\6\uffff";
	static final String DFA176_minS =
		"\1\25\2\6\2\uffff\1\6";
	static final String DFA176_maxS =
		"\3\u0094\2\uffff\1\u0094";
	static final String DFA176_acceptS =
		"\3\uffff\1\2\1\1\1\uffff";
	static final String DFA176_specialS =
		"\6\uffff}>";
	static final String[] DFA176_transitionS = {
			"\1\1\73\uffff\1\1\17\uffff\1\3\35\uffff\1\2\24\uffff\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\3"+
			"\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\5\4\1\uffff\3\4\1\uffff"+
			"\4\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff\1\4"+
			"\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4\2\uffff\1\3"+
			"\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\5\4\1\uffff\3\4\1\uffff"+
			"\4\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff\1\4"+
			"\1\uffff\1\4\1\5",
			"",
			"",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\5\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\5\10\uffff\1\4\2\uffff\2\4\2\uffff\1\3"+
			"\3\uffff\3\4\2\uffff\3\4\1\uffff\2\4\1\uffff\5\4\1\uffff\3\4\1\uffff"+
			"\4\4\1\2\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff\1\4"+
			"\1\uffff\1\4\1\5"
	};

	static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
	static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
	static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
	static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
	static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
	static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
	static final short[][] DFA176_transition;

	static {
		int numStates = DFA176_transitionS.length;
		DFA176_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
		}
	}

	protected class DFA176 extends DFA {

		public DFA176(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 176;
			this.eot = DFA176_eot;
			this.eof = DFA176_eof;
			this.min = DFA176_min;
			this.max = DFA176_max;
			this.accept = DFA176_accept;
			this.special = DFA176_special;
			this.transition = DFA176_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 660:33: ( ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws ) declaration )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA175_eotS =
		"\4\uffff";
	static final String DFA175_eofS =
		"\4\uffff";
	static final String DFA175_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA175_maxS =
		"\2\u0094\2\uffff";
	static final String DFA175_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA175_specialS =
		"\4\uffff}>";
	static final String[] DFA175_transitionS = {
			"\1\1\73\uffff\1\1\55\uffff\1\2\24\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\uffff\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\6\uffff\3\3"+
			"\2\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\3\3\1\uffff\4\3\1\2\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
	static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
	static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
	static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
	static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
	static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
	static final short[][] DFA175_transition;

	static {
		int numStates = DFA175_transitionS.length;
		DFA175_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
		}
	}

	protected class DFA175 extends DFA {

		public DFA175(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 175;
			this.eot = DFA175_eot;
			this.eof = DFA175_eof;
			this.min = DFA175_min;
			this.max = DFA175_max;
			this.accept = DFA175_accept;
			this.special = DFA175_special;
			this.transition = DFA175_transition;
		}
		@Override
		public String getDescription() {
			return "660:34: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA180_eotS =
		"\5\uffff";
	static final String DFA180_eofS =
		"\5\uffff";
	static final String DFA180_minS =
		"\2\25\3\uffff";
	static final String DFA180_maxS =
		"\2\u0094\3\uffff";
	static final String DFA180_acceptS =
		"\2\uffff\1\1\1\3\1\2";
	static final String DFA180_specialS =
		"\5\uffff}>";
	static final String[] DFA180_transitionS = {
			"\1\1\73\uffff\1\1\17\uffff\1\3\35\uffff\1\2\24\uffff\1\1",
			"\1\1\73\uffff\1\1\17\uffff\1\4\35\uffff\1\2\24\uffff\1\1",
			"",
			"",
			""
	};

	static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
	static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
	static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
	static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
	static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
	static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
	static final short[][] DFA180_transition;

	static {
		int numStates = DFA180_transitionS.length;
		DFA180_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
		}
	}

	protected class DFA180 extends DFA {

		public DFA180(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 180;
			this.eot = DFA180_eot;
			this.eof = DFA180_eof;
			this.min = DFA180_min;
			this.max = DFA180_max;
			this.accept = DFA180_accept;
			this.special = DFA180_special;
			this.transition = DFA180_transition;
		}
		@Override
		public String getDescription() {
			return "660:71: ( ( ( ws )? ( SEMI ( ws )? )+ ) | ws )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA185_eotS =
		"\4\uffff";
	static final String DFA185_eofS =
		"\4\uffff";
	static final String DFA185_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA185_maxS =
		"\2\u0094\2\uffff";
	static final String DFA185_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA185_specialS =
		"\4\uffff}>";
	static final String[] DFA185_transitionS = {
			"\1\1\35\uffff\1\2\35\uffff\1\1\17\uffff\1\3\6\uffff\1\3\26\uffff\1\3"+
			"\24\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
	static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
	static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
	static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
	static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
	static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
	static final short[][] DFA185_transition;

	static {
		int numStates = DFA185_transitionS.length;
		DFA185_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
		}
	}

	protected class DFA185 extends DFA {

		public DFA185(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 185;
			this.eot = DFA185_eot;
			this.eof = DFA185_eof;
			this.min = DFA185_min;
			this.max = DFA185_max;
			this.accept = DFA185_accept;
			this.special = DFA185_special;
			this.transition = DFA185_transition;
		}
		@Override
		public String getDescription() {
			return "674:39: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA187_eotS =
		"\4\uffff";
	static final String DFA187_eofS =
		"\4\uffff";
	static final String DFA187_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA187_maxS =
		"\2\u0094\2\uffff";
	static final String DFA187_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA187_specialS =
		"\4\uffff}>";
	static final String[] DFA187_transitionS = {
			"\1\1\35\uffff\1\2\35\uffff\1\1\17\uffff\1\3\6\uffff\1\3\26\uffff\1\3"+
			"\24\uffff\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA187_eot = DFA.unpackEncodedString(DFA187_eotS);
	static final short[] DFA187_eof = DFA.unpackEncodedString(DFA187_eofS);
	static final char[] DFA187_min = DFA.unpackEncodedStringToUnsignedChars(DFA187_minS);
	static final char[] DFA187_max = DFA.unpackEncodedStringToUnsignedChars(DFA187_maxS);
	static final short[] DFA187_accept = DFA.unpackEncodedString(DFA187_acceptS);
	static final short[] DFA187_special = DFA.unpackEncodedString(DFA187_specialS);
	static final short[][] DFA187_transition;

	static {
		int numStates = DFA187_transitionS.length;
		DFA187_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA187_transition[i] = DFA.unpackEncodedString(DFA187_transitionS[i]);
		}
	}

	protected class DFA187 extends DFA {

		public DFA187(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 187;
			this.eot = DFA187_eot;
			this.eof = DFA187_eof;
			this.min = DFA187_min;
			this.max = DFA187_max;
			this.accept = DFA187_accept;
			this.special = DFA187_special;
			this.transition = DFA187_transition;
		}
		@Override
		public String getDescription() {
			return "675:57: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA191_eotS =
		"\6\uffff";
	static final String DFA191_eofS =
		"\6\uffff";
	static final String DFA191_minS =
		"\1\24\1\7\1\24\1\uffff\1\7\1\uffff";
	static final String DFA191_maxS =
		"\3\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA191_acceptS =
		"\3\uffff\1\2\1\uffff\1\1";
	static final String DFA191_specialS =
		"\6\uffff}>";
	static final String[] DFA191_transitionS = {
			"\1\1\1\2\44\uffff\1\3\26\uffff\1\2\26\uffff\1\3\53\uffff\1\2",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\2"+
			"\uffff\1\5\7\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\11\uffff\1\3\12\uffff\1\5\15\uffff\1\5\3\uffff\1\5\16\uffff\1\4",
			"\1\5\1\2\44\uffff\1\3\26\uffff\1\2\102\uffff\1\2",
			"",
			"\1\5\13\uffff\1\5\1\uffff\1\4\7\uffff\3\5\12\uffff\2\5\2\uffff\2\5\2"+
			"\uffff\1\5\7\uffff\1\3\1\5\5\uffff\1\5\7\uffff\1\5\7\uffff\1\4\13\uffff"+
			"\2\5\24\uffff\1\5\15\uffff\1\5\3\uffff\1\5\16\uffff\1\4",
			""
	};

	static final short[] DFA191_eot = DFA.unpackEncodedString(DFA191_eotS);
	static final short[] DFA191_eof = DFA.unpackEncodedString(DFA191_eofS);
	static final char[] DFA191_min = DFA.unpackEncodedStringToUnsignedChars(DFA191_minS);
	static final char[] DFA191_max = DFA.unpackEncodedStringToUnsignedChars(DFA191_maxS);
	static final short[] DFA191_accept = DFA.unpackEncodedString(DFA191_acceptS);
	static final short[] DFA191_special = DFA.unpackEncodedString(DFA191_specialS);
	static final short[][] DFA191_transition;

	static {
		int numStates = DFA191_transitionS.length;
		DFA191_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA191_transition[i] = DFA.unpackEncodedString(DFA191_transitionS[i]);
		}
	}

	protected class DFA191 extends DFA {

		public DFA191(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 191;
			this.eot = DFA191_eot;
			this.eof = DFA191_eof;
			this.min = DFA191_min;
			this.max = DFA191_max;
			this.accept = DFA191_accept;
			this.special = DFA191_special;
			this.transition = DFA191_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 693:18: ( ( ws )? COMMA ( ws )? selector )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA199_eotS =
		"\5\uffff";
	static final String DFA199_eofS =
		"\5\uffff";
	static final String DFA199_minS =
		"\2\7\1\uffff\1\7\1\uffff";
	static final String DFA199_maxS =
		"\1\u0085\1\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA199_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA199_specialS =
		"\5\uffff}>";
	static final String[] DFA199_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\1\2\1\1\2\uffff\2\2\2\uffff\1"+
			"\2\10\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\1\2\1\1\24\uffff\1\2"+
			"\15\uffff\1\2\3\uffff\1\1",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\2\uffff"+
			"\1\2\7\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1\2"+
			"\12\uffff\1\4\12\uffff\1\2\15\uffff\1\2\22\uffff\1\3",
			"",
			"\1\2\13\uffff\1\2\1\4\1\3\7\uffff\3\2\12\uffff\1\2\3\uffff\2\2\2\uffff"+
			"\1\2\7\uffff\1\4\1\2\5\uffff\1\2\7\uffff\1\2\7\uffff\1\3\13\uffff\1\2"+
			"\25\uffff\1\2\15\uffff\1\2\22\uffff\1\3",
			""
	};

	static final short[] DFA199_eot = DFA.unpackEncodedString(DFA199_eotS);
	static final short[] DFA199_eof = DFA.unpackEncodedString(DFA199_eofS);
	static final char[] DFA199_min = DFA.unpackEncodedStringToUnsignedChars(DFA199_minS);
	static final char[] DFA199_max = DFA.unpackEncodedStringToUnsignedChars(DFA199_maxS);
	static final short[] DFA199_accept = DFA.unpackEncodedString(DFA199_acceptS);
	static final short[] DFA199_special = DFA.unpackEncodedString(DFA199_specialS);
	static final short[][] DFA199_transition;

	static {
		int numStates = DFA199_transitionS.length;
		DFA199_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA199_transition[i] = DFA.unpackEncodedString(DFA199_transitionS[i]);
		}
	}

	protected class DFA199 extends DFA {

		public DFA199(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 199;
			this.eot = DFA199_eot;
			this.eof = DFA199_eof;
			this.min = DFA199_min;
			this.max = DFA199_max;
			this.accept = DFA199_accept;
			this.special = DFA199_special;
			this.transition = DFA199_transition;
		}
		@Override
		public String getDescription() {
			return "696:1: selector : ( ( combinator ( ws )? )? simpleSelectorSequence ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )* |{...}? combinator );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA198_eotS =
		"\4\uffff";
	static final String DFA198_eofS =
		"\4\uffff";
	static final String DFA198_minS =
		"\1\24\1\7\2\uffff";
	static final String DFA198_maxS =
		"\2\u0094\2\uffff";
	static final String DFA198_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA198_specialS =
		"\4\uffff}>";
	static final String[] DFA198_transitionS = {
			"\1\2\1\1\25\uffff\1\3\16\uffff\1\2\26\uffff\1\1\14\uffff\1\3\11\uffff"+
			"\1\2\34\uffff\1\3\16\uffff\1\1",
			"\1\3\13\uffff\1\3\1\2\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\2\uffff"+
			"\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff\2\3"+
			"\24\uffff\1\3\15\uffff\1\3\3\uffff\1\3\16\uffff\1\1",
			"",
			""
	};

	static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
	static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
	static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
	static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
	static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
	static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
	static final short[][] DFA198_transition;

	static {
		int numStates = DFA198_transitionS.length;
		DFA198_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
		}
	}

	protected class DFA198 extends DFA {

		public DFA198(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 198;
			this.eot = DFA198_eot;
			this.eof = DFA198_eof;
			this.min = DFA198_min;
			this.max = DFA198_max;
			this.accept = DFA198_accept;
			this.special = DFA198_special;
			this.transition = DFA198_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 697:49: ( ( ( ( ws )? combinator ( ws )? ) | ws ) simpleSelectorSequence )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA197_eotS =
		"\4\uffff";
	static final String DFA197_eofS =
		"\4\uffff";
	static final String DFA197_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA197_maxS =
		"\2\u0094\2\uffff";
	static final String DFA197_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA197_specialS =
		"\4\uffff}>";
	static final String[] DFA197_transitionS = {
			"\1\1\25\uffff\1\2\45\uffff\1\1\14\uffff\1\2\46\uffff\1\2\16\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\1\3\1\2\2\uffff\2"+
			"\3\2\uffff\1\3\10\uffff\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\1\3\1\2\24\uffff\1\3\15\uffff\1\3\3\uffff\1\2\16\uffff\1\1",
			"",
			""
	};

	static final short[] DFA197_eot = DFA.unpackEncodedString(DFA197_eotS);
	static final short[] DFA197_eof = DFA.unpackEncodedString(DFA197_eofS);
	static final char[] DFA197_min = DFA.unpackEncodedStringToUnsignedChars(DFA197_minS);
	static final char[] DFA197_max = DFA.unpackEncodedStringToUnsignedChars(DFA197_maxS);
	static final short[] DFA197_accept = DFA.unpackEncodedString(DFA197_acceptS);
	static final short[] DFA197_special = DFA.unpackEncodedString(DFA197_specialS);
	static final short[][] DFA197_transition;

	static {
		int numStates = DFA197_transitionS.length;
		DFA197_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA197_transition[i] = DFA.unpackEncodedString(DFA197_transitionS[i]);
		}
	}

	protected class DFA197 extends DFA {

		public DFA197(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 197;
			this.eot = DFA197_eot;
			this.eof = DFA197_eof;
			this.min = DFA197_min;
			this.max = DFA197_max;
			this.accept = DFA197_accept;
			this.special = DFA197_special;
			this.transition = DFA197_transition;
		}
		@Override
		public String getDescription() {
			return "697:51: ( ( ( ws )? combinator ( ws )? ) | ws )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA203_eotS =
		"\5\uffff";
	static final String DFA203_eofS =
		"\5\uffff";
	static final String DFA203_minS =
		"\1\23\1\7\1\uffff\1\7\1\uffff";
	static final String DFA203_maxS =
		"\2\u0094\1\uffff\1\117\1\uffff";
	static final String DFA203_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA203_specialS =
		"\5\uffff}>";
	static final String[] DFA203_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\13\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\40\uffff\1\1",
			"\1\4\13\uffff\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\2\uffff\1"+
			"\4\10\uffff\1\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\40\uffff"+
			"\1\1",
			"",
			"\1\2\52\uffff\1\2\7\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA203_eot = DFA.unpackEncodedString(DFA203_eotS);
	static final short[] DFA203_eof = DFA.unpackEncodedString(DFA203_eofS);
	static final char[] DFA203_min = DFA.unpackEncodedStringToUnsignedChars(DFA203_minS);
	static final char[] DFA203_max = DFA.unpackEncodedStringToUnsignedChars(DFA203_maxS);
	static final short[] DFA203_accept = DFA.unpackEncodedString(DFA203_acceptS);
	static final short[] DFA203_special = DFA.unpackEncodedString(DFA203_specialS);
	static final short[][] DFA203_transition;

	static {
		int numStates = DFA203_transitionS.length;
		DFA203_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA203_transition[i] = DFA.unpackEncodedString(DFA203_transitionS[i]);
		}
	}

	protected class DFA203 extends DFA {

		public DFA203(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 203;
			this.eot = DFA203_eot;
			this.eof = DFA203_eof;
			this.min = DFA203_min;
			this.max = DFA203_max;
			this.accept = DFA203_accept;
			this.special = DFA203_special;
			this.transition = DFA203_transition;
		}
		@Override
		public String getDescription() {
			return "709:79: ( ( ( ws )? elementSubsequent ) | ( ws ({...}? sass_selector_interpolation_exp |{...}? less_selector_interpolation_exp ) ) )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA206_eotS =
		"\5\uffff";
	static final String DFA206_eofS =
		"\5\uffff";
	static final String DFA206_minS =
		"\2\23\1\uffff\1\7\1\uffff";
	static final String DFA206_maxS =
		"\2\u0094\1\uffff\1\117\1\uffff";
	static final String DFA206_acceptS =
		"\2\uffff\1\1\1\uffff\1\2";
	static final String DFA206_specialS =
		"\5\uffff}>";
	static final String[] DFA206_transitionS = {
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\2\2\13\uffff\1\2\5\uffff\1\2\17"+
			"\uffff\1\1\41\uffff\1\2\40\uffff\1\1",
			"\1\2\1\uffff\1\1\7\uffff\3\2\16\uffff\1\2\1\3\2\uffff\1\4\10\uffff\1"+
			"\2\5\uffff\1\2\7\uffff\1\4\7\uffff\1\1\41\uffff\1\2\40\uffff\1\1",
			"",
			"\1\2\52\uffff\1\2\7\uffff\1\4\16\uffff\1\2\5\uffff\1\2",
			""
	};

	static final short[] DFA206_eot = DFA.unpackEncodedString(DFA206_eotS);
	static final short[] DFA206_eof = DFA.unpackEncodedString(DFA206_eofS);
	static final char[] DFA206_min = DFA.unpackEncodedStringToUnsignedChars(DFA206_minS);
	static final char[] DFA206_max = DFA.unpackEncodedStringToUnsignedChars(DFA206_maxS);
	static final short[] DFA206_accept = DFA.unpackEncodedString(DFA206_acceptS);
	static final short[] DFA206_special = DFA.unpackEncodedString(DFA206_specialS);
	static final short[][] DFA206_transition;

	static {
		int numStates = DFA206_transitionS.length;
		DFA206_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA206_transition[i] = DFA.unpackEncodedString(DFA206_transitionS[i]);
		}
	}

	protected class DFA206 extends DFA {

		public DFA206(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 206;
			this.eot = DFA206_eot;
			this.eof = DFA206_eof;
			this.min = DFA206_min;
			this.max = DFA206_max;
			this.accept = DFA206_accept;
			this.special = DFA206_special;
			this.transition = DFA206_transition;
		}
		@Override
		public String getDescription() {
			return "710:48: ( ( ( ws )? elementSubsequent ) |{...}? ws sass_selector_interpolation_exp )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA229_eotS =
		"\4\uffff";
	static final String DFA229_eofS =
		"\2\3\2\uffff";
	static final String DFA229_minS =
		"\2\6\2\uffff";
	static final String DFA229_maxS =
		"\2\u0094\2\uffff";
	static final String DFA229_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA229_specialS =
		"\4\uffff}>";
	static final String[] DFA229_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\3\3\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff\1\3"+
			"\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\11\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
	static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
	static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
	static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
	static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
	static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
	static final short[][] DFA229_transition;

	static {
		int numStates = DFA229_transitionS.length;
		DFA229_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
		}
	}

	protected class DFA229 extends DFA {

		public DFA229(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 229;
			this.eot = DFA229_eot;
			this.eof = DFA229_eof;
			this.min = DFA229_min;
			this.max = DFA229_max;
			this.accept = DFA229_accept;
			this.special = DFA229_special;
			this.transition = DFA229_transition;
		}
		@Override
		public String getDescription() {
			return "825:21: ( ( ws )? LPAREN ( ws )? ( ( expression ( ws )? ) | STAR )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA245_eotS =
		"\4\uffff";
	static final String DFA245_eofS =
		"\1\3\3\uffff";
	static final String DFA245_minS =
		"\2\6\2\uffff";
	static final String DFA245_maxS =
		"\2\u0094\2\uffff";
	static final String DFA245_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA245_specialS =
		"\4\uffff}>";
	static final String[] DFA245_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\1\3\1\2\1\3\6\uffff\4\3\2\uffff"+
			"\1\3\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA245_eot = DFA.unpackEncodedString(DFA245_eotS);
	static final short[] DFA245_eof = DFA.unpackEncodedString(DFA245_eofS);
	static final char[] DFA245_min = DFA.unpackEncodedStringToUnsignedChars(DFA245_minS);
	static final char[] DFA245_max = DFA.unpackEncodedStringToUnsignedChars(DFA245_maxS);
	static final short[] DFA245_accept = DFA.unpackEncodedString(DFA245_acceptS);
	static final short[] DFA245_special = DFA.unpackEncodedString(DFA245_specialS);
	static final short[][] DFA245_transition;

	static {
		int numStates = DFA245_transitionS.length;
		DFA245_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA245_transition[i] = DFA.unpackEncodedString(DFA245_transitionS[i]);
		}
	}

	protected class DFA245 extends DFA {

		public DFA245(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 245;
			this.eot = DFA245_eot;
			this.eof = DFA245_eof;
			this.min = DFA245_min;
			this.max = DFA245_max;
			this.accept = DFA245_accept;
			this.special = DFA245_special;
			this.transition = DFA245_transition;
		}
		@Override
		public String getDescription() {
			return "840:50: ( ( ws )? prio )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA252_eotS =
		"\76\uffff";
	static final String DFA252_eofS =
		"\1\2\75\uffff";
	static final String DFA252_minS =
		"\1\5\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\2\0\2\uffff\3\0\2\uffff\20\0"+
		"\1\uffff\1\0\2\uffff\1\0\1\uffff\1\0\17\uffff";
	static final String DFA252_maxS =
		"\1\u0094\1\0\4\uffff\1\0\1\uffff\6\0\1\uffff\2\0\2\uffff\3\0\2\uffff\20"+
		"\0\1\uffff\1\0\2\uffff\1\0\1\uffff\1\0\17\uffff";
	static final String DFA252_acceptS =
		"\2\uffff\1\2\52\uffff\1\1\1\uffff\13\1\1\uffff\3\1";
	static final String DFA252_specialS =
		"\1\0\1\1\4\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12"+
		"\2\uffff\1\13\1\14\1\15\2\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
		"\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\uffff\1\36\2\uffff\1\37\1\uffff"+
		"\1\40\17\uffff}>";
	static final String[] DFA252_transitionS = {
			"\1\65\1\12\1\24\2\uffff\5\51\3\uffff\1\51\1\2\1\54\1\1\1\uffff\1\51\5"+
			"\uffff\1\2\1\20\1\2\1\uffff\1\62\3\uffff\1\64\1\uffff\1\43\1\67\1\uffff"+
			"\1\30\1\2\2\uffff\1\10\1\17\2\uffff\1\23\1\2\1\41\5\uffff\2\2\3\51\1"+
			"\61\1\uffff\1\6\1\73\5\uffff\1\46\1\25\1\44\5\uffff\1\51\1\1\4\uffff"+
			"\1\57\3\uffff\1\42\1\60\1\75\1\2\1\15\2\uffff\1\2\1\uffff\1\63\1\70\3"+
			"\51\1\2\1\uffff\1\14\1\40\1\32\1\uffff\1\36\1\51\2\uffff\1\47\1\2\1\35"+
			"\1\51\1\uffff\1\34\1\13\1\11\1\uffff\1\51\1\33\1\32\1\37\1\2\1\55\1\2"+
			"\1\71\1\2\1\uffff\1\56\1\66\5\51\2\uffff\1\74\2\uffff\1\31\1\uffff\1"+
			"\45\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA252_eot = DFA.unpackEncodedString(DFA252_eotS);
	static final short[] DFA252_eof = DFA.unpackEncodedString(DFA252_eofS);
	static final char[] DFA252_min = DFA.unpackEncodedStringToUnsignedChars(DFA252_minS);
	static final char[] DFA252_max = DFA.unpackEncodedStringToUnsignedChars(DFA252_maxS);
	static final short[] DFA252_accept = DFA.unpackEncodedString(DFA252_acceptS);
	static final short[] DFA252_special = DFA.unpackEncodedString(DFA252_specialS);
	static final short[][] DFA252_transition;

	static {
		int numStates = DFA252_transitionS.length;
		DFA252_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA252_transition[i] = DFA.unpackEncodedString(DFA252_transitionS[i]);
		}
	}

	protected class DFA252 extends DFA {

		public DFA252(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 252;
			this.eot = DFA252_eot;
			this.eof = DFA252_eof;
			this.min = DFA252_min;
			this.max = DFA252_max;
			this.accept = DFA252_accept;
			this.special = DFA252_special;
			this.transition = DFA252_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 907:12: ( ( ( ws | ( ( ws )? operator ( ws )? ) |) term )=> ( ws | ( ( ws )? operator ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA252_0 = input.LA(1);
						 
						int index252_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA252_0==COMMENT||LA252_0==NL||LA252_0==WS) ) {s = 1;}
						else if ( (LA252_0==EOF||LA252_0==COLON||LA252_0==DCOLON||LA252_0==DOT||LA252_0==GREATER||LA252_0==IMPORTANT_SYM||(LA252_0 >= LBRACE && LA252_0 <= LBRACKET)||LA252_0==PIPE||LA252_0==RBRACE||LA252_0==RPAREN||LA252_0==SASS_EXTEND_ONLY_SELECTOR||LA252_0==SEMI||LA252_0==STAR||LA252_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA252_0==LESS_AND) ) {s = 6;}
						else if ( (LA252_0==HASH) ) {s = 8;}
						else if ( (LA252_0==SASS_MIXIN) ) {s = 9;}
						else if ( (LA252_0==AT_IDENT) ) {s = 10;}
						else if ( (LA252_0==SASS_INCLUDE) ) {s = 11;}
						else if ( (LA252_0==SASS_AT_ROOT) ) {s = 12;}
						else if ( (LA252_0==PLUS) ) {s = 13;}
						else if ( (LA252_0==HASH_SYMBOL) ) {s = 15;}
						else if ( (LA252_0==DIMENSION) ) {s = 16;}
						else if ( (LA252_0==IDENT) ) {s = 19;}
						else if ( (LA252_0==AT_SIGN) ) {s = 20;}
						else if ( (LA252_0==MINUS) ) {s = 21;}
						else if ( (LA252_0==GEN) ) {s = 24;}
						else if ( (LA252_0==VARIABLE) ) {s = 25;}
						else if ( (LA252_0==SASS_DEBUG||LA252_0==SASS_WARN) ) {s = 26;}
						else if ( (LA252_0==SASS_VAR) ) {s = 27;}
						else if ( (LA252_0==SASS_IF) ) {s = 28;}
						else if ( (LA252_0==SASS_FOR) ) {s = 29;}
						else if ( (LA252_0==SASS_EACH) ) {s = 30;}
						else if ( (LA252_0==SASS_WHILE) ) {s = 31;}
						else if ( (LA252_0==SASS_CONTENT) ) {s = 32;}
						else if ( (LA252_0==IMPORT_SYM) ) {s = 33;}
						else if ( (LA252_0==PAGE_SYM) ) {s = 34;}
						else if ( (LA252_0==FONT_FACE_SYM) ) {s = 35;}
						else if ( (LA252_0==MOZ_DOCUMENT_SYM) ) {s = 36;}
						else if ( (LA252_0==WEBKIT_KEYFRAMES_SYM) ) {s = 37;}
						else if ( (LA252_0==MEDIA_SYM) ) {s = 38;}
						else if ( (LA252_0==SASS_EXTEND) ) {s = 39;}
						else if ( ((LA252_0 >= BOTTOMCENTER_SYM && LA252_0 <= BOTTOMRIGHT_SYM)||LA252_0==CHARSET_SYM||LA252_0==COUNTER_STYLE_SYM||(LA252_0 >= LEFTBOTTOM_SYM && LA252_0 <= LEFTTOP_SYM)||LA252_0==NAMESPACE_SYM||(LA252_0 >= RIGHTBOTTOM_SYM && LA252_0 <= RIGHTTOP_SYM)||LA252_0==SASS_ELSE||LA252_0==SASS_FUNCTION||LA252_0==SASS_RETURN||(LA252_0 >= TOPCENTER_SYM && LA252_0 <= TOPRIGHT_SYM)) ) {s = 41;}
						else if ( (LA252_0==COMMA) ) {s = 44;}
						else if ( (LA252_0==SOLIDUS) && (synpred36_Css3())) {s = 45;}
						else if ( (LA252_0==TILDE) ) {s = 46;}
						else if ( (LA252_0==NUMBER) && (synpred36_Css3())) {s = 47;}
						else if ( (LA252_0==PERCENTAGE) && (synpred36_Css3())) {s = 48;}
						else if ( (LA252_0==LENGTH) && (synpred36_Css3())) {s = 49;}
						else if ( (LA252_0==EMS) && (synpred36_Css3())) {s = 50;}
						else if ( (LA252_0==REM) && (synpred36_Css3())) {s = 51;}
						else if ( (LA252_0==EXS) && (synpred36_Css3())) {s = 52;}
						else if ( (LA252_0==ANGLE) && (synpred36_Css3())) {s = 53;}
						else if ( (LA252_0==TIME) && (synpred36_Css3())) {s = 54;}
						else if ( (LA252_0==FREQ) && (synpred36_Css3())) {s = 55;}
						else if ( (LA252_0==RESOLUTION) && (synpred36_Css3())) {s = 56;}
						else if ( (LA252_0==STRING) && (synpred36_Css3())) {s = 57;}
						else if ( (LA252_0==LESS_JS_STRING) && (synpred36_Css3())) {s = 59;}
						else if ( (LA252_0==URI) && (synpred36_Css3())) {s = 60;}
						else if ( (LA252_0==PERCENTAGE_SYMBOL) && (synpred36_Css3())) {s = 61;}
						 
						input.seek(index252_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA252_1 = input.LA(1);
						 
						int index252_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA252_6 = input.LA(1);
						 
						int index252_6 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred36_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_6);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA252_8 = input.LA(1);
						 
						int index252_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_8);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA252_9 = input.LA(1);
						 
						int index252_9 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_9);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA252_10 = input.LA(1);
						 
						int index252_10 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_10);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA252_11 = input.LA(1);
						 
						int index252_11 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_11);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA252_12 = input.LA(1);
						 
						int index252_12 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_12);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA252_13 = input.LA(1);
						 
						int index252_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_13);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA252_15 = input.LA(1);
						 
						int index252_15 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred36_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_15);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA252_16 = input.LA(1);
						 
						int index252_16 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (evalPredicate(tokenNameStartsWith("."),"tokenNameStartsWith(\".\")")) ) {s = 2;}
						 
						input.seek(index252_16);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA252_19 = input.LA(1);
						 
						int index252_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_19);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA252_20 = input.LA(1);
						 
						int index252_20 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred36_Css3())) ) {s = 61;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}
						 
						input.seek(index252_20);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA252_21 = input.LA(1);
						 
						int index252_21 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_21);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA252_24 = input.LA(1);
						 
						int index252_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_24);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA252_25 = input.LA(1);
						 
						int index252_25 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_25);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA252_26 = input.LA(1);
						 
						int index252_26 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_26);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA252_27 = input.LA(1);
						 
						int index252_27 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred36_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 61;}
						else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_27);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA252_28 = input.LA(1);
						 
						int index252_28 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_28);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA252_29 = input.LA(1);
						 
						int index252_29 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_29);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA252_30 = input.LA(1);
						 
						int index252_30 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_30);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA252_31 = input.LA(1);
						 
						int index252_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_31);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA252_32 = input.LA(1);
						 
						int index252_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_32);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA252_33 = input.LA(1);
						 
						int index252_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 2;}
						 
						input.seek(index252_33);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA252_34 = input.LA(1);
						 
						int index252_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_34);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA252_35 = input.LA(1);
						 
						int index252_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_35);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA252_36 = input.LA(1);
						 
						int index252_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_36);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA252_37 = input.LA(1);
						 
						int index252_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_37);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA252_38 = input.LA(1);
						 
						int index252_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_38);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA252_39 = input.LA(1);
						 
						int index252_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index252_39);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA252_41 = input.LA(1);
						 
						int index252_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred36_Css3())) ) {s = 61;}
						else if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))) ) {s = 2;}
						 
						input.seek(index252_41);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA252_44 = input.LA(1);
						 
						int index252_44 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_44);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA252_46 = input.LA(1);
						 
						int index252_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred36_Css3()) ) {s = 61;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index252_46);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 252, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA251_eotS =
		"\5\uffff";
	static final String DFA251_eofS =
		"\5\uffff";
	static final String DFA251_minS =
		"\2\5\3\uffff";
	static final String DFA251_maxS =
		"\2\u0094\3\uffff";
	static final String DFA251_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA251_specialS =
		"\5\uffff}>";
	static final String[] DFA251_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\4\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\4\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\4\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA251_eot = DFA.unpackEncodedString(DFA251_eotS);
	static final short[] DFA251_eof = DFA.unpackEncodedString(DFA251_eofS);
	static final char[] DFA251_min = DFA.unpackEncodedStringToUnsignedChars(DFA251_minS);
	static final char[] DFA251_max = DFA.unpackEncodedStringToUnsignedChars(DFA251_maxS);
	static final short[] DFA251_accept = DFA.unpackEncodedString(DFA251_acceptS);
	static final short[] DFA251_special = DFA.unpackEncodedString(DFA251_specialS);
	static final short[][] DFA251_transition;

	static {
		int numStates = DFA251_transitionS.length;
		DFA251_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA251_transition[i] = DFA.unpackEncodedString(DFA251_transitionS[i]);
		}
	}

	protected class DFA251 extends DFA {

		public DFA251(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 251;
			this.eot = DFA251_eot;
			this.eof = DFA251_eof;
			this.min = DFA251_min;
			this.max = DFA251_max;
			this.accept = DFA251_accept;
			this.special = DFA251_special;
			this.transition = DFA251_transition;
		}
		@Override
		public String getDescription() {
			return "907:66: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA264_eotS =
		"\4\uffff";
	static final String DFA264_eofS =
		"\4\uffff";
	static final String DFA264_minS =
		"\2\24\2\uffff";
	static final String DFA264_maxS =
		"\2\u0094\2\uffff";
	static final String DFA264_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA264_specialS =
		"\4\uffff}>";
	static final String[] DFA264_transitionS = {
			"\1\3\1\1\73\uffff\1\1\26\uffff\1\2\26\uffff\1\3\24\uffff\1\1",
			"\1\3\1\1\73\uffff\1\1\26\uffff\1\2\26\uffff\1\3\24\uffff\1\1",
			"",
			""
	};

	static final short[] DFA264_eot = DFA.unpackEncodedString(DFA264_eotS);
	static final short[] DFA264_eof = DFA.unpackEncodedString(DFA264_eofS);
	static final char[] DFA264_min = DFA.unpackEncodedStringToUnsignedChars(DFA264_minS);
	static final char[] DFA264_max = DFA.unpackEncodedStringToUnsignedChars(DFA264_maxS);
	static final short[] DFA264_accept = DFA.unpackEncodedString(DFA264_acceptS);
	static final short[] DFA264_special = DFA.unpackEncodedString(DFA264_specialS);
	static final short[][] DFA264_transition;

	static {
		int numStates = DFA264_transitionS.length;
		DFA264_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA264_transition[i] = DFA.unpackEncodedString(DFA264_transitionS[i]);
		}
	}

	protected class DFA264 extends DFA {

		public DFA264(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 264;
			this.eot = DFA264_eot;
			this.eof = DFA264_eof;
			this.min = DFA264_min;
			this.max = DFA264_max;
			this.accept = DFA264_accept;
			this.special = DFA264_special;
			this.transition = DFA264_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 973:17: ( ( ws )? ( COMMA |{...}? SEMI ) ( ws )? fnAttribute )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA274_eotS =
		"\44\uffff";
	static final String DFA274_eofS =
		"\44\uffff";
	static final String DFA274_minS =
		"\2\5\42\uffff";
	static final String DFA274_maxS =
		"\2\u0094\42\uffff";
	static final String DFA274_acceptS =
		"\2\uffff\1\2\41\1";
	static final String DFA274_specialS =
		"\1\0\1\1\42\uffff}>";
	static final String[] DFA274_transitionS = {
			"\1\15\1\30\1\34\2\uffff\5\30\3\uffff\1\30\1\uffff\1\2\1\1\1\uffff\1\30"+
			"\6\uffff\1\21\2\uffff\1\12\3\uffff\1\14\1\uffff\1\30\1\17\1\uffff\1\25"+
			"\3\uffff\1\27\1\33\2\uffff\1\5\1\uffff\1\30\7\uffff\3\30\1\11\1\uffff"+
			"\1\32\1\24\5\uffff\1\30\1\4\1\30\5\uffff\1\30\1\1\4\uffff\1\7\3\uffff"+
			"\1\30\1\10\1\35\1\uffff\1\4\4\uffff\1\13\1\20\3\30\1\2\1\uffff\3\30\1"+
			"\uffff\2\30\2\uffff\1\30\1\uffff\2\30\1\uffff\3\30\1\uffff\1\30\1\31"+
			"\2\30\1\2\1\3\1\uffff\1\22\2\uffff\1\23\1\16\5\30\2\uffff\1\26\2\uffff"+
			"\1\6\1\uffff\1\30\1\1",
			"\1\15\1\36\1\42\2\uffff\5\36\3\uffff\1\36\1\uffff\1\2\1\1\1\uffff\1"+
			"\36\6\uffff\1\21\2\uffff\1\12\3\uffff\1\14\1\uffff\1\36\1\17\1\uffff"+
			"\1\25\3\uffff\1\27\1\41\2\uffff\1\5\1\uffff\1\36\7\uffff\3\36\1\11\1"+
			"\uffff\1\40\1\24\5\uffff\1\36\1\4\1\36\5\uffff\1\36\1\1\4\uffff\1\7\3"+
			"\uffff\1\36\1\10\1\43\1\uffff\1\4\4\uffff\1\13\1\20\3\36\1\2\1\uffff"+
			"\3\36\1\uffff\2\36\2\uffff\1\36\1\uffff\2\36\1\uffff\3\36\1\uffff\1\36"+
			"\1\37\2\36\1\2\1\3\1\uffff\1\22\2\uffff\1\23\1\16\5\36\2\uffff\1\26\2"+
			"\uffff\1\6\1\uffff\1\36\1\1",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA274_eot = DFA.unpackEncodedString(DFA274_eotS);
	static final short[] DFA274_eof = DFA.unpackEncodedString(DFA274_eofS);
	static final char[] DFA274_min = DFA.unpackEncodedStringToUnsignedChars(DFA274_minS);
	static final char[] DFA274_max = DFA.unpackEncodedStringToUnsignedChars(DFA274_maxS);
	static final short[] DFA274_accept = DFA.unpackEncodedString(DFA274_acceptS);
	static final short[] DFA274_special = DFA.unpackEncodedString(DFA274_specialS);
	static final short[][] DFA274_transition;

	static {
		int numStates = DFA274_transitionS.length;
		DFA274_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA274_transition[i] = DFA.unpackEncodedString(DFA274_transitionS[i]);
		}
	}

	protected class DFA274 extends DFA {

		public DFA274(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 274;
			this.eot = DFA274_eot;
			this.eof = DFA274_eof;
			this.min = DFA274_min;
			this.max = DFA274_max;
			this.accept = DFA274_accept;
			this.special = DFA274_special;
			this.transition = DFA274_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 991:18: ( ( ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )=> ( ws | ( ( ws )? SOLIDUS ( ws )? ) |) term )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA274_0 = input.LA(1);
						 
						int index274_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA274_0==COMMENT||LA274_0==NL||LA274_0==WS) ) {s = 1;}
						else if ( (LA274_0==COMMA||LA274_0==RPAREN||LA274_0==SEMI) ) {s = 2;}
						else if ( (LA274_0==SOLIDUS) && (synpred40_Css3())) {s = 3;}
						else if ( (LA274_0==MINUS||LA274_0==PLUS) && (synpred40_Css3())) {s = 4;}
						else if ( (LA274_0==IDENT) && (synpred40_Css3())) {s = 5;}
						else if ( (LA274_0==VARIABLE) && (synpred40_Css3())) {s = 6;}
						else if ( (LA274_0==NUMBER) && (synpred40_Css3())) {s = 7;}
						else if ( (LA274_0==PERCENTAGE) && (synpred40_Css3())) {s = 8;}
						else if ( (LA274_0==LENGTH) && (synpred40_Css3())) {s = 9;}
						else if ( (LA274_0==EMS) && (synpred40_Css3())) {s = 10;}
						else if ( (LA274_0==REM) && (synpred40_Css3())) {s = 11;}
						else if ( (LA274_0==EXS) && (synpred40_Css3())) {s = 12;}
						else if ( (LA274_0==ANGLE) && (synpred40_Css3())) {s = 13;}
						else if ( (LA274_0==TIME) && (synpred40_Css3())) {s = 14;}
						else if ( (LA274_0==FREQ) && (synpred40_Css3())) {s = 15;}
						else if ( (LA274_0==RESOLUTION) && (synpred40_Css3())) {s = 16;}
						else if ( (LA274_0==DIMENSION) && (synpred40_Css3())) {s = 17;}
						else if ( (LA274_0==STRING) && (synpred40_Css3())) {s = 18;}
						else if ( (LA274_0==TILDE) && (synpred40_Css3())) {s = 19;}
						else if ( (LA274_0==LESS_JS_STRING) && (synpred40_Css3())) {s = 20;}
						else if ( (LA274_0==GEN) && (synpred40_Css3())) {s = 21;}
						else if ( (LA274_0==URI) && (synpred40_Css3())) {s = 22;}
						else if ( (LA274_0==HASH) && (synpred40_Css3())) {s = 23;}
						else if ( (LA274_0==AT_IDENT||(LA274_0 >= BOTTOMCENTER_SYM && LA274_0 <= BOTTOMRIGHT_SYM)||LA274_0==CHARSET_SYM||LA274_0==COUNTER_STYLE_SYM||LA274_0==FONT_FACE_SYM||LA274_0==IMPORT_SYM||(LA274_0 >= LEFTBOTTOM_SYM && LA274_0 <= LEFTTOP_SYM)||LA274_0==MEDIA_SYM||LA274_0==MOZ_DOCUMENT_SYM||LA274_0==NAMESPACE_SYM||LA274_0==PAGE_SYM||(LA274_0 >= RIGHTBOTTOM_SYM && LA274_0 <= RIGHTTOP_SYM)||(LA274_0 >= SASS_AT_ROOT && LA274_0 <= SASS_DEBUG)||(LA274_0 >= SASS_EACH && LA274_0 <= SASS_ELSE)||LA274_0==SASS_EXTEND||(LA274_0 >= SASS_FOR && LA274_0 <= SASS_FUNCTION)||(LA274_0 >= SASS_IF && LA274_0 <= SASS_MIXIN)||LA274_0==SASS_RETURN||(LA274_0 >= SASS_WARN && LA274_0 <= SASS_WHILE)||(LA274_0 >= TOPCENTER_SYM && LA274_0 <= TOPRIGHT_SYM)||LA274_0==WEBKIT_KEYFRAMES_SYM) && (synpred40_Css3())) {s = 24;}
						else if ( (LA274_0==SASS_VAR) && (synpred40_Css3())) {s = 25;}
						else if ( (LA274_0==LESS_AND) && (synpred40_Css3())) {s = 26;}
						else if ( (LA274_0==HASH_SYMBOL) && (synpred40_Css3())) {s = 27;}
						else if ( (LA274_0==AT_SIGN) && (synpred40_Css3())) {s = 28;}
						else if ( (LA274_0==PERCENTAGE_SYMBOL) && (synpred40_Css3())) {s = 29;}
						 
						input.seek(index274_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA274_1 = input.LA(1);
						 
						int index274_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA274_1==COMMA||LA274_1==RPAREN||LA274_1==SEMI) ) {s = 2;}
						else if ( (LA274_1==COMMENT||LA274_1==NL||LA274_1==WS) ) {s = 1;}
						else if ( (LA274_1==MINUS||LA274_1==PLUS) && (synpred40_Css3())) {s = 4;}
						else if ( (LA274_1==IDENT) && (synpred40_Css3())) {s = 5;}
						else if ( (LA274_1==VARIABLE) && (synpred40_Css3())) {s = 6;}
						else if ( (LA274_1==NUMBER) && (synpred40_Css3())) {s = 7;}
						else if ( (LA274_1==PERCENTAGE) && (synpred40_Css3())) {s = 8;}
						else if ( (LA274_1==LENGTH) && (synpred40_Css3())) {s = 9;}
						else if ( (LA274_1==EMS) && (synpred40_Css3())) {s = 10;}
						else if ( (LA274_1==REM) && (synpred40_Css3())) {s = 11;}
						else if ( (LA274_1==EXS) && (synpred40_Css3())) {s = 12;}
						else if ( (LA274_1==ANGLE) && (synpred40_Css3())) {s = 13;}
						else if ( (LA274_1==TIME) && (synpred40_Css3())) {s = 14;}
						else if ( (LA274_1==FREQ) && (synpred40_Css3())) {s = 15;}
						else if ( (LA274_1==RESOLUTION) && (synpred40_Css3())) {s = 16;}
						else if ( (LA274_1==DIMENSION) && (synpred40_Css3())) {s = 17;}
						else if ( (LA274_1==STRING) && (synpred40_Css3())) {s = 18;}
						else if ( (LA274_1==TILDE) && (synpred40_Css3())) {s = 19;}
						else if ( (LA274_1==LESS_JS_STRING) && (synpred40_Css3())) {s = 20;}
						else if ( (LA274_1==GEN) && (synpred40_Css3())) {s = 21;}
						else if ( (LA274_1==URI) && (synpred40_Css3())) {s = 22;}
						else if ( (LA274_1==HASH) && (synpred40_Css3())) {s = 23;}
						else if ( (LA274_1==AT_IDENT||(LA274_1 >= BOTTOMCENTER_SYM && LA274_1 <= BOTTOMRIGHT_SYM)||LA274_1==CHARSET_SYM||LA274_1==COUNTER_STYLE_SYM||LA274_1==FONT_FACE_SYM||LA274_1==IMPORT_SYM||(LA274_1 >= LEFTBOTTOM_SYM && LA274_1 <= LEFTTOP_SYM)||LA274_1==MEDIA_SYM||LA274_1==MOZ_DOCUMENT_SYM||LA274_1==NAMESPACE_SYM||LA274_1==PAGE_SYM||(LA274_1 >= RIGHTBOTTOM_SYM && LA274_1 <= RIGHTTOP_SYM)||(LA274_1 >= SASS_AT_ROOT && LA274_1 <= SASS_DEBUG)||(LA274_1 >= SASS_EACH && LA274_1 <= SASS_ELSE)||LA274_1==SASS_EXTEND||(LA274_1 >= SASS_FOR && LA274_1 <= SASS_FUNCTION)||(LA274_1 >= SASS_IF && LA274_1 <= SASS_MIXIN)||LA274_1==SASS_RETURN||(LA274_1 >= SASS_WARN && LA274_1 <= SASS_WHILE)||(LA274_1 >= TOPCENTER_SYM && LA274_1 <= TOPRIGHT_SYM)||LA274_1==WEBKIT_KEYFRAMES_SYM) && (synpred40_Css3())) {s = 30;}
						else if ( (LA274_1==SASS_VAR) && (synpred40_Css3())) {s = 31;}
						else if ( (LA274_1==LESS_AND) && (synpred40_Css3())) {s = 32;}
						else if ( (LA274_1==HASH_SYMBOL) && (synpred40_Css3())) {s = 33;}
						else if ( (LA274_1==AT_SIGN) && (synpred40_Css3())) {s = 34;}
						else if ( (LA274_1==PERCENTAGE_SYMBOL) && (synpred40_Css3())) {s = 35;}
						else if ( (LA274_1==SOLIDUS) && (synpred40_Css3())) {s = 3;}
						 
						input.seek(index274_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 274, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA273_eotS =
		"\5\uffff";
	static final String DFA273_eofS =
		"\5\uffff";
	static final String DFA273_minS =
		"\2\5\3\uffff";
	static final String DFA273_maxS =
		"\2\u0094\3\uffff";
	static final String DFA273_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA273_specialS =
		"\5\uffff}>";
	static final String[] DFA273_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\4\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\4\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\4\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA273_eot = DFA.unpackEncodedString(DFA273_eotS);
	static final short[] DFA273_eof = DFA.unpackEncodedString(DFA273_eofS);
	static final char[] DFA273_min = DFA.unpackEncodedStringToUnsignedChars(DFA273_minS);
	static final char[] DFA273_max = DFA.unpackEncodedStringToUnsignedChars(DFA273_maxS);
	static final short[] DFA273_accept = DFA.unpackEncodedString(DFA273_acceptS);
	static final short[] DFA273_special = DFA.unpackEncodedString(DFA273_specialS);
	static final short[][] DFA273_transition;

	static {
		int numStates = DFA273_transitionS.length;
		DFA273_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA273_transition[i] = DFA.unpackEncodedString(DFA273_transitionS[i]);
		}
	}

	protected class DFA273 extends DFA {

		public DFA273(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 273;
			this.eot = DFA273_eot;
			this.eof = DFA273_eof;
			this.min = DFA273_min;
			this.max = DFA273_max;
			this.accept = DFA273_accept;
			this.special = DFA273_special;
			this.transition = DFA273_transition;
		}
		@Override
		public String getDescription() {
			return "991:71: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA283_eotS =
		"\5\uffff";
	static final String DFA283_eofS =
		"\2\2\3\uffff";
	static final String DFA283_minS =
		"\2\6\3\uffff";
	static final String DFA283_maxS =
		"\2\u0094\3\uffff";
	static final String DFA283_acceptS =
		"\2\uffff\1\3\1\1\1\2";
	static final String DFA283_specialS =
		"\5\uffff}>";
	static final String[] DFA283_transitionS = {
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\2\uffff\4\2\1\4\3\2\1\uffff\5\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\7\uffff\1\2\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\3\2\2\1\uffff\5\2\1\4\3\2\1\uffff\5\2\1\uffff"+
			"\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2\1\uffff\1\2\1\1",
			"",
			"",
			""
	};

	static final short[] DFA283_eot = DFA.unpackEncodedString(DFA283_eotS);
	static final short[] DFA283_eof = DFA.unpackEncodedString(DFA283_eofS);
	static final char[] DFA283_min = DFA.unpackEncodedStringToUnsignedChars(DFA283_minS);
	static final char[] DFA283_max = DFA.unpackEncodedStringToUnsignedChars(DFA283_maxS);
	static final short[] DFA283_accept = DFA.unpackEncodedString(DFA283_acceptS);
	static final short[] DFA283_special = DFA.unpackEncodedString(DFA283_specialS);
	static final short[][] DFA283_transition;

	static {
		int numStates = DFA283_transitionS.length;
		DFA283_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA283_transition[i] = DFA.unpackEncodedString(DFA283_transitionS[i]);
		}
	}

	protected class DFA283 extends DFA {

		public DFA283(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 283;
			this.eot = DFA283_eot;
			this.eof = DFA283_eof;
			this.min = DFA283_min;
			this.max = DFA283_max;
			this.accept = DFA283_accept;
			this.special = DFA283_special;
			this.transition = DFA283_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1010:72: ( ( ( ws )? SASS_DEFAULT ) | ( ( ws )? SASS_GLOBAL ) )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA288_eotS =
		"\104\uffff";
	static final String DFA288_eofS =
		"\1\2\103\uffff";
	static final String DFA288_minS =
		"\1\5\1\0\54\uffff\1\0\25\uffff";
	static final String DFA288_maxS =
		"\1\u0094\1\0\54\uffff\1\0\25\uffff";
	static final String DFA288_acceptS =
		"\2\uffff\1\2\100\uffff\1\1";
	static final String DFA288_specialS =
		"\1\uffff\1\0\54\uffff\1\1\25\uffff}>";
	static final String[] DFA288_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\2\2\1\56\1\1\1\uffff\1\2\5\uffff\3\2\1\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\2\2\2\uffff\2\2\2\uffff\3\2\5\uffff"+
			"\6\2\1\uffff\2\2\3\uffff\1\2\1\uffff\3\2\5\uffff\1\2\1\1\3\uffff\2\2"+
			"\3\uffff\5\2\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\10\2\1\uffff"+
			"\5\2\1\uffff\3\2\1\uffff\7\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA288_eot = DFA.unpackEncodedString(DFA288_eotS);
	static final short[] DFA288_eof = DFA.unpackEncodedString(DFA288_eofS);
	static final char[] DFA288_min = DFA.unpackEncodedStringToUnsignedChars(DFA288_minS);
	static final char[] DFA288_max = DFA.unpackEncodedStringToUnsignedChars(DFA288_maxS);
	static final short[] DFA288_accept = DFA.unpackEncodedString(DFA288_acceptS);
	static final short[] DFA288_special = DFA.unpackEncodedString(DFA288_specialS);
	static final short[][] DFA288_transition;

	static {
		int numStates = DFA288_transitionS.length;
		DFA288_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA288_transition[i] = DFA.unpackEncodedString(DFA288_transitionS[i]);
		}
	}

	protected class DFA288 extends DFA {

		public DFA288(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 288;
			this.eot = DFA288_eot;
			this.eof = DFA288_eof;
			this.min = DFA288_min;
			this.max = DFA288_max;
			this.accept = DFA288_accept;
			this.special = DFA288_special;
			this.transition = DFA288_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1026:5: ( ( ( ws )? COMMA ( ws )? cp_expression )=> ( ws )? COMMA ( ws )? cp_expression )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA288_1 = input.LA(1);
						 
						int index288_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred42_Css3()) ) {s = 67;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index288_1);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA288_46 = input.LA(1);
						 
						int index288_46 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred42_Css3()) ) {s = 67;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index288_46);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 288, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA294_eotS =
		"\114\uffff";
	static final String DFA294_eofS =
		"\1\2\113\uffff";
	static final String DFA294_minS =
		"\1\5\1\0\1\uffff\1\0\1\uffff\12\0\2\uffff\1\0\1\uffff\6\0\1\uffff\1\0"+
		"\4\uffff\14\0\1\uffff\1\0\1\uffff\2\0\3\uffff\20\0\2\uffff\1\0\6\uffff";
	static final String DFA294_maxS =
		"\1\u0094\1\0\1\uffff\1\0\1\uffff\12\0\2\uffff\1\0\1\uffff\6\0\1\uffff"+
		"\1\0\4\uffff\14\0\1\uffff\1\0\1\uffff\2\0\3\uffff\20\0\2\uffff\1\0\6\uffff";
	static final String DFA294_acceptS =
		"\2\uffff\1\3\103\uffff\5\1\1\2";
	static final String DFA294_specialS =
		"\1\0\1\1\1\uffff\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
		"\14\2\uffff\1\15\1\uffff\1\16\1\17\1\20\1\21\1\22\1\23\1\uffff\1\24\4"+
		"\uffff\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\uffff"+
		"\1\41\1\uffff\1\42\1\43\3\uffff\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
		"\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\2\uffff\1\64\6\uffff}>";
	static final String[] DFA294_transitionS = {
			"\1\72\1\24\1\12\2\uffff\5\57\3\uffff\1\57\2\2\1\105\1\uffff\1\54\1\2"+
			"\1\106\1\107\2\uffff\1\2\1\32\1\2\1\uffff\1\67\3\uffff\1\71\1\uffff\1"+
			"\46\1\74\1\uffff\1\14\1\76\1\112\1\uffff\1\23\1\11\2\uffff\1\7\1\3\1"+
			"\44\5\uffff\2\2\3\57\1\66\1\110\1\21\1\77\1\111\1\2\1\uffff\1\102\1\uffff"+
			"\1\51\1\10\1\47\5\uffff\1\57\1\105\3\uffff\1\63\1\5\3\uffff\1\45\1\65"+
			"\1\101\1\2\1\30\2\uffff\1\2\1\uffff\1\70\1\75\3\57\1\2\1\uffff\1\26\1"+
			"\43\1\27\1\2\1\41\1\57\2\uffff\1\52\1\2\1\40\1\56\1\2\1\37\1\25\1\15"+
			"\1\uffff\1\57\1\16\1\27\1\42\1\2\1\uffff\1\2\1\6\1\2\1\uffff\1\64\1\73"+
			"\5\57\2\uffff\1\100\2\uffff\1\13\1\uffff\1\50\1\1",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"\1\uffff",
			"",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"\1\uffff",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			""
	};

	static final short[] DFA294_eot = DFA.unpackEncodedString(DFA294_eotS);
	static final short[] DFA294_eof = DFA.unpackEncodedString(DFA294_eofS);
	static final char[] DFA294_min = DFA.unpackEncodedStringToUnsignedChars(DFA294_minS);
	static final char[] DFA294_max = DFA.unpackEncodedStringToUnsignedChars(DFA294_maxS);
	static final short[] DFA294_accept = DFA.unpackEncodedString(DFA294_acceptS);
	static final short[] DFA294_special = DFA.unpackEncodedString(DFA294_specialS);
	static final short[][] DFA294_transition;

	static {
		int numStates = DFA294_transitionS.length;
		DFA294_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA294_transition[i] = DFA.unpackEncodedString(DFA294_transitionS[i]);
		}
	}

	protected class DFA294 extends DFA {

		public DFA294(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 294;
			this.eot = DFA294_eot;
			this.eof = DFA294_eof;
			this.min = DFA294_min;
			this.max = DFA294_max;
			this.accept = DFA294_accept;
			this.special = DFA294_special;
			this.transition = DFA294_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1043:5: ( ( ( ws )? cp_expression_operator )=> ( ( ws )? cp_expression_operator ( ws )? ) cp_expression_atom | ( ( ws )? cp_expression_atom )=> ( ws )? cp_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA294_0 = input.LA(1);
						 
						int index294_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA294_0==WS) ) {s = 1;}
						else if ( (LA294_0==EOF||(LA294_0 >= COLON && LA294_0 <= COMMA)||LA294_0==CP_DOTS||LA294_0==DCOLON||LA294_0==DOT||(LA294_0 >= LBRACE && LA294_0 <= LBRACKET)||LA294_0==LESS_REST||LA294_0==PIPE||LA294_0==RBRACE||LA294_0==RPAREN||LA294_0==SASS_DEFAULT||LA294_0==SASS_EXTEND_ONLY_SELECTOR||LA294_0==SASS_GLOBAL||LA294_0==SEMI||LA294_0==STAR||LA294_0==SUPPORTS_SYM) ) {s = 2;}
						else if ( (LA294_0==IMPORTANT_SYM) ) {s = 3;}
						else if ( (LA294_0==NUMBER) ) {s = 5;}
						else if ( (LA294_0==STRING) ) {s = 6;}
						else if ( (LA294_0==IDENT) ) {s = 7;}
						else if ( (LA294_0==MINUS) ) {s = 8;}
						else if ( (LA294_0==HASH_SYMBOL) ) {s = 9;}
						else if ( (LA294_0==AT_SIGN) ) {s = 10;}
						else if ( (LA294_0==VARIABLE) ) {s = 11;}
						else if ( (LA294_0==GEN) ) {s = 12;}
						else if ( (LA294_0==SASS_MIXIN) ) {s = 13;}
						else if ( (LA294_0==SASS_VAR) ) {s = 14;}
						else if ( (LA294_0==LESS_AND) ) {s = 17;}
						else if ( (LA294_0==HASH) ) {s = 19;}
						else if ( (LA294_0==AT_IDENT) ) {s = 20;}
						else if ( (LA294_0==SASS_INCLUDE) ) {s = 21;}
						else if ( (LA294_0==SASS_AT_ROOT) ) {s = 22;}
						else if ( (LA294_0==SASS_DEBUG||LA294_0==SASS_WARN) ) {s = 23;}
						else if ( (LA294_0==PLUS) ) {s = 24;}
						else if ( (LA294_0==DIMENSION) ) {s = 26;}
						else if ( (LA294_0==SASS_IF) ) {s = 31;}
						else if ( (LA294_0==SASS_FOR) ) {s = 32;}
						else if ( (LA294_0==SASS_EACH) ) {s = 33;}
						else if ( (LA294_0==SASS_WHILE) ) {s = 34;}
						else if ( (LA294_0==SASS_CONTENT) ) {s = 35;}
						else if ( (LA294_0==IMPORT_SYM) ) {s = 36;}
						else if ( (LA294_0==PAGE_SYM) ) {s = 37;}
						else if ( (LA294_0==FONT_FACE_SYM) ) {s = 38;}
						else if ( (LA294_0==MOZ_DOCUMENT_SYM) ) {s = 39;}
						else if ( (LA294_0==WEBKIT_KEYFRAMES_SYM) ) {s = 40;}
						else if ( (LA294_0==MEDIA_SYM) ) {s = 41;}
						else if ( (LA294_0==SASS_EXTEND) ) {s = 42;}
						else if ( (LA294_0==COUNTER_STYLE_SYM) ) {s = 44;}
						else if ( (LA294_0==SASS_FUNCTION) ) {s = 46;}
						else if ( ((LA294_0 >= BOTTOMCENTER_SYM && LA294_0 <= BOTTOMRIGHT_SYM)||LA294_0==CHARSET_SYM||(LA294_0 >= LEFTBOTTOM_SYM && LA294_0 <= LEFTTOP_SYM)||LA294_0==NAMESPACE_SYM||(LA294_0 >= RIGHTBOTTOM_SYM && LA294_0 <= RIGHTTOP_SYM)||LA294_0==SASS_ELSE||LA294_0==SASS_RETURN||(LA294_0 >= TOPCENTER_SYM && LA294_0 <= TOPRIGHT_SYM)) ) {s = 47;}
						else if ( (LA294_0==NOT) ) {s = 51;}
						else if ( (LA294_0==TILDE) ) {s = 52;}
						else if ( (LA294_0==PERCENTAGE) ) {s = 53;}
						else if ( (LA294_0==LENGTH) ) {s = 54;}
						else if ( (LA294_0==EMS) ) {s = 55;}
						else if ( (LA294_0==REM) ) {s = 56;}
						else if ( (LA294_0==EXS) ) {s = 57;}
						else if ( (LA294_0==ANGLE) ) {s = 58;}
						else if ( (LA294_0==TIME) ) {s = 59;}
						else if ( (LA294_0==FREQ) ) {s = 60;}
						else if ( (LA294_0==RESOLUTION) ) {s = 61;}
						else if ( (LA294_0==GREATER) ) {s = 62;}
						else if ( (LA294_0==LESS_JS_STRING) ) {s = 63;}
						else if ( (LA294_0==URI) ) {s = 64;}
						else if ( (LA294_0==PERCENTAGE_SYMBOL) ) {s = 65;}
						else if ( (LA294_0==LPAREN) ) {s = 66;}
						else if ( (LA294_0==COMMENT||LA294_0==NL) ) {s = 69;}
						else if ( (LA294_0==CP_EQ) && (synpred44_Css3())) {s = 70;}
						else if ( (LA294_0==CP_NOT_EQ) && (synpred44_Css3())) {s = 71;}
						else if ( (LA294_0==LESS) && (synpred44_Css3())) {s = 72;}
						else if ( (LA294_0==LESS_OR_EQ) && (synpred44_Css3())) {s = 73;}
						else if ( (LA294_0==GREATER_OR_EQ) && (synpred44_Css3())) {s = 74;}
						 
						input.seek(index294_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA294_1 = input.LA(1);
						 
						int index294_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 74;}
						else if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA294_3 = input.LA(1);
						 
						int index294_3 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_3);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA294_5 = input.LA(1);
						 
						int index294_5 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_5);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA294_6 = input.LA(1);
						 
						int index294_6 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_6);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA294_7 = input.LA(1);
						 
						int index294_7 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred44_Css3()&&(evalPredicate(tokenNameEquals("or"),"tokenNameEquals(\"or\")")||evalPredicate(tokenNameEquals("and"),"tokenNameEquals(\"and\")")))) ) {s = 74;}
						else if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_7);
						if ( s>=0 ) return s;
						break;

					case 6 : 
						int LA294_8 = input.LA(1);
						 
						int index294_8 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_8);
						if ( s>=0 ) return s;
						break;

					case 7 : 
						int LA294_9 = input.LA(1);
						 
						int index294_9 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred45_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_9);
						if ( s>=0 ) return s;
						break;

					case 8 : 
						int LA294_10 = input.LA(1);
						 
						int index294_10 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isLessSource(),"isLessSource()")&&synpred45_Css3())) ) {s = 75;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}
						 
						input.seek(index294_10);
						if ( s>=0 ) return s;
						break;

					case 9 : 
						int LA294_11 = input.LA(1);
						 
						int index294_11 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_11);
						if ( s>=0 ) return s;
						break;

					case 10 : 
						int LA294_12 = input.LA(1);
						 
						int index294_12 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_12);
						if ( s>=0 ) return s;
						break;

					case 11 : 
						int LA294_13 = input.LA(1);
						 
						int index294_13 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_13);
						if ( s>=0 ) return s;
						break;

					case 12 : 
						int LA294_14 = input.LA(1);
						 
						int index294_14 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred45_Css3())&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 75;}
						else if ( (evalPredicate(isScssSource(),"isScssSource()")) ) {s = 2;}
						 
						input.seek(index294_14);
						if ( s>=0 ) return s;
						break;

					case 13 : 
						int LA294_17 = input.LA(1);
						 
						int index294_17 = input.index();
						input.rewind();
						s = -1;
						if ( ((synpred45_Css3()&&evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_17);
						if ( s>=0 ) return s;
						break;

					case 14 : 
						int LA294_19 = input.LA(1);
						 
						int index294_19 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_19);
						if ( s>=0 ) return s;
						break;

					case 15 : 
						int LA294_20 = input.LA(1);
						 
						int index294_20 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_20);
						if ( s>=0 ) return s;
						break;

					case 16 : 
						int LA294_21 = input.LA(1);
						 
						int index294_21 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_21);
						if ( s>=0 ) return s;
						break;

					case 17 : 
						int LA294_22 = input.LA(1);
						 
						int index294_22 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_22);
						if ( s>=0 ) return s;
						break;

					case 18 : 
						int LA294_23 = input.LA(1);
						 
						int index294_23 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_23);
						if ( s>=0 ) return s;
						break;

					case 19 : 
						int LA294_24 = input.LA(1);
						 
						int index294_24 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_24);
						if ( s>=0 ) return s;
						break;

					case 20 : 
						int LA294_26 = input.LA(1);
						 
						int index294_26 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_26);
						if ( s>=0 ) return s;
						break;

					case 21 : 
						int LA294_31 = input.LA(1);
						 
						int index294_31 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_31);
						if ( s>=0 ) return s;
						break;

					case 22 : 
						int LA294_32 = input.LA(1);
						 
						int index294_32 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_32);
						if ( s>=0 ) return s;
						break;

					case 23 : 
						int LA294_33 = input.LA(1);
						 
						int index294_33 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_33);
						if ( s>=0 ) return s;
						break;

					case 24 : 
						int LA294_34 = input.LA(1);
						 
						int index294_34 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_34);
						if ( s>=0 ) return s;
						break;

					case 25 : 
						int LA294_35 = input.LA(1);
						 
						int index294_35 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_35);
						if ( s>=0 ) return s;
						break;

					case 26 : 
						int LA294_36 = input.LA(1);
						 
						int index294_36 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")||(evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()")))) ) {s = 2;}
						 
						input.seek(index294_36);
						if ( s>=0 ) return s;
						break;

					case 27 : 
						int LA294_37 = input.LA(1);
						 
						int index294_37 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_37);
						if ( s>=0 ) return s;
						break;

					case 28 : 
						int LA294_38 = input.LA(1);
						 
						int index294_38 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_38);
						if ( s>=0 ) return s;
						break;

					case 29 : 
						int LA294_39 = input.LA(1);
						 
						int index294_39 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_39);
						if ( s>=0 ) return s;
						break;

					case 30 : 
						int LA294_40 = input.LA(1);
						 
						int index294_40 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_40);
						if ( s>=0 ) return s;
						break;

					case 31 : 
						int LA294_41 = input.LA(1);
						 
						int index294_41 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_41);
						if ( s>=0 ) return s;
						break;

					case 32 : 
						int LA294_42 = input.LA(1);
						 
						int index294_42 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_42);
						if ( s>=0 ) return s;
						break;

					case 33 : 
						int LA294_44 = input.LA(1);
						 
						int index294_44 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_44);
						if ( s>=0 ) return s;
						break;

					case 34 : 
						int LA294_46 = input.LA(1);
						 
						int index294_46 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))||evalPredicate(isLessSource(),"isLessSource()")||(evalPredicate(isLessSource(),"isLessSource()")&&evalPredicate(isScssSource(),"isScssSource()"))||evalPredicate(isScssSource(),"isScssSource()"))) ) {s = 2;}
						 
						input.seek(index294_46);
						if ( s>=0 ) return s;
						break;

					case 35 : 
						int LA294_47 = input.LA(1);
						 
						int index294_47 = input.index();
						input.rewind();
						s = -1;
						if ( (((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&evalPredicate(isLessSource(),"isLessSource()"))&&synpred45_Css3())) ) {s = 75;}
						else if ( (evalPredicate(isLessSource(),"isLessSource()")) ) {s = 2;}
						 
						input.seek(index294_47);
						if ( s>=0 ) return s;
						break;

					case 36 : 
						int LA294_51 = input.LA(1);
						 
						int index294_51 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_51);
						if ( s>=0 ) return s;
						break;

					case 37 : 
						int LA294_52 = input.LA(1);
						 
						int index294_52 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_52);
						if ( s>=0 ) return s;
						break;

					case 38 : 
						int LA294_53 = input.LA(1);
						 
						int index294_53 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_53);
						if ( s>=0 ) return s;
						break;

					case 39 : 
						int LA294_54 = input.LA(1);
						 
						int index294_54 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_54);
						if ( s>=0 ) return s;
						break;

					case 40 : 
						int LA294_55 = input.LA(1);
						 
						int index294_55 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_55);
						if ( s>=0 ) return s;
						break;

					case 41 : 
						int LA294_56 = input.LA(1);
						 
						int index294_56 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_56);
						if ( s>=0 ) return s;
						break;

					case 42 : 
						int LA294_57 = input.LA(1);
						 
						int index294_57 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_57);
						if ( s>=0 ) return s;
						break;

					case 43 : 
						int LA294_58 = input.LA(1);
						 
						int index294_58 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_58);
						if ( s>=0 ) return s;
						break;

					case 44 : 
						int LA294_59 = input.LA(1);
						 
						int index294_59 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_59);
						if ( s>=0 ) return s;
						break;

					case 45 : 
						int LA294_60 = input.LA(1);
						 
						int index294_60 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_60);
						if ( s>=0 ) return s;
						break;

					case 46 : 
						int LA294_61 = input.LA(1);
						 
						int index294_61 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_61);
						if ( s>=0 ) return s;
						break;

					case 47 : 
						int LA294_62 = input.LA(1);
						 
						int index294_62 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 74;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_62);
						if ( s>=0 ) return s;
						break;

					case 48 : 
						int LA294_63 = input.LA(1);
						 
						int index294_63 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_63);
						if ( s>=0 ) return s;
						break;

					case 49 : 
						int LA294_64 = input.LA(1);
						 
						int index294_64 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_64);
						if ( s>=0 ) return s;
						break;

					case 50 : 
						int LA294_65 = input.LA(1);
						 
						int index294_65 = input.index();
						input.rewind();
						s = -1;
						if ( ((evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")&&synpred45_Css3())) ) {s = 75;}
						else if ( (evalPredicate(isCssPreprocessorSource(),"isCssPreprocessorSource()")) ) {s = 2;}
						 
						input.seek(index294_65);
						if ( s>=0 ) return s;
						break;

					case 51 : 
						int LA294_66 = input.LA(1);
						 
						int index294_66 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_66);
						if ( s>=0 ) return s;
						break;

					case 52 : 
						int LA294_69 = input.LA(1);
						 
						int index294_69 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred44_Css3()) ) {s = 74;}
						else if ( (synpred45_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index294_69);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 294, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA308_eotS =
		"\114\uffff";
	static final String DFA308_eofS =
		"\1\2\113\uffff";
	static final String DFA308_minS =
		"\1\5\1\0\13\uffff\1\0\32\uffff\1\0\11\uffff\1\0\27\uffff\1\0\1\uffff";
	static final String DFA308_maxS =
		"\1\u0094\1\0\13\uffff\1\0\32\uffff\1\0\11\uffff\1\0\27\uffff\1\0\1\uffff";
	static final String DFA308_acceptS =
		"\2\uffff\1\2\110\uffff\1\1";
	static final String DFA308_specialS =
		"\1\0\1\1\13\uffff\1\2\32\uffff\1\3\11\uffff\1\4\27\uffff\1\5\1\uffff}>";
	static final String[] DFA308_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\3\2\1\112\1\uffff\4\2\2\uffff\3\2\1\uffff\1"+
			"\2\3\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\2\2\2\uffff\3\2\5\uffff"+
			"\13\2\1\uffff\1\2\1\uffff\1\2\1\15\1\2\5\uffff\1\2\1\112\3\uffff\2\2"+
			"\3\uffff\4\2\1\50\2\uffff\1\2\1\uffff\6\2\1\uffff\6\2\2\uffff\10\2\1"+
			"\uffff\5\2\1\113\1\62\2\2\1\uffff\7\2\2\uffff\1\2\2\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"",
			"\1\uffff",
			""
	};

	static final short[] DFA308_eot = DFA.unpackEncodedString(DFA308_eotS);
	static final short[] DFA308_eof = DFA.unpackEncodedString(DFA308_eofS);
	static final char[] DFA308_min = DFA.unpackEncodedStringToUnsignedChars(DFA308_minS);
	static final char[] DFA308_max = DFA.unpackEncodedStringToUnsignedChars(DFA308_maxS);
	static final short[] DFA308_accept = DFA.unpackEncodedString(DFA308_acceptS);
	static final short[] DFA308_special = DFA.unpackEncodedString(DFA308_specialS);
	static final short[][] DFA308_transition;

	static {
		int numStates = DFA308_transitionS.length;
		DFA308_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA308_transition[i] = DFA.unpackEncodedString(DFA308_transitionS[i]);
		}
	}

	protected class DFA308 extends DFA {

		public DFA308(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 308;
			this.eot = DFA308_eot;
			this.eof = DFA308_eof;
			this.min = DFA308_min;
			this.max = DFA308_max;
			this.accept = DFA308_accept;
			this.special = DFA308_special;
			this.transition = DFA308_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1085:10: ( ( ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) )=> ( ws )? ( PLUS | MINUS | STAR | SOLIDUS ) ( ws )? cp_math_expression_atom )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA308_0 = input.LA(1);
						 
						int index308_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA308_0==WS) ) {s = 1;}
						else if ( (LA308_0==EOF||(LA308_0 >= ANGLE && LA308_0 <= AT_SIGN)||(LA308_0 >= BOTTOMCENTER_SYM && LA308_0 <= BOTTOMRIGHT_SYM)||(LA308_0 >= CHARSET_SYM && LA308_0 <= COMMA)||(LA308_0 >= COUNTER_STYLE_SYM && LA308_0 <= CP_NOT_EQ)||(LA308_0 >= DCOLON && LA308_0 <= DOT)||LA308_0==EMS||LA308_0==EXS||(LA308_0 >= FONT_FACE_SYM && LA308_0 <= FREQ)||(LA308_0 >= GEN && LA308_0 <= GREATER_OR_EQ)||(LA308_0 >= HASH && LA308_0 <= HASH_SYMBOL)||(LA308_0 >= IDENT && LA308_0 <= IMPORT_SYM)||(LA308_0 >= LBRACE && LA308_0 <= LESS_REST)||LA308_0==LPAREN||LA308_0==MEDIA_SYM||LA308_0==MOZ_DOCUMENT_SYM||LA308_0==NAMESPACE_SYM||(LA308_0 >= NOT && LA308_0 <= NUMBER)||(LA308_0 >= PAGE_SYM && LA308_0 <= PIPE)||LA308_0==RBRACE||(LA308_0 >= REM && LA308_0 <= RPAREN)||(LA308_0 >= SASS_AT_ROOT && LA308_0 <= SASS_ELSE)||(LA308_0 >= SASS_EXTEND && LA308_0 <= SASS_MIXIN)||(LA308_0 >= SASS_RETURN && LA308_0 <= SEMI)||(LA308_0 >= STRING && LA308_0 <= SUPPORTS_SYM)||(LA308_0 >= TILDE && LA308_0 <= TOPRIGHT_SYM)||LA308_0==URI||LA308_0==VARIABLE||LA308_0==WEBKIT_KEYFRAMES_SYM) ) {s = 2;}
						else if ( (LA308_0==MINUS) ) {s = 13;}
						else if ( (LA308_0==PLUS) ) {s = 40;}
						else if ( (LA308_0==STAR) ) {s = 50;}
						else if ( (LA308_0==COMMENT||LA308_0==NL) ) {s = 74;}
						else if ( (LA308_0==SOLIDUS) && (synpred47_Css3())) {s = 75;}
						 
						input.seek(index308_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA308_1 = input.LA(1);
						 
						int index308_1 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index308_1);
						if ( s>=0 ) return s;
						break;

					case 2 : 
						int LA308_13 = input.LA(1);
						 
						int index308_13 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index308_13);
						if ( s>=0 ) return s;
						break;

					case 3 : 
						int LA308_40 = input.LA(1);
						 
						int index308_40 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index308_40);
						if ( s>=0 ) return s;
						break;

					case 4 : 
						int LA308_50 = input.LA(1);
						 
						int index308_50 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index308_50);
						if ( s>=0 ) return s;
						break;

					case 5 : 
						int LA308_74 = input.LA(1);
						 
						int index308_74 = input.index();
						input.rewind();
						s = -1;
						if ( (synpred47_Css3()) ) {s = 75;}
						else if ( (true) ) {s = 2;}
						 
						input.seek(index308_74);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 308, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA313_eotS =
		"\6\uffff";
	static final String DFA313_eofS =
		"\6\uffff";
	static final String DFA313_minS =
		"\2\5\3\uffff\1\5";
	static final String DFA313_maxS =
		"\1\u0093\1\u0094\3\uffff\1\u0094";
	static final String DFA313_acceptS =
		"\2\uffff\1\1\1\2\1\3\1\uffff";
	static final String DFA313_specialS =
		"\6\uffff}>";
	static final String[] DFA313_transitionS = {
			"\3\2\2\uffff\5\2\3\uffff\1\2\4\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\2\uffff\1\2\1\3\1\2\7\uffff"+
			"\4\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\1\1\2\5\uffff\1\2\5\uffff"+
			"\1\2\3\uffff\3\2\1\uffff\1\1\4\uffff\5\2\2\uffff\3\2\1\uffff\2\2\2\uffff"+
			"\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff\7\2\2\uffff"+
			"\1\2\2\uffff\1\2\1\uffff\1\2",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\4\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\5",
			"",
			"",
			"",
			"\3\2\2\uffff\5\2\3\uffff\1\2\2\uffff\1\5\1\uffff\1\2\6\uffff\1\2\2\uffff"+
			"\1\2\3\uffff\1\2\1\uffff\2\2\1\uffff\1\2\3\uffff\2\2\2\uffff\1\2\1\uffff"+
			"\1\2\7\uffff\4\2\1\uffff\2\2\3\uffff\1\4\1\uffff\1\2\1\uffff\1\2\5\uffff"+
			"\1\2\1\5\4\uffff\1\2\3\uffff\3\2\6\uffff\5\2\2\uffff\3\2\1\uffff\2\2"+
			"\2\uffff\1\2\1\uffff\2\2\1\uffff\3\2\1\uffff\4\2\3\uffff\1\2\2\uffff"+
			"\7\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\5"
	};

	static final short[] DFA313_eot = DFA.unpackEncodedString(DFA313_eotS);
	static final short[] DFA313_eof = DFA.unpackEncodedString(DFA313_eofS);
	static final char[] DFA313_min = DFA.unpackEncodedStringToUnsignedChars(DFA313_minS);
	static final char[] DFA313_max = DFA.unpackEncodedStringToUnsignedChars(DFA313_maxS);
	static final short[] DFA313_accept = DFA.unpackEncodedString(DFA313_acceptS);
	static final short[] DFA313_special = DFA.unpackEncodedString(DFA313_specialS);
	static final short[][] DFA313_transition;

	static {
		int numStates = DFA313_transitionS.length;
		DFA313_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA313_transition[i] = DFA.unpackEncodedString(DFA313_transitionS[i]);
		}
	}

	protected class DFA313 extends DFA {

		public DFA313(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 313;
			this.eot = DFA313_eot;
			this.eof = DFA313_eof;
			this.min = DFA313_min;
			this.max = DFA313_max;
			this.accept = DFA313_accept;
			this.special = DFA313_special;
			this.transition = DFA313_transition;
		}
		@Override
		public String getDescription() {
			return "1090:1: cp_math_expression_atom : ( term | IMPORTANT_SYM | ( unaryOperator ( ws )? )? LPAREN ( ws )? cp_math_expression ( ws )? RPAREN );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA320_eotS =
		"\4\uffff";
	static final String DFA320_eofS =
		"\4\uffff";
	static final String DFA320_minS =
		"\2\25\2\uffff";
	static final String DFA320_maxS =
		"\2\u0094\2\uffff";
	static final String DFA320_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA320_specialS =
		"\4\uffff}>";
	static final String[] DFA320_transitionS = {
			"\1\1\34\uffff\1\2\7\uffff\1\3\26\uffff\1\1\102\uffff\1\1",
			"\1\1\34\uffff\1\2\7\uffff\1\3\26\uffff\1\1\102\uffff\1\1",
			"",
			""
	};

	static final short[] DFA320_eot = DFA.unpackEncodedString(DFA320_eotS);
	static final short[] DFA320_eof = DFA.unpackEncodedString(DFA320_eofS);
	static final char[] DFA320_min = DFA.unpackEncodedStringToUnsignedChars(DFA320_minS);
	static final char[] DFA320_max = DFA.unpackEncodedStringToUnsignedChars(DFA320_maxS);
	static final short[] DFA320_accept = DFA.unpackEncodedString(DFA320_acceptS);
	static final short[] DFA320_special = DFA.unpackEncodedString(DFA320_specialS);
	static final short[][] DFA320_transition;

	static {
		int numStates = DFA320_transitionS.length;
		DFA320_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA320_transition[i] = DFA.unpackEncodedString(DFA320_transitionS[i]);
		}
	}

	protected class DFA320 extends DFA {

		public DFA320(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 320;
			this.eot = DFA320_eot;
			this.eof = DFA320_eof;
			this.min = DFA320_min;
			this.max = DFA320_max;
			this.accept = DFA320_accept;
			this.special = DFA320_special;
			this.transition = DFA320_transition;
		}
		@Override
		public String getDescription() {
			return "1106:107: ( ( ws )? less_mixin_guarded )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA324_eotS =
		"\4\uffff";
	static final String DFA324_eofS =
		"\4\uffff";
	static final String DFA324_minS =
		"\2\25\2\uffff";
	static final String DFA324_maxS =
		"\2\u0094\2\uffff";
	static final String DFA324_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA324_specialS =
		"\4\uffff}>";
	static final String[] DFA324_transitionS = {
			"\1\1\44\uffff\1\3\13\uffff\1\2\12\uffff\1\1\102\uffff\1\1",
			"\1\1\44\uffff\1\3\13\uffff\1\2\12\uffff\1\1\102\uffff\1\1",
			"",
			""
	};

	static final short[] DFA324_eot = DFA.unpackEncodedString(DFA324_eotS);
	static final short[] DFA324_eof = DFA.unpackEncodedString(DFA324_eofS);
	static final char[] DFA324_min = DFA.unpackEncodedStringToUnsignedChars(DFA324_minS);
	static final char[] DFA324_max = DFA.unpackEncodedStringToUnsignedChars(DFA324_maxS);
	static final short[] DFA324_accept = DFA.unpackEncodedString(DFA324_acceptS);
	static final short[] DFA324_special = DFA.unpackEncodedString(DFA324_specialS);
	static final short[][] DFA324_transition;

	static {
		int numStates = DFA324_transitionS.length;
		DFA324_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA324_transition[i] = DFA.unpackEncodedString(DFA324_transitionS[i]);
		}
	}

	protected class DFA324 extends DFA {

		public DFA324(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 324;
			this.eot = DFA324_eot;
			this.eof = DFA324_eof;
			this.min = DFA324_min;
			this.max = DFA324_max;
			this.accept = DFA324_accept;
			this.special = DFA324_special;
			this.transition = DFA324_transition;
		}
		@Override
		public String getDescription() {
			return "1108:55: ( ( ws )? LPAREN ( ws )? ( cp_args_list )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA339_eotS =
		"\4\uffff";
	static final String DFA339_eofS =
		"\2\3\2\uffff";
	static final String DFA339_minS =
		"\2\6\2\uffff";
	static final String DFA339_maxS =
		"\2\u0094\2\uffff";
	static final String DFA339_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA339_specialS =
		"\4\uffff}>";
	static final String[] DFA339_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\5\3\2\uffff\1\3\4\uffff"+
			"\1\2\1\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3"+
			"\3\uffff\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\3\3\1\uffff"+
			"\5\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff"+
			"\1\3\1\1",
			"",
			""
	};

	static final short[] DFA339_eot = DFA.unpackEncodedString(DFA339_eotS);
	static final short[] DFA339_eof = DFA.unpackEncodedString(DFA339_eofS);
	static final char[] DFA339_min = DFA.unpackEncodedStringToUnsignedChars(DFA339_minS);
	static final char[] DFA339_max = DFA.unpackEncodedStringToUnsignedChars(DFA339_maxS);
	static final short[] DFA339_accept = DFA.unpackEncodedString(DFA339_acceptS);
	static final short[] DFA339_special = DFA.unpackEncodedString(DFA339_specialS);
	static final short[][] DFA339_transition;

	static {
		int numStates = DFA339_transitionS.length;
		DFA339_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA339_transition[i] = DFA.unpackEncodedString(DFA339_transitionS[i]);
		}
	}

	protected class DFA339 extends DFA {

		public DFA339(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 339;
			this.eot = DFA339_eot;
			this.eof = DFA339_eof;
			this.min = DFA339_min;
			this.max = DFA339_max;
			this.accept = DFA339_accept;
			this.special = DFA339_special;
			this.transition = DFA339_transition;
		}
		@Override
		public String getDescription() {
			return "1120:57: ( ( ws )? LPAREN ( ws )? ( cp_mixin_call_args )? RPAREN )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA341_eotS =
		"\4\uffff";
	static final String DFA341_eofS =
		"\2\3\2\uffff";
	static final String DFA341_minS =
		"\2\6\2\uffff";
	static final String DFA341_maxS =
		"\2\u0094\2\uffff";
	static final String DFA341_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA341_specialS =
		"\4\uffff}>";
	static final String[] DFA341_transitionS = {
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\1\2\4\3\2\uffff\1\3"+
			"\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3\3\uffff"+
			"\4\3\1\uffff\3\3\1\uffff\2\3\2\uffff\4\3\1\uffff\3\3\1\uffff\5\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"\2\3\2\uffff\5\3\3\uffff\2\3\1\uffff\1\1\1\uffff\1\3\5\uffff\3\3\7\uffff"+
			"\1\3\2\uffff\2\3\2\uffff\2\3\2\uffff\3\3\5\uffff\1\2\4\3\2\uffff\1\3"+
			"\6\uffff\3\3\5\uffff\1\3\1\1\10\uffff\1\3\2\uffff\2\3\2\uffff\1\3\3\uffff"+
			"\4\3\1\uffff\3\3\1\uffff\2\3\1\uffff\5\3\1\uffff\3\3\1\uffff\5\3\1\uffff"+
			"\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\5\3\5\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA341_eot = DFA.unpackEncodedString(DFA341_eotS);
	static final short[] DFA341_eof = DFA.unpackEncodedString(DFA341_eofS);
	static final char[] DFA341_min = DFA.unpackEncodedStringToUnsignedChars(DFA341_minS);
	static final char[] DFA341_max = DFA.unpackEncodedStringToUnsignedChars(DFA341_maxS);
	static final short[] DFA341_accept = DFA.unpackEncodedString(DFA341_acceptS);
	static final short[] DFA341_special = DFA.unpackEncodedString(DFA341_specialS);
	static final short[][] DFA341_transition;

	static {
		int numStates = DFA341_transitionS.length;
		DFA341_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA341_transition[i] = DFA.unpackEncodedString(DFA341_transitionS[i]);
		}
	}

	protected class DFA341 extends DFA {

		public DFA341(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 341;
			this.eot = DFA341_eot;
			this.eof = DFA341_eof;
			this.min = DFA341_min;
			this.max = DFA341_max;
			this.accept = DFA341_accept;
			this.special = DFA341_special;
			this.transition = DFA341_transition;
		}
		@Override
		public String getDescription() {
			return "1120:102: ( ( ws )? cp_mixin_block )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA354_eotS =
		"\7\uffff";
	static final String DFA354_eofS =
		"\7\uffff";
	static final String DFA354_minS =
		"\3\5\1\uffff\1\5\1\uffff\1\5";
	static final String DFA354_maxS =
		"\1\u0093\2\u0094\1\uffff\1\u0094\1\uffff\1\u0094";
	static final String DFA354_acceptS =
		"\3\uffff\1\2\1\uffff\1\1\1\uffff";
	static final String DFA354_specialS =
		"\7\uffff}>";
	static final String[] DFA354_transitionS = {
			"\1\3\1\1\1\3\2\uffff\5\1\3\uffff\1\1\4\uffff\1\1\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\1\1\1\3\1\uffff\1\3\3\uffff\2\3\2\uffff\2\3"+
			"\1\1\5\uffff\1\3\1\uffff\3\1\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\1"+
			"\1\3\1\1\5\uffff\1\1\4\uffff\2\3\3\uffff\1\1\2\3\1\uffff\1\3\4\uffff"+
			"\2\3\3\1\2\uffff\3\1\1\uffff\2\1\2\uffff\1\1\1\uffff\2\1\1\uffff\3\1"+
			"\1\uffff\1\1\1\2\2\1\3\uffff\1\3\2\uffff\2\3\5\1\2\uffff\1\3\2\uffff"+
			"\1\3\1\uffff\1\1",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\5\1\3\1\4\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\10\3\2\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\4\3\uffff\2\3\3\uffff\3\3"+
			"\1\uffff\1\3\4\uffff\6\3\1\uffff\3\3\1\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\2\3\1\uffff\3\3\1\uffff\10\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
			"\1\3\1\4",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\5\1\3\1\6\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\10\3\2\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\6\3\uffff\2\3\3\uffff\3\3"+
			"\1\uffff\1\3\4\uffff\6\3\1\uffff\3\3\1\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\2\3\1\uffff\3\3\1\uffff\10\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
			"\1\3\1\6",
			"",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\5\1\3\1\4\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\10\3\2\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\4\3\uffff\2\3\3\uffff\3\3"+
			"\1\uffff\1\3\4\uffff\6\3\1\uffff\3\3\1\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\2\3\1\uffff\3\3\1\uffff\10\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
			"\1\3\1\4",
			"",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\5\1\3\1\6\1\uffff\4\3\3\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\2\3\2\uffff\3\3\7\uffff"+
			"\10\3\2\uffff\1\3\1\uffff\3\3\5\uffff\1\3\1\6\3\uffff\2\3\3\uffff\3\3"+
			"\1\uffff\1\3\4\uffff\6\3\1\uffff\3\3\1\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\2\3\1\uffff\3\3\1\uffff\10\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff"+
			"\1\3\1\6"
	};

	static final short[] DFA354_eot = DFA.unpackEncodedString(DFA354_eotS);
	static final short[] DFA354_eof = DFA.unpackEncodedString(DFA354_eofS);
	static final char[] DFA354_min = DFA.unpackEncodedStringToUnsignedChars(DFA354_minS);
	static final char[] DFA354_max = DFA.unpackEncodedStringToUnsignedChars(DFA354_maxS);
	static final short[] DFA354_accept = DFA.unpackEncodedString(DFA354_acceptS);
	static final short[] DFA354_special = DFA.unpackEncodedString(DFA354_specialS);
	static final short[][] DFA354_transition;

	static {
		int numStates = DFA354_transitionS.length;
		DFA354_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA354_transition[i] = DFA.unpackEncodedString(DFA354_transitionS[i]);
		}
	}

	protected class DFA354 extends DFA {

		public DFA354(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 354;
			this.eot = DFA354_eot;
			this.eof = DFA354_eof;
			this.min = DFA354_min;
			this.max = DFA354_max;
			this.accept = DFA354_accept;
			this.special = DFA354_special;
			this.transition = DFA354_transition;
		}
		@Override
		public String getDescription() {
			return "1146:5: ( cp_variable ( ws )? COLON ( ws )? cp_expression | cp_expression )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA357_eotS =
		"\5\uffff";
	static final String DFA357_eofS =
		"\5\uffff";
	static final String DFA357_minS =
		"\1\24\1\6\1\uffff\1\6\1\uffff";
	static final String DFA357_maxS =
		"\1\177\1\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA357_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA357_specialS =
		"\5\uffff}>";
	static final String[] DFA357_transitionS = {
			"\1\1\3\uffff\1\2\53\uffff\1\2\43\uffff\1\2\26\uffff\1\1",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\12\uffff\1\4\1\uffff\1\4\7\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\4\4\10\uffff\5\4\7\uffff"+
			"\1\4\1\3",
			"",
			"\1\4\3\uffff\5\4\3\uffff\1\4\2\uffff\1\3\1\uffff\1\4\1\2\16\uffff\1"+
			"\4\12\uffff\1\4\1\uffff\1\4\7\uffff\3\4\5\uffff\1\2\3\uffff\1\4\1\uffff"+
			"\1\4\5\uffff\1\4\1\3\10\uffff\1\4\12\uffff\3\4\1\2\1\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\4\4\10\uffff\5\4\7\uffff"+
			"\1\4\1\3",
			""
	};

	static final short[] DFA357_eot = DFA.unpackEncodedString(DFA357_eotS);
	static final short[] DFA357_eof = DFA.unpackEncodedString(DFA357_eofS);
	static final char[] DFA357_min = DFA.unpackEncodedStringToUnsignedChars(DFA357_minS);
	static final char[] DFA357_max = DFA.unpackEncodedStringToUnsignedChars(DFA357_maxS);
	static final short[] DFA357_accept = DFA.unpackEncodedString(DFA357_acceptS);
	static final short[] DFA357_special = DFA.unpackEncodedString(DFA357_specialS);
	static final short[][] DFA357_transition;

	static {
		int numStates = DFA357_transitionS.length;
		DFA357_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA357_transition[i] = DFA.unpackEncodedString(DFA357_transitionS[i]);
		}
	}

	protected class DFA357 extends DFA {

		public DFA357(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 357;
			this.eot = DFA357_eot;
			this.eof = DFA357_eof;
			this.min = DFA357_min;
			this.max = DFA357_max;
			this.accept = DFA357_accept;
			this.special = DFA357_special;
			this.transition = DFA357_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1161:14: ( ( COMMA | SEMI ) ( ws )? cp_arg )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA373_eotS =
		"\4\uffff";
	static final String DFA373_eofS =
		"\4\uffff";
	static final String DFA373_minS =
		"\2\24\2\uffff";
	static final String DFA373_maxS =
		"\2\u0094\2\uffff";
	static final String DFA373_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA373_specialS =
		"\4\uffff}>";
	static final String[] DFA373_transitionS = {
			"\1\3\1\1\34\uffff\1\3\7\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"\1\3\1\1\34\uffff\1\3\7\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"",
			""
	};

	static final short[] DFA373_eot = DFA.unpackEncodedString(DFA373_eotS);
	static final short[] DFA373_eof = DFA.unpackEncodedString(DFA373_eofS);
	static final char[] DFA373_min = DFA.unpackEncodedStringToUnsignedChars(DFA373_minS);
	static final char[] DFA373_max = DFA.unpackEncodedStringToUnsignedChars(DFA373_maxS);
	static final short[] DFA373_accept = DFA.unpackEncodedString(DFA373_acceptS);
	static final short[] DFA373_special = DFA.unpackEncodedString(DFA373_specialS);
	static final short[][] DFA373_transition;

	static {
		int numStates = DFA373_transitionS.length;
		DFA373_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA373_transition[i] = DFA.unpackEncodedString(DFA373_transitionS[i]);
		}
	}

	protected class DFA373 extends DFA {

		public DFA373(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 373;
			this.eot = DFA373_eot;
			this.eof = DFA373_eof;
			this.min = DFA373_min;
			this.max = DFA373_max;
			this.accept = DFA373_accept;
			this.special = DFA373_special;
			this.transition = DFA373_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1177:34: ( ( ws )? ( COMMA | key_and ) ( ws )? less_condition )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA400_eotS =
		"\4\uffff";
	static final String DFA400_eofS =
		"\4\uffff";
	static final String DFA400_minS =
		"\1\25\1\6\2\uffff";
	static final String DFA400_maxS =
		"\2\u0094\2\uffff";
	static final String DFA400_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA400_specialS =
		"\4\uffff}>";
	static final String[] DFA400_transitionS = {
			"\1\1\73\uffff\1\1\17\uffff\1\2\6\uffff\1\2\26\uffff\1\2\24\uffff\1\1",
			"\2\2\2\uffff\5\2\3\uffff\2\2\1\uffff\1\1\1\uffff\1\2\5\uffff\3\2\7\uffff"+
			"\1\2\2\uffff\2\2\2\uffff\2\2\2\uffff\1\2\1\uffff\1\2\6\uffff\4\2\2\uffff"+
			"\1\2\6\uffff\3\2\5\uffff\1\2\1\1\10\uffff\1\2\2\uffff\2\2\2\uffff\1\2"+
			"\3\uffff\4\2\1\uffff\3\2\1\uffff\2\2\1\uffff\5\2\1\uffff\3\2\1\3\5\2"+
			"\1\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\5\2\5\uffff\1\2\1\uffff"+
			"\1\2\1\1",
			"",
			""
	};

	static final short[] DFA400_eot = DFA.unpackEncodedString(DFA400_eotS);
	static final short[] DFA400_eof = DFA.unpackEncodedString(DFA400_eofS);
	static final char[] DFA400_min = DFA.unpackEncodedStringToUnsignedChars(DFA400_minS);
	static final char[] DFA400_max = DFA.unpackEncodedStringToUnsignedChars(DFA400_maxS);
	static final short[] DFA400_accept = DFA.unpackEncodedString(DFA400_acceptS);
	static final short[] DFA400_special = DFA.unpackEncodedString(DFA400_specialS);
	static final short[][] DFA400_transition;

	static {
		int numStates = DFA400_transitionS.length;
		DFA400_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA400_transition[i] = DFA.unpackEncodedString(DFA400_transitionS[i]);
		}
	}

	protected class DFA400 extends DFA {

		public DFA400(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 400;
			this.eot = DFA400_eot;
			this.eof = DFA400_eof;
			this.min = DFA400_min;
			this.max = DFA400_max;
			this.accept = DFA400_accept;
			this.special = DFA400_special;
			this.transition = DFA400_transition;
		}
		@Override
		public String getDescription() {
			return "1253:43: ( ws SASS_OPTIONAL )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA406_eotS =
		"\10\uffff";
	static final String DFA406_eofS =
		"\2\4\6\uffff";
	static final String DFA406_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA406_maxS =
		"\3\u0094\2\uffff\3\u0094";
	static final String DFA406_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA406_specialS =
		"\10\uffff}>";
	static final String[] DFA406_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\4\4\1\uffff\3\4"+
			"\1\uffff\5\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\5\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff\1\4\1\uffff"+
			"\1\4\1\1",
			"\1\4\1\uffff\1\6\34\uffff\1\3\7\uffff\1\3\26\uffff\1\6\102\uffff\1\6",
			"",
			"",
			"\1\4\1\uffff\1\7\34\uffff\1\3\7\uffff\1\3\26\uffff\1\7\102\uffff\1\7",
			"\1\4\1\uffff\1\6\34\uffff\1\3\7\uffff\1\3\26\uffff\1\6\102\uffff\1\6",
			"\1\4\1\uffff\1\7\34\uffff\1\3\7\uffff\1\3\26\uffff\1\7\102\uffff\1\7"
	};

	static final short[] DFA406_eot = DFA.unpackEncodedString(DFA406_eotS);
	static final short[] DFA406_eof = DFA.unpackEncodedString(DFA406_eofS);
	static final char[] DFA406_min = DFA.unpackEncodedStringToUnsignedChars(DFA406_minS);
	static final char[] DFA406_max = DFA.unpackEncodedStringToUnsignedChars(DFA406_maxS);
	static final short[] DFA406_accept = DFA.unpackEncodedString(DFA406_acceptS);
	static final short[] DFA406_special = DFA.unpackEncodedString(DFA406_specialS);
	static final short[][] DFA406_transition;

	static {
		int numStates = DFA406_transitionS.length;
		DFA406_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA406_transition[i] = DFA.unpackEncodedString(DFA406_transitionS[i]);
		}
	}

	protected class DFA406 extends DFA {

		public DFA406(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 406;
			this.eot = DFA406_eot;
			this.eof = DFA406_eof;
			this.min = DFA406_min;
			this.max = DFA406_max;
			this.accept = DFA406_accept;
			this.special = DFA406_special;
			this.transition = DFA406_transition;
		}
		@Override
		public String getDescription() {
			return "1278:64: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA414_eotS =
		"\5\uffff";
	static final String DFA414_eofS =
		"\5\uffff";
	static final String DFA414_minS =
		"\1\157\1\25\1\uffff\1\25\1\uffff";
	static final String DFA414_maxS =
		"\1\160\1\u0094\1\uffff\1\u0094\1\uffff";
	static final String DFA414_acceptS =
		"\2\uffff\1\2\1\uffff\1\1";
	static final String DFA414_specialS =
		"\5\uffff}>";
	static final String[] DFA414_transitionS = {
			"\1\1\1\2",
			"\1\3\34\uffff\1\2\7\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			"",
			"\1\3\34\uffff\1\2\7\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			""
	};

	static final short[] DFA414_eot = DFA.unpackEncodedString(DFA414_eotS);
	static final short[] DFA414_eof = DFA.unpackEncodedString(DFA414_eofS);
	static final char[] DFA414_min = DFA.unpackEncodedStringToUnsignedChars(DFA414_minS);
	static final char[] DFA414_max = DFA.unpackEncodedStringToUnsignedChars(DFA414_maxS);
	static final short[] DFA414_accept = DFA.unpackEncodedString(DFA414_acceptS);
	static final short[] DFA414_special = DFA.unpackEncodedString(DFA414_specialS);
	static final short[][] DFA414_transition;

	static {
		int numStates = DFA414_transitionS.length;
		DFA414_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA414_transition[i] = DFA.unpackEncodedString(DFA414_transitionS[i]);
		}
	}

	protected class DFA414 extends DFA {

		public DFA414(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 414;
			this.eot = DFA414_eot;
			this.eof = DFA414_eof;
			this.min = DFA414_min;
			this.max = DFA414_max;
			this.accept = DFA414_accept;
			this.special = DFA414_special;
			this.transition = DFA414_transition;
		}
		@Override
		public String getDescription() {
			return "1281:1: sass_else : ( SASS_ELSE ( ws )? sass_control_block | ( ( SASS_ELSE ( ws )? {...}? IDENT ) | SASS_ELSEIF ) ( ws )? sass_control_expression ( ws )? sass_control_block ( ( ws )? sass_else )? );";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA413_eotS =
		"\10\uffff";
	static final String DFA413_eofS =
		"\2\4\6\uffff";
	static final String DFA413_minS =
		"\2\6\1\23\2\uffff\3\23";
	static final String DFA413_maxS =
		"\3\u0094\2\uffff\3\u0094";
	static final String DFA413_acceptS =
		"\3\uffff\1\1\1\2\3\uffff";
	static final String DFA413_specialS =
		"\10\uffff}>";
	static final String[] DFA413_transitionS = {
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\2\1\3\1\uffff\4\4\1\uffff\3\4"+
			"\1\uffff\5\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff"+
			"\1\4\1\uffff\1\4\1\1",
			"\2\4\2\uffff\5\4\3\uffff\2\4\1\uffff\1\1\1\uffff\1\4\5\uffff\3\4\7\uffff"+
			"\1\4\2\uffff\2\4\2\uffff\2\4\2\uffff\1\4\1\uffff\1\4\6\uffff\4\4\2\uffff"+
			"\1\4\6\uffff\3\4\5\uffff\1\4\1\1\10\uffff\1\4\2\uffff\2\4\2\uffff\1\4"+
			"\3\uffff\4\4\1\uffff\3\4\1\uffff\1\4\1\5\1\3\5\4\1\uffff\3\4\1\uffff"+
			"\5\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\5\4\5\uffff\1\4\1\uffff"+
			"\1\4\1\1",
			"\1\4\1\uffff\1\6\34\uffff\1\3\7\uffff\1\3\26\uffff\1\6\102\uffff\1\6",
			"",
			"",
			"\1\4\1\uffff\1\7\34\uffff\1\3\7\uffff\1\3\26\uffff\1\7\102\uffff\1\7",
			"\1\4\1\uffff\1\6\34\uffff\1\3\7\uffff\1\3\26\uffff\1\6\102\uffff\1\6",
			"\1\4\1\uffff\1\7\34\uffff\1\3\7\uffff\1\3\26\uffff\1\7\102\uffff\1\7"
	};

	static final short[] DFA413_eot = DFA.unpackEncodedString(DFA413_eotS);
	static final short[] DFA413_eof = DFA.unpackEncodedString(DFA413_eofS);
	static final char[] DFA413_min = DFA.unpackEncodedStringToUnsignedChars(DFA413_minS);
	static final char[] DFA413_max = DFA.unpackEncodedStringToUnsignedChars(DFA413_maxS);
	static final short[] DFA413_accept = DFA.unpackEncodedString(DFA413_acceptS);
	static final short[] DFA413_special = DFA.unpackEncodedString(DFA413_specialS);
	static final short[][] DFA413_transition;

	static {
		int numStates = DFA413_transitionS.length;
		DFA413_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA413_transition[i] = DFA.unpackEncodedString(DFA413_transitionS[i]);
		}
	}

	protected class DFA413 extends DFA {

		public DFA413(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 413;
			this.eot = DFA413_eot;
			this.eof = DFA413_eof;
			this.min = DFA413_min;
			this.max = DFA413_max;
			this.accept = DFA413_accept;
			this.special = DFA413_special;
			this.transition = DFA413_transition;
		}
		@Override
		public String getDescription() {
			return "1285:128: ( ( ws )? sass_else )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA417_eotS =
		"\4\uffff";
	static final String DFA417_eofS =
		"\4\uffff";
	static final String DFA417_minS =
		"\2\5\2\uffff";
	static final String DFA417_maxS =
		"\2\u0094\2\uffff";
	static final String DFA417_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA417_specialS =
		"\4\uffff}>";
	static final String[] DFA417_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff"+
			"\3\3\5\uffff\1\3\1\uffff\4\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff"+
			"\1\3\1\1\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\3\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff"+
			"\3\3\5\uffff\1\3\1\uffff\4\3\1\uffff\2\3\3\uffff\1\3\1\uffff\3\3\5\uffff"+
			"\1\3\1\1\3\uffff\2\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3"+
			"\1\uffff\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\3\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"",
			""
	};

	static final short[] DFA417_eot = DFA.unpackEncodedString(DFA417_eotS);
	static final short[] DFA417_eof = DFA.unpackEncodedString(DFA417_eofS);
	static final char[] DFA417_min = DFA.unpackEncodedStringToUnsignedChars(DFA417_minS);
	static final char[] DFA417_max = DFA.unpackEncodedStringToUnsignedChars(DFA417_maxS);
	static final short[] DFA417_accept = DFA.unpackEncodedString(DFA417_acceptS);
	static final short[] DFA417_special = DFA.unpackEncodedString(DFA417_specialS);
	static final short[][] DFA417_transition;

	static {
		int numStates = DFA417_transitionS.length;
		DFA417_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA417_transition[i] = DFA.unpackEncodedString(DFA417_transitionS[i]);
		}
	}

	protected class DFA417 extends DFA {

		public DFA417(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 417;
			this.eot = DFA417_eot;
			this.eof = DFA417_eof;
			this.min = DFA417_min;
			this.max = DFA417_max;
			this.accept = DFA417_accept;
			this.special = DFA417_special;
			this.transition = DFA417_transition;
		}
		@Override
		public String getDescription() {
			return "1300:102: ( ( ws )? COMMA )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA422_eotS =
		"\4\uffff";
	static final String DFA422_eofS =
		"\4\uffff";
	static final String DFA422_minS =
		"\2\24\2\uffff";
	static final String DFA422_maxS =
		"\2\u0094\2\uffff";
	static final String DFA422_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA422_specialS =
		"\1\0\1\1\2\uffff}>";
	static final String[] DFA422_transitionS = {
			"\1\2\1\1\73\uffff\1\1\102\uffff\1\1",
			"\1\2\1\1\34\uffff\1\3\36\uffff\1\1\102\uffff\1\1",
			"",
			""
	};

	static final short[] DFA422_eot = DFA.unpackEncodedString(DFA422_eotS);
	static final short[] DFA422_eof = DFA.unpackEncodedString(DFA422_eofS);
	static final char[] DFA422_min = DFA.unpackEncodedStringToUnsignedChars(DFA422_minS);
	static final char[] DFA422_max = DFA.unpackEncodedStringToUnsignedChars(DFA422_maxS);
	static final short[] DFA422_accept = DFA.unpackEncodedString(DFA422_acceptS);
	static final short[] DFA422_special = DFA.unpackEncodedString(DFA422_specialS);
	static final short[][] DFA422_transition;

	static {
		int numStates = DFA422_transitionS.length;
		DFA422_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA422_transition[i] = DFA.unpackEncodedString(DFA422_transitionS[i]);
		}
	}

	protected class DFA422 extends DFA {

		public DFA422(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 422;
			this.eot = DFA422_eot;
			this.eof = DFA422_eof;
			this.min = DFA422_min;
			this.max = DFA422_max;
			this.accept = DFA422_accept;
			this.special = DFA422_special;
			this.transition = DFA422_transition;
		}
		@Override
		public String getDescription() {
			return "()* loopback of 1305:17: ( ( ( ws )? COMMA )=> ( ws )? COMMA ( ws )? cp_variable )*";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
		@Override
		public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
			TokenStream input = (TokenStream)_input;
			int _s = s;
			switch ( s ) {
					case 0 : 
						int LA422_0 = input.LA(1);
						 
						int index422_0 = input.index();
						input.rewind();
						s = -1;
						if ( (LA422_0==COMMENT||LA422_0==NL||LA422_0==WS) ) {s = 1;}
						else if ( (LA422_0==COMMA) && (synpred52_Css3())) {s = 2;}
						 
						input.seek(index422_0);
						if ( s>=0 ) return s;
						break;

					case 1 : 
						int LA422_1 = input.LA(1);
						 
						int index422_1 = input.index();
						input.rewind();
						s = -1;
						if ( (LA422_1==IDENT) ) {s = 3;}
						else if ( (LA422_1==COMMENT||LA422_1==NL||LA422_1==WS) ) {s = 1;}
						else if ( (LA422_1==COMMA) && (synpred52_Css3())) {s = 2;}
						 
						input.seek(index422_1);
						if ( s>=0 ) return s;
						break;
			}
			if (state.backtracking>0) {state.failed=true; return -1;}
			NoViableAltException nvae =
				new NoViableAltException(getDescription(), 422, _s, input);
			error(nvae);
			throw nvae;
		}
	}

	static final String DFA442_eotS =
		"\4\uffff";
	static final String DFA442_eofS =
		"\4\uffff";
	static final String DFA442_minS =
		"\2\25\2\uffff";
	static final String DFA442_maxS =
		"\2\u0094\2\uffff";
	static final String DFA442_acceptS =
		"\2\uffff\1\1\1\2";
	static final String DFA442_specialS =
		"\4\uffff}>";
	static final String[] DFA442_transitionS = {
			"\1\1\35\uffff\1\2\35\uffff\1\1\55\uffff\1\3\24\uffff\1\1",
			"\1\1\35\uffff\1\2\35\uffff\1\1\55\uffff\1\3\24\uffff\1\1",
			"",
			""
	};

	static final short[] DFA442_eot = DFA.unpackEncodedString(DFA442_eotS);
	static final short[] DFA442_eof = DFA.unpackEncodedString(DFA442_eofS);
	static final char[] DFA442_min = DFA.unpackEncodedStringToUnsignedChars(DFA442_minS);
	static final char[] DFA442_max = DFA.unpackEncodedStringToUnsignedChars(DFA442_maxS);
	static final short[] DFA442_accept = DFA.unpackEncodedString(DFA442_acceptS);
	static final short[] DFA442_special = DFA.unpackEncodedString(DFA442_specialS);
	static final short[][] DFA442_transition;

	static {
		int numStates = DFA442_transitionS.length;
		DFA442_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA442_transition[i] = DFA.unpackEncodedString(DFA442_transitionS[i]);
		}
	}

	protected class DFA442 extends DFA {

		public DFA442(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 442;
			this.eot = DFA442_eot;
			this.eof = DFA442_eof;
			this.min = DFA442_min;
			this.max = DFA442_max;
			this.accept = DFA442_accept;
			this.special = DFA442_special;
			this.transition = DFA442_transition;
		}
		@Override
		public String getDescription() {
			return "350:22: ( ( ws )? IMPORTANT_SYM )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA449_eotS =
		"\6\uffff";
	static final String DFA449_eofS =
		"\6\uffff";
	static final String DFA449_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA449_maxS =
		"\1\u0085\1\u0094\1\uffff\1\u0094\2\uffff";
	static final String DFA449_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA449_specialS =
		"\6\uffff}>";
	static final String[] DFA449_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\2\uffff\1\2\10"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\15\uffff\1\2\3\uffff\1\2",
			"\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\2"+
			"\uffff\1\4\7\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\15\uffff\1\4\3\uffff\1\4\16\uffff\1\3",
			"",
			""
	};

	static final short[] DFA449_eot = DFA.unpackEncodedString(DFA449_eotS);
	static final short[] DFA449_eof = DFA.unpackEncodedString(DFA449_eofS);
	static final char[] DFA449_min = DFA.unpackEncodedStringToUnsignedChars(DFA449_minS);
	static final char[] DFA449_max = DFA.unpackEncodedStringToUnsignedChars(DFA449_maxS);
	static final short[] DFA449_accept = DFA.unpackEncodedString(DFA449_acceptS);
	static final short[] DFA449_special = DFA.unpackEncodedString(DFA449_specialS);
	static final short[][] DFA449_transition;

	static {
		int numStates = DFA449_transitionS.length;
		DFA449_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA449_transition[i] = DFA.unpackEncodedString(DFA449_transitionS[i]);
		}
	}

	protected class DFA449 extends DFA {

		public DFA449(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 449;
			this.eot = DFA449_eot;
			this.eof = DFA449_eof;
			this.min = DFA449_min;
			this.max = DFA449_max;
			this.accept = DFA449_accept;
			this.special = DFA449_special;
			this.transition = DFA449_transition;
		}
		@Override
		public String getDescription() {
			return "352:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA444_eotS =
		"\4\uffff";
	static final String DFA444_eofS =
		"\4\uffff";
	static final String DFA444_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA444_maxS =
		"\2\u0094\2\uffff";
	static final String DFA444_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA444_specialS =
		"\4\uffff}>";
	static final String[] DFA444_transitionS = {
			"\1\1\44\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\2"+
			"\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\15\uffff\1\3\3\uffff\1\3\16\uffff\1\1",
			"",
			""
	};

	static final short[] DFA444_eot = DFA.unpackEncodedString(DFA444_eotS);
	static final short[] DFA444_eof = DFA.unpackEncodedString(DFA444_eofS);
	static final char[] DFA444_min = DFA.unpackEncodedStringToUnsignedChars(DFA444_minS);
	static final char[] DFA444_max = DFA.unpackEncodedStringToUnsignedChars(DFA444_maxS);
	static final short[] DFA444_accept = DFA.unpackEncodedString(DFA444_acceptS);
	static final short[] DFA444_special = DFA.unpackEncodedString(DFA444_specialS);
	static final short[][] DFA444_transition;

	static {
		int numStates = DFA444_transitionS.length;
		DFA444_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA444_transition[i] = DFA.unpackEncodedString(DFA444_transitionS[i]);
		}
	}

	protected class DFA444 extends DFA {

		public DFA444(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 444;
			this.eot = DFA444_eot;
			this.eof = DFA444_eof;
			this.min = DFA444_min;
			this.max = DFA444_max;
			this.accept = DFA444_accept;
			this.special = DFA444_special;
			this.transition = DFA444_transition;
		}
		@Override
		public String getDescription() {
			return "352:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA468_eotS =
		"\6\uffff";
	static final String DFA468_eofS =
		"\6\uffff";
	static final String DFA468_minS =
		"\1\7\1\25\1\uffff\1\7\2\uffff";
	static final String DFA468_maxS =
		"\1\u0085\1\u0094\1\uffff\1\u0094\2\uffff";
	static final String DFA468_acceptS =
		"\2\uffff\1\3\1\uffff\1\1\1\2";
	static final String DFA468_specialS =
		"\6\uffff}>";
	static final String[] DFA468_transitionS = {
			"\1\2\13\uffff\1\2\11\uffff\3\2\12\uffff\2\2\2\uffff\2\2\2\uffff\1\2\10"+
			"\uffff\1\2\5\uffff\1\2\7\uffff\1\2\23\uffff\2\2\13\uffff\1\1\10\uffff"+
			"\1\2\15\uffff\1\2\3\uffff\1\2",
			"\1\3\44\uffff\1\4\26\uffff\1\3\102\uffff\1\3",
			"",
			"\1\4\13\uffff\1\4\1\uffff\1\3\7\uffff\3\4\12\uffff\2\4\2\uffff\2\4\2"+
			"\uffff\1\4\7\uffff\2\4\5\uffff\1\4\4\uffff\1\5\2\uffff\1\4\7\uffff\1"+
			"\3\13\uffff\2\4\24\uffff\1\4\15\uffff\1\4\3\uffff\1\4\16\uffff\1\3",
			"",
			""
	};

	static final short[] DFA468_eot = DFA.unpackEncodedString(DFA468_eotS);
	static final short[] DFA468_eof = DFA.unpackEncodedString(DFA468_eofS);
	static final char[] DFA468_min = DFA.unpackEncodedStringToUnsignedChars(DFA468_minS);
	static final char[] DFA468_max = DFA.unpackEncodedStringToUnsignedChars(DFA468_maxS);
	static final short[] DFA468_accept = DFA.unpackEncodedString(DFA468_acceptS);
	static final short[] DFA468_special = DFA.unpackEncodedString(DFA468_specialS);
	static final short[][] DFA468_transition;

	static {
		int numStates = DFA468_transitionS.length;
		DFA468_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA468_transition[i] = DFA.unpackEncodedString(DFA468_transitionS[i]);
		}
	}

	protected class DFA468 extends DFA {

		public DFA468(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 468;
			this.eot = DFA468_eot;
			this.eof = DFA468_eof;
			this.min = DFA468_min;
			this.max = DFA468_max;
			this.accept = DFA468_accept;
			this.special = DFA468_special;
			this.transition = DFA468_transition;
		}
		@Override
		public String getDescription() {
			return "669:8: ( ( SASS_AT_ROOT ( ws selectorsGroup )? ) | ( SASS_AT_ROOT ws LPAREN ( ws )? IDENT ( ws )? COLON ( ws )? IDENT ( ws )? RPAREN ) | selectorsGroup )";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA463_eotS =
		"\4\uffff";
	static final String DFA463_eofS =
		"\4\uffff";
	static final String DFA463_minS =
		"\1\25\1\7\2\uffff";
	static final String DFA463_maxS =
		"\2\u0094\2\uffff";
	static final String DFA463_acceptS =
		"\2\uffff\1\2\1\1";
	static final String DFA463_specialS =
		"\4\uffff}>";
	static final String[] DFA463_transitionS = {
			"\1\1\44\uffff\1\2\26\uffff\1\1\102\uffff\1\1",
			"\1\3\13\uffff\1\3\1\uffff\1\1\7\uffff\3\3\12\uffff\2\3\2\uffff\2\3\2"+
			"\uffff\1\3\7\uffff\1\2\1\3\5\uffff\1\3\7\uffff\1\3\7\uffff\1\1\13\uffff"+
			"\2\3\24\uffff\1\3\15\uffff\1\3\3\uffff\1\3\16\uffff\1\1",
			"",
			""
	};

	static final short[] DFA463_eot = DFA.unpackEncodedString(DFA463_eotS);
	static final short[] DFA463_eof = DFA.unpackEncodedString(DFA463_eofS);
	static final char[] DFA463_min = DFA.unpackEncodedStringToUnsignedChars(DFA463_minS);
	static final char[] DFA463_max = DFA.unpackEncodedStringToUnsignedChars(DFA463_maxS);
	static final short[] DFA463_accept = DFA.unpackEncodedString(DFA463_acceptS);
	static final short[] DFA463_special = DFA.unpackEncodedString(DFA463_specialS);
	static final short[][] DFA463_transition;

	static {
		int numStates = DFA463_transitionS.length;
		DFA463_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA463_transition[i] = DFA.unpackEncodedString(DFA463_transitionS[i]);
		}
	}

	protected class DFA463 extends DFA {

		public DFA463(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 463;
			this.eot = DFA463_eot;
			this.eof = DFA463_eof;
			this.min = DFA463_min;
			this.max = DFA463_max;
			this.accept = DFA463_accept;
			this.special = DFA463_special;
			this.transition = DFA463_transition;
		}
		@Override
		public String getDescription() {
			return "669:23: ( ws selectorsGroup )?";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA477_eotS =
		"\5\uffff";
	static final String DFA477_eofS =
		"\5\uffff";
	static final String DFA477_minS =
		"\2\5\3\uffff";
	static final String DFA477_maxS =
		"\2\u0094\3\uffff";
	static final String DFA477_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA477_specialS =
		"\5\uffff}>";
	static final String[] DFA477_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\1\uffff\1\2\1\1\1\uffff\1\3\6\uffff\1\3"+
			"\2\uffff\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\1\3\7\uffff\4\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1"+
			"\4\uffff\1\3\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff"+
			"\2\3\2\uffff\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\1\uffff\1\2\1\uffff"+
			"\1\3\2\uffff\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\1\uffff\1\2\1\1\1\uffff\1\4\6\uffff\1\4"+
			"\2\uffff\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\1\4\7\uffff\4\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1"+
			"\4\uffff\1\4\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff"+
			"\2\4\2\uffff\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\4\4\1\uffff\1\2\1\uffff"+
			"\1\4\2\uffff\7\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA477_eot = DFA.unpackEncodedString(DFA477_eotS);
	static final short[] DFA477_eof = DFA.unpackEncodedString(DFA477_eofS);
	static final char[] DFA477_min = DFA.unpackEncodedStringToUnsignedChars(DFA477_minS);
	static final char[] DFA477_max = DFA.unpackEncodedStringToUnsignedChars(DFA477_maxS);
	static final short[] DFA477_accept = DFA.unpackEncodedString(DFA477_acceptS);
	static final short[] DFA477_special = DFA.unpackEncodedString(DFA477_specialS);
	static final short[][] DFA477_transition;

	static {
		int numStates = DFA477_transitionS.length;
		DFA477_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA477_transition[i] = DFA.unpackEncodedString(DFA477_transitionS[i]);
		}
	}

	protected class DFA477 extends DFA {

		public DFA477(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 477;
			this.eot = DFA477_eot;
			this.eof = DFA477_eof;
			this.min = DFA477_min;
			this.max = DFA477_max;
			this.accept = DFA477_accept;
			this.special = DFA477_special;
			this.transition = DFA477_transition;
		}
		@Override
		public String getDescription() {
			return "907:15: ( ws | ( ( ws )? operator ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	static final String DFA482_eotS =
		"\5\uffff";
	static final String DFA482_eofS =
		"\5\uffff";
	static final String DFA482_minS =
		"\2\5\3\uffff";
	static final String DFA482_maxS =
		"\2\u0094\3\uffff";
	static final String DFA482_acceptS =
		"\2\uffff\1\2\1\3\1\1";
	static final String DFA482_specialS =
		"\5\uffff}>";
	static final String[] DFA482_transitionS = {
			"\3\3\2\uffff\5\3\3\uffff\1\3\2\uffff\1\1\1\uffff\1\3\6\uffff\1\3\2\uffff"+
			"\1\3\3\uffff\1\3\1\uffff\2\3\1\uffff\1\3\3\uffff\2\3\2\uffff\1\3\1\uffff"+
			"\1\3\7\uffff\4\3\1\uffff\2\3\5\uffff\3\3\5\uffff\1\3\1\1\4\uffff\1\3"+
			"\3\uffff\3\3\1\uffff\1\3\4\uffff\5\3\2\uffff\3\3\1\uffff\2\3\2\uffff"+
			"\1\3\1\uffff\2\3\1\uffff\3\3\1\uffff\4\3\1\uffff\1\2\1\uffff\1\3\2\uffff"+
			"\7\3\2\uffff\1\3\2\uffff\1\3\1\uffff\1\3\1\1",
			"\3\4\2\uffff\5\4\3\uffff\1\4\2\uffff\1\1\1\uffff\1\4\6\uffff\1\4\2\uffff"+
			"\1\4\3\uffff\1\4\1\uffff\2\4\1\uffff\1\4\3\uffff\2\4\2\uffff\1\4\1\uffff"+
			"\1\4\7\uffff\4\4\1\uffff\2\4\5\uffff\3\4\5\uffff\1\4\1\1\4\uffff\1\4"+
			"\3\uffff\3\4\1\uffff\1\4\4\uffff\5\4\2\uffff\3\4\1\uffff\2\4\2\uffff"+
			"\1\4\1\uffff\2\4\1\uffff\3\4\1\uffff\4\4\1\uffff\1\2\1\uffff\1\4\2\uffff"+
			"\7\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\1",
			"",
			"",
			""
	};

	static final short[] DFA482_eot = DFA.unpackEncodedString(DFA482_eotS);
	static final short[] DFA482_eof = DFA.unpackEncodedString(DFA482_eofS);
	static final char[] DFA482_min = DFA.unpackEncodedStringToUnsignedChars(DFA482_minS);
	static final char[] DFA482_max = DFA.unpackEncodedStringToUnsignedChars(DFA482_maxS);
	static final short[] DFA482_accept = DFA.unpackEncodedString(DFA482_acceptS);
	static final short[] DFA482_special = DFA.unpackEncodedString(DFA482_specialS);
	static final short[][] DFA482_transition;

	static {
		int numStates = DFA482_transitionS.length;
		DFA482_transition = new short[numStates][];
		for (int i=0; i<numStates; i++) {
			DFA482_transition[i] = DFA.unpackEncodedString(DFA482_transitionS[i]);
		}
	}

	protected class DFA482 extends DFA {

		public DFA482(BaseRecognizer recognizer) {
			this.recognizer = recognizer;
			this.decisionNumber = 482;
			this.eot = DFA482_eot;
			this.eof = DFA482_eof;
			this.min = DFA482_min;
			this.max = DFA482_max;
			this.accept = DFA482_accept;
			this.special = DFA482_special;
			this.transition = DFA482_transition;
		}
		@Override
		public String getDescription() {
			return "991:21: ( ws | ( ( ws )? SOLIDUS ( ws )? ) |)";
		}
		public void error(NoViableAltException nvae) {
			dbg.recognitionException(nvae);
		}
	}

	public static final BitSet FOLLOW_ws_in_styleSheet99 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE064010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_charSet_in_styleSheet109 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBCDCE064030702L,0x0000000000180FAAL});
	public static final BitSet FOLLOW_ws_in_styleSheet111 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE064010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_imports_in_styleSheet125 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE064010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_namespaces_in_styleSheet136 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE064010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_body_in_styleSheet147 = new BitSet(new long[]{0x0000000000000000L});
	public static final BitSet FOLLOW_EOF_in_styleSheet155 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespace_in_namespaces172 = new BitSet(new long[]{0x0000000000200002L,0x0000000000030000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_namespaces174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
	public static final BitSet FOLLOW_NAMESPACE_SYM_in_namespace190 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_namespace192 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespace196 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_namespace198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_resourceIdentifier_in_namespace203 = new BitSet(new long[]{0x0000000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_namespace205 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_namespace208 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_namespacePrefixName221 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CHARSET_SYM_in_charSet255 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100004L});
	public static final BitSet FOLLOW_ws_in_charSet257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_charSetValue_in_charSet260 = new BitSet(new long[]{0x0000000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_charSet262 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_charSet265 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_charSetValue279 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_imports293 = new BitSet(new long[]{0x0000000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_imports295 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_imports298 = new BitSet(new long[]{0x0010000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_imports300 = new BitSet(new long[]{0x0010000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem326 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_importItem328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem331 = new BitSet(new long[]{0x7014848000A47C42L,0x7BB4DCE004230540L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_importItem341 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem344 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem377 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_importItem379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem382 = new BitSet(new long[]{0x7014848000B47C42L,0x7BB4DCE004230540L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_importItem385 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_importItem388 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_importItem390 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem393 = new BitSet(new long[]{0x7014848000B47C42L,0x7BB4DCE004230540L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_importItem405 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem408 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORT_SYM_in_importItem432 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_importItem434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L,0x0000000000004004L});
	public static final BitSet FOLLOW_LPAREN_in_importItem438 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_less_import_types_in_importItem440 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_importItem442 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000104004L});
	public static final BitSet FOLLOW_ws_in_importItem444 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000004004L});
	public static final BitSet FOLLOW_resourceIdentifier_in_importItem449 = new BitSet(new long[]{0x7014848000A47C42L,0x7BB4DCE004230540L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_importItem459 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_importItem462 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MEDIA_SYM_in_media480 = new BitSet(new long[]{0x7014848000A47C40L,0x7BB4DCE004230540L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_media482 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_media500 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_media508 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_media515 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBCDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_media517 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_media520 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_mediaBody_in_media530 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_media537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaBodyItem_in_mediaBody571 = new BitSet(new long[]{0x7814CC80E0AC7CC2L,0xFBBCDCE064030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_mediaBody581 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_mediaBody584 = new BitSet(new long[]{0x7814CC80E0AC7CC2L,0xFBBCDCE064030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_mediaBody588 = new BitSet(new long[]{0x7814CC80E08C7CC2L,0xFBBCDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_SEMI_in_mediaBody615 = new BitSet(new long[]{0x7814CC80E0AC7CC2L,0xFBBCDCE064030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_mediaBody617 = new BitSet(new long[]{0x7814CC80E08C7CC2L,0xFBBCDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_sass_extend_in_mediaBody636 = new BitSet(new long[]{0x0000000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaBody639 = new BitSet(new long[]{0x7814CC80E08C7CC2L,0xFBBCDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_SEMI_in_mediaBody644 = new BitSet(new long[]{0x7814CC80E08C7CC2L,0xFBBCDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_mediaBodyItem718 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem751 = new BitSet(new long[]{0x0008000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem754 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem757 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_mediaBodyItem774 = new BitSet(new long[]{0x0008000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaBodyItem777 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_mediaBodyItem780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_mediaBodyItem857 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_mediaBodyItem867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_mediaBodyItem877 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_mediaBodyItem887 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_mediaBodyItem897 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_mediaBodyItem905 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_mediaBodyItem913 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_mediaBodyItem921 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_mediaBodyItem929 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_mediaBodyItem942 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_mediaBodyItem950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList964 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList976 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_mediaQueryList979 = new BitSet(new long[]{0x7014848000A47C40L,0x7BB4DCE004230540L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_mediaQueryList981 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQuery_in_mediaQueryList984 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_mediaQueryOperator_in_mediaQuery1003 = new BitSet(new long[]{0x0004840000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1005 = new BitSet(new long[]{0x0004840000000000L});
	public static final BitSet FOLLOW_mediaType_in_mediaQuery1012 = new BitSet(new long[]{0x0004000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1023 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1026 = new BitSet(new long[]{0x0000800000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1028 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1031 = new BitSet(new long[]{0x0004000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1042 = new BitSet(new long[]{0x0004000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1053 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_key_and_in_mediaQuery1056 = new BitSet(new long[]{0x0000800000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaQuery1058 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_mediaExpression_in_mediaQuery1061 = new BitSet(new long[]{0x0004000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_cp_variable_in_mediaQuery1074 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_only_in_mediaQueryOperator1086 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_mediaQueryOperator1090 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaType1102 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaType1106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaType1112 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_mediaExpression1137 = new BitSet(new long[]{0x7014848000A47C40L,0x7BB4DCE004030500L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1139 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaFeature_in_mediaExpression1142 = new BitSet(new long[]{0x0000000000280000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_mediaFeatureValue_in_mediaExpression1144 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_mediaExpression1147 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_mediaExpression1150 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaExpression1167 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1188 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_mediaFeatureValue1191 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_mediaFeatureValue1193 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_mediaFeatureValue1212 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_mediaFeatureValue1232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_mediaFeature1252 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_mediaFeature1256 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_mediaFeature1264 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_mediaFeature1268 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_bodyItem_in_body1302 = new BitSet(new long[]{0x7814CC80E0AC7CC2L,0xFBBCDCE064030702L,0x0000000000180FAAL});
	public static final BitSet FOLLOW_ws_in_body1312 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_body1315 = new BitSet(new long[]{0x7814CC80E0AC7CC2L,0xFBBCDCE064030702L,0x0000000000180FAAL});
	public static final BitSet FOLLOW_ws_in_body1319 = new BitSet(new long[]{0x7814CC80E08C7CC2L,0xFBBCDCE064010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_SEMI_in_body1346 = new BitSet(new long[]{0x7814CC80E0AC7CC2L,0xFBBCDCE064030702L,0x0000000000180FAAL});
	public static final BitSet FOLLOW_ws_in_body1348 = new BitSet(new long[]{0x7814CC80E08C7CC2L,0xFBBCDCE064010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_bodyItem1428 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1461 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_bodyItem1480 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_bodyItem1489 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_bodyItem1511 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_bodyItem1528 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_bodyItem1540 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_bodyItem1563 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_bodyItem1577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_bodyItem1591 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_declaration_in_bodyItem1605 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SUPPORTS_SYM_in_supportsAtRule1625 = new BitSet(new long[]{0x0000000000200000L,0x0000000000220040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule1627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200040L});
	public static final BitSet FOLLOW_supportsCondition_in_supportsAtRule1630 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsAtRule1632 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_supportsAtRule1635 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBCDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_supportsAtRule1637 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_supportsAtRule1640 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_mediaBody_in_supportsAtRule1642 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_supportsAtRule1645 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_supportsCondition1658 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition1660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition1662 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsCondition1667 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsCondition1670 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_supportsWithOperator_in_supportsCondition1672 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator1700 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator1703 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_supportsConjunction_in_supportsWithOperator1705 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator1719 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsWithOperator1722 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_supportsDisjunction_in_supportsWithOperator1724 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_key_and_in_supportsConjunction1752 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsConjunction1754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsConjunction1756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_supportsDisjunction1783 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsDisjunction1785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_supportsInParens_in_supportsDisjunction1787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_supportsInParens1807 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0x7BBEDCE064230742L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_supportsInParens1809 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0x7BBEDCE064210742L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_supportsCondition_in_supportsInParens1813 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_supportsFeature_in_supportsInParens1817 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_supportsInParens1820 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_supportsInParens1823 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsDecl_in_supportsFeature1836 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_declaration_in_supportsDecl1849 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_media_in_at_rule1867 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_page_in_at_rule1875 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_counterStyle_in_at_rule1883 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fontFace_in_at_rule1891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_supportsAtRule_in_at_rule1899 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_vendorAtRule_in_at_rule1907 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_moz_document_in_vendorAtRule1920 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframes_in_vendorAtRule1924 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_generic_at_rule_in_vendorAtRule1928 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_atRuleId1938 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_atRuleId1942 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_atRuleId1950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_atRuleId1954 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_IDENT_in_generic_at_rule1970 = new BitSet(new long[]{0x7414808000A47C40L,0x7BB4DCE004030500L,0x0000000000180F84L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule1972 = new BitSet(new long[]{0x7414808000847C40L,0x7BB4DCE004010500L,0x0000000000080F84L});
	public static final BitSet FOLLOW_atRuleId_in_generic_at_rule1977 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_generic_at_rule1979 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_generic_at_rule1993 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_syncTo_RBRACE_in_generic_at_rule2004 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_generic_at_rule2014 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_MOZ_DOCUMENT_SYM_in_moz_document2025 = new BitSet(new long[]{0x0000000000200000L,0x0000000000023800L,0x0000000000104000L});
	public static final BitSet FOLLOW_ws_in_moz_document2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000003800L,0x0000000000004000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2032 = new BitSet(new long[]{0x0400000000300000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_moz_document2034 = new BitSet(new long[]{0x0400000000100000L});
	public static final BitSet FOLLOW_COMMA_in_moz_document2040 = new BitSet(new long[]{0x0000000000200000L,0x0000000000023800L,0x0000000000104000L});
	public static final BitSet FOLLOW_ws_in_moz_document2042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000003800L,0x0000000000004000L});
	public static final BitSet FOLLOW_moz_document_function_in_moz_document2045 = new BitSet(new long[]{0x0400000000300000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_moz_document2047 = new BitSet(new long[]{0x0400000000100000L});
	public static final BitSet FOLLOW_LBRACE_in_moz_document2054 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBCDCE264030702L,0x0000000000180FAAL});
	public static final BitSet FOLLOW_ws_in_moz_document2056 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBCDCE264010702L,0x0000000000080FAAL});
	public static final BitSet FOLLOW_body_in_moz_document2061 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_moz_document2066 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_WEBKIT_KEYFRAMES_SYM_in_webkitKeyframes2103 = new BitSet(new long[]{0x7014808000A47C40L,0x7BB4DCE004030500L,0x0000000000180F84L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2105 = new BitSet(new long[]{0x7014808000847C40L,0x7BB4DCE004010500L,0x0000000000080F84L});
	public static final BitSet FOLLOW_atRuleId_in_webkitKeyframes2108 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2110 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframes2114 = new BitSet(new long[]{0x0004000000200000L,0x0000080208020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2116 = new BitSet(new long[]{0x0004000000000000L,0x0000080208000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_webkitKeyframes2123 = new BitSet(new long[]{0x0004000000200000L,0x0000080208020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframes2125 = new BitSet(new long[]{0x0004000000000000L,0x0000080208000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframes2132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_webkitKeyframesBlock2144 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock2146 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_webkitKeyframesBlock2150 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_webkitKeyframesBlock2153 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_webkitKeyframesBlock2156 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_webkitKeyframesBlock2160 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_webkitKeyframesBlock2164 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_webkitKeyframesBlock2181 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_webkitKeyframesBlock2183 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2200 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2206 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2210 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors2216 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_webkitKeyframeSelectors2219 = new BitSet(new long[]{0x0004000000200000L,0x0000000008020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_webkitKeyframeSelectors2221 = new BitSet(new long[]{0x0004000000000000L,0x0000000008000000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2228 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_IDENT_in_webkitKeyframeSelectors2234 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_PERCENTAGE_in_webkitKeyframeSelectors2238 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_PAGE_SYM_in_page2257 = new BitSet(new long[]{0x0404000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_page2259 = new BitSet(new long[]{0x0404000000080000L});
	public static final BitSet FOLLOW_IDENT_in_page2264 = new BitSet(new long[]{0x0400000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_page2266 = new BitSet(new long[]{0x0400000000080000L});
	public static final BitSet FOLLOW_pseudoPage_in_page2273 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_page2275 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_page2288 = new BitSet(new long[]{0x7014848000A47CC0L,0xFBB4DCE204030700L,0x00000000001A0F82L});
	public static final BitSet FOLLOW_ws_in_page2290 = new BitSet(new long[]{0x7014848000847CC0L,0xFBB4DCE204010700L,0x00000000000A0F82L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page2333 = new BitSet(new long[]{0x0000000000200000L,0x8000000200020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_margin_in_page2335 = new BitSet(new long[]{0x0000000000200000L,0x8000000200020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_page2338 = new BitSet(new long[]{0x0000000000000000L,0x8000000200000000L});
	public static final BitSet FOLLOW_SEMI_in_page2344 = new BitSet(new long[]{0x7014848000A47CC0L,0xFBB4DCE204030700L,0x00000000001A0F82L});
	public static final BitSet FOLLOW_ws_in_page2346 = new BitSet(new long[]{0x7014848000847CC0L,0xFBB4DCE204010700L,0x00000000000A0F82L});
	public static final BitSet FOLLOW_propertyDeclaration_in_page2351 = new BitSet(new long[]{0x0000000000200000L,0x8000000200020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_margin_in_page2353 = new BitSet(new long[]{0x0000000000200000L,0x8000000200020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_page2356 = new BitSet(new long[]{0x0000000000000000L,0x8000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_page2371 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COUNTER_STYLE_SYM_in_counterStyle2388 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_counterStyle2390 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_counterStyle2393 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_counterStyle2395 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_counterStyle2406 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_counterStyle2408 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_counterStyle2411 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_counterStyle2415 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_counterStyle2426 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FONT_FACE_SYM_in_fontFace2443 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_fontFace2445 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_fontFace2456 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_fontFace2458 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_fontFace2461 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_fontFace2465 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_fontFace2476 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_margin_sym_in_margin2490 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_margin2492 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_margin2495 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_margin2497 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToDeclarationsRule_in_margin2500 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_margin2502 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_margin2505 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_pseudoPage2714 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_pseudoPage2716 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_property2800 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_property2810 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_property2818 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_property2826 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_property2834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_property2844 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_name_in_sass_map2871 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map2873 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_map2875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_sass_map2878 = new BitSet(new long[]{0x7014848000B47CC0L,0x7BB4DDE004430700L,0x00000000001A0F84L});
	public static final BitSet FOLLOW_ws_in_sass_map2880 = new BitSet(new long[]{0x7014848000947CC0L,0x7BB4DDE004410700L,0x00000000000A0F84L});
	public static final BitSet FOLLOW_syncToFollow_in_sass_map2883 = new BitSet(new long[]{0x7014848000947CC0L,0x7BB4DDE004410700L,0x00000000000A0F84L});
	public static final BitSet FOLLOW_sass_map_pairs_in_sass_map2902 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_map2909 = new BitSet(new long[]{0x0000000000200002L,0x0040200000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_map2913 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_sass_map2916 = new BitSet(new long[]{0x0000000000200002L,0x0040200000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_map2922 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_sass_map2925 = new BitSet(new long[]{0x0000000000200002L,0x0040200000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_cp_variable_in_sass_map_name2949 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_pair_in_sass_map_pairs2983 = new BitSet(new long[]{0x7014848000B47CC2L,0x7BB4DCE004430700L,0x00000000001A0F84L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs2993 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs2996 = new BitSet(new long[]{0x7014848000B47CC2L,0x7BB4DCE004430700L,0x00000000001A0F84L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3000 = new BitSet(new long[]{0x7014848000947CC2L,0x7BB4DCE004410700L,0x00000000000A0F84L});
	public static final BitSet FOLLOW_COMMA_in_sass_map_pairs3027 = new BitSet(new long[]{0x7014848000B47CC2L,0x7BB4DCE004430700L,0x00000000001A0F84L});
	public static final BitSet FOLLOW_ws_in_sass_map_pairs3029 = new BitSet(new long[]{0x7014848000947CC2L,0x7BB4DCE004410700L,0x00000000000A0F84L});
	public static final BitSet FOLLOW_NUMBER_in_sass_map_pair3065 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3068 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100004L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_STRING_in_sass_map_pair3074 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100004L});
	public static final BitSet FOLLOW_function_in_sass_map_pair3084 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_property_in_sass_map_pair3087 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_sass_map_in_sass_map_pair3089 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3092 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_map_pair3095 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3097 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_sass_map_pair3100 = new BitSet(new long[]{0x0008000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_map_pair3103 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_prio_in_sass_map_pair3106 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule3148 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3151 = new BitSet(new long[]{0x0804CC00E0080080L,0x0008000060000202L,0x0000000000000022L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule3153 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_rule3174 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_rule3178 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3180 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule3185 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3189 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_rule3192 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3194 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_rule3197 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3199 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_rule3202 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_selectorsGroup_in_rule3220 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_rule3232 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_rule3239 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_rule3241 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_rule3244 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_rule3254 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_rule3261 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations3295 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE064030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_declarations3297 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declaration_in_declarations3303 = new BitSet(new long[]{0x0000000000200002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_declarations3308 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_declarations3312 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE064030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_declarations3314 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_ws_in_declarations3320 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0x7BBEDCE064010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declaration_in_declarations3323 = new BitSet(new long[]{0x0000000000200002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_declarations3329 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_declarations3333 = new BitSet(new long[]{0x0000000000200002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_declarations3335 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
	public static final BitSet FOLLOW_ws_in_declarations3341 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_declarations3353 = new BitSet(new long[]{0x0000000000200002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_declarations3355 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_declaration3384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_declaration3397 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_declaration3409 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_rule_in_declaration3472 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration3484 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_declaration3523 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_declaration3535 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration3548 = new BitSet(new long[]{0x0008000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_declaration3551 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration3554 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_declaration3571 = new BitSet(new long[]{0x0008000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_declaration3574 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_declaration3577 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_at_rule_in_declaration3593 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_control_in_declaration3603 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_in_declaration3613 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_debug_in_declaration3623 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_content_in_declaration3633 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_function_return_in_declaration3643 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_error_in_declaration3653 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_importItem_in_declaration3663 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_declaration3671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup3705 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup3708 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup3711 = new BitSet(new long[]{0x0804CC00E0280080L,0x0008000060020202L,0x0000000000100022L});
	public static final BitSet FOLLOW_ws_in_selectorsGroup3713 = new BitSet(new long[]{0x0804CC00E0080080L,0x0008000060000202L,0x0000000000000022L});
	public static final BitSet FOLLOW_selector_in_selectorsGroup3716 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_selectorsGroup3723 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_combinator_in_selector3744 = new BitSet(new long[]{0x0804C400E0280080L,0x0008000020020202L,0x0000000000100002L});
	public static final BitSet FOLLOW_ws_in_selector3746 = new BitSet(new long[]{0x0804C400E0080080L,0x0008000020000202L,0x0000000000000002L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3751 = new BitSet(new long[]{0x0000080000200002L,0x0000000040020000L,0x0000000000100020L});
	public static final BitSet FOLLOW_ws_in_selector3757 = new BitSet(new long[]{0x0000080000000000L,0x0000000040000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_combinator_in_selector3760 = new BitSet(new long[]{0x0804C400E0280080L,0x0008000020020202L,0x0000000000100002L});
	public static final BitSet FOLLOW_ws_in_selector3762 = new BitSet(new long[]{0x0804C400E0080080L,0x0008000020000202L,0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_selector3766 = new BitSet(new long[]{0x0804C400E0080080L,0x0008000020000202L,0x0000000000000002L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_selector3769 = new BitSet(new long[]{0x0000080000200002L,0x0000000040020000L,0x0000000000100020L});
	public static final BitSet FOLLOW_combinator_in_selector3784 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3836 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence3842 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence3856 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3871 = new BitSet(new long[]{0x0800C000E0080000L,0x0008000000000002L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3874 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3879 = new BitSet(new long[]{0x0004800000000080L,0x0000000000000200L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence3884 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_simpleSelectorSequence3890 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_typeSelector_in_simpleSelectorSequence3904 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3916 = new BitSet(new long[]{0x0800C000E0080000L,0x0008000000000002L});
	public static final BitSet FOLLOW_elementSubsequent_in_simpleSelectorSequence3919 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_simpleSelectorSequence3926 = new BitSet(new long[]{0x0004800000000000L,0x0000000000000200L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_simpleSelectorSequence3928 = new BitSet(new long[]{0x0800C000E0280002L,0x0008000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_esPred3953 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_esPred3957 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_esPred3961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_esPred3965 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_COLON_in_esPred3969 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DCOLON_in_esPred3973 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_esPred3977 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_esPred3983 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefix_in_typeSelector4025 = new BitSet(new long[]{0x0004040000000000L,0x0000000000000002L,0x0000000000000002L});
	public static final BitSet FOLLOW_elementName_in_typeSelector4029 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_namespacePrefixName_in_namespacePrefix4044 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_STAR_in_namespacePrefix4048 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
	public static final BitSet FOLLOW_PIPE_in_namespacePrefix4052 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_extend_only_selector_in_elementSubsequent4084 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent4098 = new BitSet(new long[]{0x0004000000000002L,0x0000000000400000L});
	public static final BitSet FOLLOW_LESS_AND_in_elementSubsequent4121 = new BitSet(new long[]{0x0004000000000080L,0x0000000000000200L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_elementSubsequent4123 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssId_in_elementSubsequent4132 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cssClass_in_elementSubsequent4141 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_slAttribute_in_elementSubsequent4153 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_elementSubsequent4165 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_cssId4189 = new BitSet(new long[]{0x0004800000000002L,0x0000000000000200L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssId4194 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_cssId4216 = new BitSet(new long[]{0x0004000000000080L,0x0000000000008200L});
	public static final BitSet FOLLOW_NAME_in_cssId4232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssId4252 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cssClass4304 = new BitSet(new long[]{0x0004840000000080L,0x0000000000200200L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_cssClass4332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_cssClass4350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cssClass4366 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cssClass4382 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_cssClass4398 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_cssClass4422 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACKET_in_slAttribute4478 = new BitSet(new long[]{0x0004000000200000L,0x0000000020020000L,0x0000000000100002L});
	public static final BitSet FOLLOW_namespacePrefix_in_slAttribute4485 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_slAttribute4488 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_slAttributeName_in_slAttribute4499 = new BitSet(new long[]{0x0020000410600200L,0x0000000401020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_slAttribute4501 = new BitSet(new long[]{0x0020000410400200L,0x0000000401000000L});
	public static final BitSet FOLLOW_set_in_slAttribute4535 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100004L});
	public static final BitSet FOLLOW_ws_in_slAttribute4715 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_slAttributeValue_in_slAttribute4734 = new BitSet(new long[]{0x0000000000200000L,0x0000000400020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_slAttribute4752 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
	public static final BitSet FOLLOW_RBRACKET_in_slAttribute4777 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_slAttributeName4793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_pseudo4865 = new BitSet(new long[]{0x0004840000000000L,0x0000000000200000L});
	public static final BitSet FOLLOW_set_in_pseudo4928 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_pseudo4985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo4988 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DDF85C430706L,0x00000000001A4FE6L});
	public static final BitSet FOLLOW_ws_in_pseudo4990 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DDF85C410706L,0x00000000000A4FE6L});
	public static final BitSet FOLLOW_expression_in_pseudo4996 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_pseudo4998 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_STAR_in_pseudo5004 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5009 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_pseudo5072 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_pseudo5110 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_pseudo5112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5115 = new BitSet(new long[]{0x0804C400E0280080L,0x0008010020020202L,0x0000000000100002L});
	public static final BitSet FOLLOW_ws_in_pseudo5117 = new BitSet(new long[]{0x0804C400E0080080L,0x0008010020000202L,0x0000000000000002L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_pseudo5121 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_pseudo5123 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_pseudo5172 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_pseudo5174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_pseudo5177 = new BitSet(new long[]{0x0804CC00E0280080L,0x0008010060020202L,0x0000000000100022L});
	public static final BitSet FOLLOW_ws_in_pseudo5179 = new BitSet(new long[]{0x0804CC00E0080080L,0x0008010060000202L,0x0000000000000022L});
	public static final BitSet FOLLOW_selectorsGroup_in_pseudo5182 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_pseudo5185 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration5221 = new BitSet(new long[]{0x7014848000847CC0L,0x7BB4DCE004010700L,0x00000000000A0F80L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration5224 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5226 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration5229 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5231 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_propertyValue_in_propertyDeclaration5234 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STAR_in_propertyDeclaration5243 = new BitSet(new long[]{0x7014848000847CC0L,0x7BB4DCE004010700L,0x00000000000A0F80L});
	public static final BitSet FOLLOW_property_in_propertyDeclaration5246 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5248 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_propertyDeclaration5251 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DCF85C430706L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5253 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_propertyValue_in_propertyDeclaration5256 = new BitSet(new long[]{0x0008000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_propertyDeclaration5259 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_prio_in_propertyDeclaration5262 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_propertyValue5302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyValue_in_cp_propertyValue5310 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_propertyValue5332 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_expressionPredicate5401 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SEMI_in_syncTo_SEMI5502 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_prio5547 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_expression5564 = new BitSet(new long[]{0xF014C5A240B47CE2L,0x7BB4DCF85C430706L,0x00000000001A4FE5L});
	public static final BitSet FOLLOW_ws_in_expression5596 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_ws_in_expression5601 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_operator_in_expression5604 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DCF85C430706L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_expression5606 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_term_in_expression5615 = new BitSet(new long[]{0xF014C5A240B47CE2L,0x7BB4DCF85C430706L,0x00000000001A4FE5L});
	public static final BitSet FOLLOW_unaryOperator_in_term5640 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DCF81C430506L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_term5642 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF81C410506L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_function_in_term5671 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_VARIABLE_in_term5684 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_term5696 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NUMBER_in_term5708 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_in_term5720 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LENGTH_in_term5732 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EMS_in_term5744 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_REM_in_term5756 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_EXS_in_term5768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ANGLE_in_term5780 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TIME_in_term5792 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_FREQ_in_term5804 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_RESOLUTION_in_term5816 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DIMENSION_in_term5828 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_STRING_in_term5845 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_TILDE_in_term5857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000004L});
	public static final BitSet FOLLOW_set_in_term5859 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_JS_STRING_in_term5880 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GEN_in_term5895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_URI_in_term5907 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_hexColor_in_term5919 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_term5933 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_term5947 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_term5961 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_term5975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_term_symbol_in_term5989 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PERCENTAGE_SYMBOL_in_cp_term_symbol6016 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_function6032 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_function6034 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_function6039 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DDF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_function6041 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DDF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_fnAttributes_in_function6068 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_function6099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_functionName6151 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_functionName6153 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName6157 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_functionName6160 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_functionName6162 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes6186 = new BitSet(new long[]{0x0000000000300002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_fnAttributes6189 = new BitSet(new long[]{0x0000000000100000L,0x8000000000000000L});
	public static final BitSet FOLLOW_COMMA_in_fnAttributes6193 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_SEMI_in_fnAttributes6199 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_fnAttributes6202 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_fnAttribute_in_fnAttributes6205 = new BitSet(new long[]{0x0000000000300002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_fnAttributes6209 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_fnAttribute6246 = new BitSet(new long[]{0x0000000000280000L,0x0000000001020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_fnAttribute6248 = new BitSet(new long[]{0x0000000000080000L,0x0000000001000000L});
	public static final BitSet FOLLOW_set_in_fnAttribute6251 = new BitSet(new long[]{0xF01CC5A240A47CE0L,0x7BB4DCF85C430746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_fnAttribute6257 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_fnAttributeValue_in_fnAttribute6260 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_fnAttribute6277 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_expression_in_fnAttribute6289 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName6312 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_DOT_in_fnAttributeName6315 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_fnAttributeName6317 = new BitSet(new long[]{0x0000000080000002L});
	public static final BitSet FOLLOW_cp_variable_in_fnAttributeName6337 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue6360 = new BitSet(new long[]{0xF014C5A240A47CE2L,0x7BB4DCF85C430706L,0x00000000001A4FE5L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue6392 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue6397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SOLIDUS_in_fnAttributeValue6400 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DCF85C430706L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_fnAttributeValue6402 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_term_in_fnAttributeValue6411 = new BitSet(new long[]{0xF014C5A240A47CE2L,0x7BB4DCF85C430706L,0x00000000001A4FE5L});
	public static final BitSet FOLLOW_cp_math_expression_in_fnAttributeValue6432 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_hexColor6446 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration6506 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration6508 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration6511 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration6513 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration6516 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_variable_declaration6538 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration6540 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_variable_declaration6543 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration6545 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_variable_declaration6548 = new BitSet(new long[]{0x0000000000200002L,0x0040200000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration6552 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
	public static final BitSet FOLLOW_SASS_DEFAULT_in_cp_variable_declaration6555 = new BitSet(new long[]{0x0000000000200002L,0x0040200000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_variable_declaration6561 = new BitSet(new long[]{0x0000000000000000L,0x0040000000000000L});
	public static final BitSet FOLLOW_SASS_GLOBAL_in_cp_variable_declaration6564 = new BitSet(new long[]{0x0000000000200002L,0x0040200000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_set_in_cp_variable6604 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_VAR_in_cp_variable6788 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6818 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list6837 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_cp_expression_list6840 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_expression_list6842 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_cp_expression_list6845 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_LBRACE_in_cp_expression6881 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_cp_expression6883 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression6886 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_cp_expression6888 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_expression6891 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6907 = new BitSet(new long[]{0xF01CDDA246A47CE2L,0x7BB4DCF85C63074FL,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_expression6931 = new BitSet(new long[]{0x0004180006000000L,0x0000000000000009L});
	public static final BitSet FOLLOW_cp_expression_operator_in_cp_expression6934 = new BitSet(new long[]{0xF01CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_expression6936 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6940 = new BitSet(new long[]{0xF01CDDA246A47CE2L,0x7BB4DCF85C63074FL,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_expression6959 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_atom_in_cp_expression6962 = new BitSet(new long[]{0xF01CDDA246A47CE2L,0x7BB4DCF85C63074FL,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression6980 = new BitSet(new long[]{0x7014848000B47CC0L,0x7BB4DDE004430700L,0x00000000001A0F84L});
	public static final BitSet FOLLOW_ws_in_cp_expression6982 = new BitSet(new long[]{0x7014848000947CC0L,0x7BB4DDE004410700L,0x00000000000A0F84L});
	public static final BitSet FOLLOW_syncToFollow_in_cp_expression6985 = new BitSet(new long[]{0x7014848000947CC0L,0x7BB4DDE004410700L,0x00000000000A0F84L});
	public static final BitSet FOLLOW_sass_map_pairs_in_cp_expression6987 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression6990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_or_in_cp_expression_operator7011 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_key_and_in_cp_expression_operator7015 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_EQ_in_cp_expression_operator7020 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_CP_NOT_EQ_in_cp_expression_operator7024 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_in_cp_expression_operator7028 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_OR_EQ_in_cp_expression_operator7032 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_in_cp_expression_operator7036 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_GREATER_OR_EQ_in_cp_expression_operator7040 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_NOT_in_cp_expression_atom7066 = new BitSet(new long[]{0xF01CC5A240A47CE0L,0x7BB4DCF85C430746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom7068 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_expression_atom7099 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_cp_expression_atom7115 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DDF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom7117 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DDF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_list_in_cp_expression_atom7121 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_expression_atom7123 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_expression_atom7128 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions7160 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expressions7167 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expressions7169 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression7203 = new BitSet(new long[]{0x0000000000200002L,0x0000000040020200L,0x0000000000100003L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression7245 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000200L,0x0000000000000003L});
	public static final BitSet FOLLOW_set_in_cp_math_expression7248 = new BitSet(new long[]{0xF01CC5A240A47CE0L,0x7BB4DCF85C430746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression7258 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_atom_in_cp_math_expression7261 = new BitSet(new long[]{0x0000000000200002L,0x0000000040020200L,0x0000000000100003L});
	public static final BitSet FOLLOW_term_in_cp_math_expression_atom7294 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_cp_math_expression_atom7302 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_unaryOperator_in_cp_math_expression_atom7313 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom7315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_cp_math_expression_atom7321 = new BitSet(new long[]{0xF01CC5A240A47CE0L,0x7BB4DCF85C430746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom7323 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_in_cp_math_expression_atom7326 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_math_expression_atom7328 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_math_expression_atom7331 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_declaration7371 = new BitSet(new long[]{0x0404000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_declaration7378 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration7380 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_declaration7385 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration7391 = new BitSet(new long[]{0x7014008001A47C40L,0x7BB4DDE004030510L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7393 = new BitSet(new long[]{0x7014008001847C40L,0x7BB4DDE004010510L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration7396 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration7399 = new BitSet(new long[]{0x0404000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7404 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_less_mixin_guarded_in_cp_mixin_declaration7407 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_cp_mixin_declaration7431 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7433 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_declaration7435 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7438 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_declaration7441 = new BitSet(new long[]{0x7014008001A47C40L,0x7BB4DDE004030510L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7443 = new BitSet(new long[]{0x7014008001847C40L,0x7BB4DDE004010510L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_args_list_in_cp_mixin_declaration7446 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_declaration7449 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_declaration7463 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_declaration7466 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call7502 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call7504 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call7508 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call7512 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call7516 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7532 = new BitSet(new long[]{0x0000080000000000L,0x0000000040000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_combinator_in_cp_mixin_call7535 = new BitSet(new long[]{0x0000400080200040L,0x0000000000020002L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7537 = new BitSet(new long[]{0x0000400080000040L,0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_cp_mixin_call7541 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call7543 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_HASH_in_cp_mixin_call7547 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_AT_IDENT_in_cp_mixin_call7551 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_LESS_AND_in_cp_mixin_call7555 = new BitSet(new long[]{0x0000080020280002L,0x0000000040020040L,0x0000000000100020L});
	public static final BitSet FOLLOW_pseudo_in_cp_mixin_call7565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7577 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call7580 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DDF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7582 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DDF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call7585 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call7588 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_INCLUDE_in_cp_mixin_call7613 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7615 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_cp_mixin_name_in_cp_mixin_call7617 = new BitSet(new long[]{0x0400000000200002L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_cp_mixin_call7623 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DDF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7625 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DDF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_mixin_call_args_in_cp_mixin_call7628 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_cp_mixin_call7631 = new BitSet(new long[]{0x0400000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call7636 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_cp_mixin_block_in_cp_mixin_call7639 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_cp_mixin_block7668 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE26C030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block7670 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE26C010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_cp_mixin_block7673 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE26C010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_cp_mixin_block7684 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_webkitKeyframesBlock_in_cp_mixin_block7699 = new BitSet(new long[]{0x0004000000200000L,0x0000080208020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_block7701 = new BitSet(new long[]{0x0004000000000000L,0x0000080208000000L});
	public static final BitSet FOLLOW_RBRACE_in_cp_mixin_block7713 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_mixin_name7734 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args7765 = new BitSet(new long[]{0x0000000001100002L,0x8000000000000000L});
	public static final BitSet FOLLOW_set_in_cp_mixin_call_args7769 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args7777 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_mixin_call_arg_in_cp_mixin_call_args7780 = new BitSet(new long[]{0x0000000001100002L,0x8000000000000000L});
	public static final BitSet FOLLOW_CP_DOTS_in_cp_mixin_call_args7786 = new BitSet(new long[]{0x0000000000200002L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_args7788 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_cp_mixin_call_args7793 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_mixin_call_arg7825 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg7827 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_cp_mixin_call_arg7830 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg7832 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg7835 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_cp_expression_in_cp_mixin_call_arg7847 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_mixin_call_arg7855 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list7902 = new BitSet(new long[]{0x0000000001100002L,0x8000000000000010L});
	public static final BitSet FOLLOW_set_in_cp_args_list7906 = new BitSet(new long[]{0x7014008000A47C40L,0x7BB4DCE004030500L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_cp_args_list7916 = new BitSet(new long[]{0x7014008000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_arg_in_cp_args_list7919 = new BitSet(new long[]{0x0000000001100002L,0x8000000000000010L});
	public static final BitSet FOLLOW_set_in_cp_args_list7926 = new BitSet(new long[]{0x0000000001200002L,0x0000000000020010L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list7934 = new BitSet(new long[]{0x0000000001000002L,0x0000000000000010L});
	public static final BitSet FOLLOW_set_in_cp_args_list7942 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list7950 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_cp_args_list7967 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_args_list7975 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_cp_arg7998 = new BitSet(new long[]{0x0000000000280002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_arg8000 = new BitSet(new long[]{0x0000000000080002L});
	public static final BitSet FOLLOW_COLON_in_cp_arg8005 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_cp_arg8007 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_cp_arg8010 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_cp_arg8012 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_cp_arg8025 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_when_in_less_mixin_guarded8048 = new BitSet(new long[]{0x0000000000200000L,0x0000000000220040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded8050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200040L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded8053 = new BitSet(new long[]{0x0004000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded8056 = new BitSet(new long[]{0x0004000000100000L});
	public static final BitSet FOLLOW_COMMA_in_less_mixin_guarded8060 = new BitSet(new long[]{0x0000000000200000L,0x0000000000220040L,0x0000000000100000L});
	public static final BitSet FOLLOW_key_and_in_less_mixin_guarded8064 = new BitSet(new long[]{0x0000000000200000L,0x0000000000220040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_mixin_guarded8067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200040L});
	public static final BitSet FOLLOW_less_condition_in_less_mixin_guarded8070 = new BitSet(new long[]{0x0004000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_NOT_in_less_condition8096 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_condition8098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_less_condition8107 = new BitSet(new long[]{0x7014008000A47C40L,0x7BB4DCE004030500L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_less_condition8109 = new BitSet(new long[]{0x7014008000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_variable_in_less_condition8136 = new BitSet(new long[]{0x0000180000200000L,0x0000010001020009L,0x0000000000100000L});
	public static final BitSet FOLLOW_less_function_in_condition_in_less_condition8140 = new BitSet(new long[]{0x0000180000200000L,0x0000010001020009L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_condition8143 = new BitSet(new long[]{0x0000180000000000L,0x0000010001000009L});
	public static final BitSet FOLLOW_less_condition_operator_in_less_condition8147 = new BitSet(new long[]{0xF01CC5A240A47CE0L,0x7BB4DCF85C430746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_less_condition8149 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_in_less_condition8152 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_condition8170 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_fn_name_in_less_function_in_condition8192 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition8194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_less_function_in_condition8197 = new BitSet(new long[]{0x7010008000A47C40L,0x7BB4DCE004030500L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition8199 = new BitSet(new long[]{0x7010008000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_variable_in_less_function_in_condition8202 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_function_in_condition8204 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_less_function_in_condition8207 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_fn_name8229 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_less_selector_interpolation_in_less_selector_interpolation_exp8292 = new BitSet(new long[]{0x8004000040000082L,0x0000000000000200L});
	public static final BitSet FOLLOW_less_selector_interpolation_exp_in_less_selector_interpolation_exp8295 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_AT_SIGN_in_less_selector_interpolation8338 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_less_selector_interpolation8340 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation8342 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_less_selector_interpolation8345 = new BitSet(new long[]{0x0000000000200000L,0x0000000200020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_less_selector_interpolation8347 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_less_selector_interpolation8350 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_interpolation_expression_var_in_sass_selector_interpolation_exp8377 = new BitSet(new long[]{0x8004800040000002L,0x0000000000000200L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_selector_interpolation_exp8380 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_SYMBOL_in_sass_interpolation_expression_var8427 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_interpolation_expression_var8429 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var8431 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_sass_interpolation_expression_var8434 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L,0x0000000000100000L});
	public static final BitSet FOLLOW_WS_in_sass_interpolation_expression_var8436 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_interpolation_expression_var8439 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_sass_nested_properties8479 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties8481 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_sass_nested_properties8484 = new BitSet(new long[]{0xF414C5A240A47CE0L,0x7BB4DCF85C430706L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties8486 = new BitSet(new long[]{0xF414C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_propertyValue_in_sass_nested_properties8490 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties8492 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_nested_properties8497 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_sass_nested_properties8499 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_syncToFollow_in_sass_nested_properties8502 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_sass_nested_properties8504 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_nested_properties8507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_in_sass_extend8528 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_extend8530 = new BitSet(new long[]{0x0804C400E0080080L,0x0008000020000202L,0x0000000000000002L});
	public static final BitSet FOLLOW_simpleSelectorSequence_in_sass_extend8532 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_extend8535 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
	public static final BitSet FOLLOW_SASS_OPTIONAL_in_sass_extend8537 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EXTEND_ONLY_SELECTOR_in_sass_extend_only_selector8560 = new BitSet(new long[]{0x0004800000000002L,0x0000000000000200L});
	public static final BitSet FOLLOW_sass_selector_interpolation_exp_in_sass_extend_only_selector8562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_set_in_sass_debug8584 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_debug8594 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_sass_debug8596 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ERROR_in_sass_error8617 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_error8619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
	public static final BitSet FOLLOW_STRING_in_sass_error8621 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_if_in_sass_control8642 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_for_in_sass_control8646 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_each_in_sass_control8650 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_while_in_sass_control8654 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_IF_in_sass_if8675 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_sass_if8677 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_if8680 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_if8682 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_if8685 = new BitSet(new long[]{0x0000000000200002L,0x0001800000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_if8688 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_if8691 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8714 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_else8716 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else8719 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_ELSE_in_sass_else8733 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_else8735 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_else8740 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_SASS_ELSEIF_in_sass_else8747 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_sass_else8750 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_else8753 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_else8755 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_else8758 = new BitSet(new long[]{0x0000000000200002L,0x0001800000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_else8761 = new BitSet(new long[]{0x0000000000000000L,0x0001800000000000L});
	public static final BitSet FOLLOW_sass_else_in_sass_else8764 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_sass_control_expression8787 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FOR_in_sass_for8808 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_for8810 = new BitSet(new long[]{0x7010008000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_variable_in_sass_for8812 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_for8814 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for8818 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_for8822 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for8824 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_for8826 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_for8830 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_for8834 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C410746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_math_expression_in_sass_for8836 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_for8838 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_for8841 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_EACH_in_sass_each8862 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_each8864 = new BitSet(new long[]{0x7010008000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_sass_each_variables_in_sass_each8866 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_each8868 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_sass_each8872 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_each8876 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_list_in_sass_each8879 = new BitSet(new long[]{0xF41CC5A240B47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_sass_each8882 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each8885 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_sass_each8889 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_each8895 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables8916 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables8928 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_sass_each_variables8931 = new BitSet(new long[]{0x7010008000A47C40L,0x7BB4DCE004030500L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_sass_each_variables8933 = new BitSet(new long[]{0x7010008000847C40L,0x7BB4DCE004010500L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_variable_in_sass_each_variables8936 = new BitSet(new long[]{0x0000000000300002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_SASS_WHILE_in_sass_while8961 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_while8963 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_sass_control_expression_in_sass_while8965 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_while8967 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_sass_control_block_in_sass_while8970 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LBRACE_in_sass_control_block8991 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_sass_control_block8993 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_sass_control_block8996 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_control_block8999 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_FUNCTION_in_sass_function_declaration9041 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9043 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_sass_function_name_in_sass_function_declaration9045 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_sass_function_declaration9050 = new BitSet(new long[]{0x7014008001A47C40L,0x7BB4DDE004030510L,0x0000000000180F80L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9052 = new BitSet(new long[]{0x7014008001847C40L,0x7BB4DDE004010510L,0x0000000000080F80L});
	public static final BitSet FOLLOW_cp_args_list_in_sass_function_declaration9055 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_sass_function_declaration9058 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9060 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_sass_function_declaration9063 = new BitSet(new long[]{0x7814CC80E0AC7CC0L,0xFBBEDCE264030702L,0x00000000001A0FAAL});
	public static final BitSet FOLLOW_ws_in_sass_function_declaration9065 = new BitSet(new long[]{0x7814CC80E08C7CC0L,0xFBBEDCE264010702L,0x00000000000A0FAAL});
	public static final BitSet FOLLOW_declarations_in_sass_function_declaration9068 = new BitSet(new long[]{0x0000000000000000L,0x0000000200000000L});
	public static final BitSet FOLLOW_RBRACE_in_sass_function_declaration9071 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_sass_function_name9092 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_RETURN_in_sass_function_return9113 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_sass_function_return9115 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_sass_function_return9117 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_CONTENT_in_sass_content9138 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_import_types9157 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_less_when9180 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_and9199 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_or9217 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_IDENT_in_key_only9235 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred1_Css3335 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred1_Css3338 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred2_Css3399 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred2_Css3402 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred3_Css3453 = new BitSet(new long[]{0x7014848000847C40L,0x7BB4DCE004210540L,0x0000000000080F80L});
	public static final BitSet FOLLOW_mediaQueryList_in_synpred3_Css3456 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred4_Css3575 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_synpred4_Css3578 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred5_Css3676 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred5_Css3683 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred5_Css3685 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_HASH_in_synpred5_Css3690 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred5_Css3693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_synpred5_Css3696 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred5_Css3704 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x7FFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
	public static final BitSet FOLLOW_LBRACE_in_synpred5_Css3714 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred6_Css3732 = new BitSet(new long[]{0x0008000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css3735 = new BitSet(new long[]{0x0008000000000000L});
	public static final BitSet FOLLOW_IMPORTANT_SYM_in_synpred6_Css3738 = new BitSet(new long[]{0x0000000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred6_Css3742 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_synpred6_Css3745 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred7_Css3768 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css3793 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3796 = new BitSet(new long[]{0x0804CC00E0080080L,0x0008000060000202L,0x0000000000000022L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css3798 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred8_Css3807 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_synpred8_Css3811 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3813 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css3816 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3818 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred8_Css3821 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3823 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred8_Css3826 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3828 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred8_Css3831 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred8_Css3836 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred8_Css3839 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred8_Css3842 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred9_Css3854 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred10_Css3969 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred10_Css3972 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred11_Css31016 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred11_Css31019 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred12_Css31046 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_key_and_in_synpred12_Css31049 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_LPAREN_in_synpred13_Css31131 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_HASH_in_synpred14_Css31160 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred15_Css31306 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_synpred15_Css31309 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_MIXIN_in_synpred16_Css31384 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_DOT_in_synpred16_Css31391 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred16_Css31393 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_HASH_in_synpred16_Css31398 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred16_Css31401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_synpred16_Css31404 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
	public static final BitSet FOLLOW_RPAREN_in_synpred16_Css31412 = new BitSet(new long[]{0xFFFFFFFFFFFFFFF0L,0x7FFFFFFDFFFFFFFFL,0x0000000000FFFFFFL});
	public static final BitSet FOLLOW_LBRACE_in_synpred16_Css31424 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred17_Css31450 = new BitSet(new long[]{0x0000000000200000L,0x8000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred17_Css31452 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L});
	public static final BitSet FOLLOW_SEMI_in_synpred17_Css31455 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred18_Css31474 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_in_synpred19_Css31502 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred19_Css31504 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred19_Css31507 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred20_Css31524 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred21_Css32987 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred21_Css32990 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_function_in_synpred22_Css33081 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_variable_declaration_in_synpred23_Css33381 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_map_in_synpred24_Css33393 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_sass_nested_properties_in_synpred25_Css33406 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred26_Css33420 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33423 = new BitSet(new long[]{0x0804CC00E0080080L,0x0008000060000202L,0x0000000000000022L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred26_Css33425 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_SASS_AT_ROOT_in_synpred26_Css33434 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_synpred26_Css33438 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33440 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred26_Css33443 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33445 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred26_Css33448 = new BitSet(new long[]{0x0004000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33450 = new BitSet(new long[]{0x0004000000000000L});
	public static final BitSet FOLLOW_IDENT_in_synpred26_Css33453 = new BitSet(new long[]{0x0000000000200000L,0x0000010000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33455 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
	public static final BitSet FOLLOW_RPAREN_in_synpred26_Css33458 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_selectorsGroup_in_synpred26_Css33463 = new BitSet(new long[]{0x0400000000200000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred26_Css33466 = new BitSet(new long[]{0x0400000000000000L});
	public static final BitSet FOLLOW_LBRACE_in_synpred26_Css33469 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_propertyDeclaration_in_synpred27_Css33481 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_property_in_synpred28_Css33498 = new BitSet(new long[]{0x0000000000280000L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred28_Css33500 = new BitSet(new long[]{0x0000000000080000L});
	public static final BitSet FOLLOW_COLON_in_synpred28_Css33503 = new BitSet(new long[]{0xFBFFFFFFFFFFFFF0L,0xFFFFFFFFFFFFFFFFL,0x0000000000FFFFFFL});
	public static final BitSet FOLLOW_set_in_synpred28_Css33515 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_declaration_in_synpred29_Css33532 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred30_Css33544 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_mixin_call_in_synpred31_Css33565 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred32_Css33863 = new BitSet(new long[]{0x0800C000A0080000L,0x0008000000000002L});
	public static final BitSet FOLLOW_esPred_in_synpred32_Css33866 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_typeSelector_in_synpred33_Css33901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred34_Css33908 = new BitSet(new long[]{0x0800C000A0080000L,0x0008000000000002L});
	public static final BitSet FOLLOW_esPred_in_synpred34_Css33911 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_PIPE_in_synpred35_Css34022 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred36_Css35571 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_ws_in_synpred36_Css35576 = new BitSet(new long[]{0x0000000000100000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_operator_in_synpred36_Css35579 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DCF85C430706L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_synpred36_Css35581 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_term_in_synpred36_Css35590 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_functionName_in_synpred37_Css35663 = new BitSet(new long[]{0x0000000000200000L,0x0000000000020040L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred37_Css35665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_synpred37_Css35668 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_fnAttributeName_in_synpred38_Css36233 = new BitSet(new long[]{0x0000000000280000L,0x0000000001020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred38_Css36235 = new BitSet(new long[]{0x0000000000080000L,0x0000000001000000L});
	public static final BitSet FOLLOW_set_in_synpred38_Css36238 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_in_synpred39_Css36273 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css36367 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css36372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
	public static final BitSet FOLLOW_SOLIDUS_in_synpred40_Css36375 = new BitSet(new long[]{0xF014C5A240A47CE0L,0x7BB4DCF85C430706L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_synpred40_Css36377 = new BitSet(new long[]{0xF014C5A240847CE0L,0x7BB4DCF85C410706L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_term_in_synpred40_Css36386 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css36826 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred42_Css36829 = new BitSet(new long[]{0xF41CC5A240A47CE0L,0x7BB4DCF85C630746L,0x00000000001A4FE4L});
	public static final BitSet FOLLOW_ws_in_synpred42_Css36831 = new BitSet(new long[]{0xF41CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_in_synpred42_Css36834 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred43_Css36901 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred44_Css36924 = new BitSet(new long[]{0x0004180006000000L,0x0000000000000009L});
	public static final BitSet FOLLOW_cp_expression_operator_in_synpred44_Css36927 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred45_Css36953 = new BitSet(new long[]{0xF01CC5A240847CE0L,0x7BB4DCF85C610746L,0x00000000000A4FE4L});
	public static final BitSet FOLLOW_cp_expression_atom_in_synpred45_Css36956 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_cp_math_expression_in_synpred46_Css37096 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred47_Css37229 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000200L,0x0000000000000003L});
	public static final BitSet FOLLOW_set_in_synpred47_Css37232 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred48_Css37521 = new BitSet(new long[]{0x0000080000000000L,0x0000000040000000L,0x0000000000000020L});
	public static final BitSet FOLLOW_combinator_in_synpred48_Css37524 = new BitSet(new long[]{0x0000000000200002L,0x0000000000020000L,0x0000000000100000L});
	public static final BitSet FOLLOW_ws_in_synpred48_Css37526 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_pseudo_in_synpred49_Css37562 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred50_Css37570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
	public static final BitSet FOLLOW_LPAREN_in_synpred50_Css37573 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_webkitKeyframeSelectors_in_synpred51_Css37689 = new BitSet(new long[]{0x0000000000000002L});
	public static final BitSet FOLLOW_ws_in_synpred52_Css38921 = new BitSet(new long[]{0x0000000000100000L});
	public static final BitSet FOLLOW_COMMA_in_synpred52_Css38924 = new BitSet(new long[]{0x0000000000000002L});
}
